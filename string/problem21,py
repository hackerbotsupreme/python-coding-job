#Program to add two binary strings
#Given two binary strings, return their sum (also a binary string).

#Example: 

#Input:  a = "11", b = "1"
#Output: "100" 
#We strongly recommend you to minimize your browser and try this yourself first 

#The idea is to start from the last characters of two strings and compute the digit sum one by one. If the sum becomes more than 1, then store carry for the next digits. 
# Python Solution for above problem:

# This function adds two binary
# strings return the resulting string
def add_binary_nums(x, y):
		max_len = max(len(x), len(y))

		x = x.zfill(max_len)
		y = y.zfill(max_len)
		
		# initialize the result
		result = ''
		
		# initialize the carry
		carry = 0

		# Traverse the string
		for i in range(max_len - 1, -1, -1):
			r = carry
			r += 1 if x[i] == '1' else 0
			r += 1 if y[i] == '1' else 0
			result = ('1' if r % 2 == 1 else '0') + result
			carry = 0 if r < 2 else 1	 # Compute the carry.
		
		if carry !=0 : result = '1' + result

		return result.zfill(max_len)

# Driver code
print(add_binary_nums('1101', '100'))

# This code is contributed
# by Anand Khatri
#Output
#10001
#Time Complexity: O(max(L1, L2)), where L1 and L2 are the lengths of strings a and b respectively. 
#Auxiliary Space: O(max(L1, L2)), where L1 and L2 are the lengths of strings a and b respectively. 
