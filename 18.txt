Count all possible Paths between two Vertices

Difficulty Level : Medium
Last Updated : 21 Sep, 2022
Read
Discuss(80+)
Courses
Practice
Video
Count the total number of ways or paths that exist between two vertices in a directed graph. These paths don’t contain a cycle, the simple enough reason is that a cycle contains an infinite number of paths and hence they create a problem

Examples: 

For the following Graph:



  

Input: Count paths between A and E
Output: Total paths between A and E are 4
Explanation: The 4 paths between A and E are:

                      A -> E
                      A -> B -> E
                      A -> C -> E
                      A -> B -> D -> C -> E 

Input: Count paths between A and C
Output: Total paths between A and C are 2
Explanation: The 2 paths between A and C are:

                      A -> C
                      A -> B -> D -> C

Recommended Problem
Possible paths between 2 vertices
DFS
Graph
+2 more
Solve Problem
Submission count: 20K
Count paths between two vertices using Backtracking: 
To solve the problem follow the below idea:

The problem can be solved using backtracking, which says to take a path and start walking on it and check if it leads us to the destination vertex then count the path and backtrack to take another path. If the path doesn’t lead to the destination vertex, discard the path. This type of graph traversal is called Backtracking.

Backtracking for the above graph can be shown like this: 

Note: The red color vertex is the source vertex and the light-blue color vertex is destination, rest are either intermediate or discarded paths. 
 



This give four paths between source(A) and destination(E) vertex

Why this solution will not work for a graph which contains cycles? 
The Problem Associated with this is that now if one more edge is added between C and B, it would make a cycle (B -> D -> C -> B). And hence after every cycle through the loop, the length path will increase and that will be considered a different path, and there would be infinitely many paths because of the cycle
 



Follow the given steps to solve the problem:

Create a recursive function that takes the index of a node of a graph and the destination index. Keep a global or a static variable count to store the count. 
Keep a record of the nodes visited using a visited array and while returning mark the current node to be unvisited to discover other paths.
If the current node is the destination then increase the count.
Else for all the adjacent nodes, i.e. nodes that are accessible from the current node, call the recursive function with the index of the adjacent node and the destination.
Print the Count as the required answer.
Below is the implementation of the above approach.

C++
Java
Python3
# Python 3 program to count all paths
# from a source to a destination.
 
# A directed graph using adjacency
# list representation
 
 
class Graph:
 
    def __init__(self, V):
        self.V = V
        self.adj = [[] for i in range(V)]
 
    def addEdge(self, u, v):
 
        # Add v to u’s list.
        self.adj[u].append(v)
 
    # Returns count of paths from 's' to 'd'
    def countPaths(self, s, d):
 
        # Mark all the vertices
        # as not visited
        visited = [False] * self.V
 
        # Call the recursive helper
        # function to print all paths
        pathCount = [0]
        self.countPathsUtil(s, d, visited, pathCount)
        return pathCount[0]
 
    # A recursive function to print all paths
    # from 'u' to 'd'. visited[] keeps track
    # of vertices in current path. path[]
    # stores actual vertices and path_index
    # is current index in path[]
    def countPathsUtil(self, u, d,
                       visited, pathCount):
        visited[u] = True
 
        # If current vertex is same as
        # destination, then increment count
        if (u == d):
            pathCount[0] += 1
 
        # If current vertex is not destination
        else:
 
            # Recur for all the vertices
            # adjacent to current vertex
            i = 0
            while i < len(self.adj[u]):
                if (not visited[self.adj[u][i]]):
                    self.countPathsUtil(self.adj[u][i], d,
                                        visited, pathCount)
                i += 1
 
        visited[u] = False
 
 
# Driver Code
if __name__ == '__main__':
 
    # Create a graph given in the
    # above diagram
    g = Graph(4)
    g.addEdge(0, 1)
    g.addEdge(0, 2)
    g.addEdge(0, 3)
    g.addEdge(2, 0)
    g.addEdge(2, 1)
    g.addEdge(1, 3)
 
    s = 2
    d = 3
     
    # Function call
    print(g.countPaths(s, d))
 
# This code is contributed by PranchalK
C#
Javascript
Output
3
Time Complexity: O((N-1)!). If the graph is complete then there can be around (N-1)! recursive calls
Auxiliary Space: O(N). Auxiliary stack space used by recursion calls



Like
Previous
Find shortest safe route in a path with landmines
Next
Tug of War
Related Articles
1.
Find maximum number of edge disjoint paths between two vertices
2.
Construct a graph using N vertices whose shortest distance between K pair of vertices is 2
3.
Shortest paths from all vertices to a destination
4.
Find K vertices in the graph which are connected to at least one of remaining vertices
5.
Maximize the number of uncolored vertices appearing along the path from root vertex and the colored vertices
6.
Pendant Vertices, Non-Pendant Vertices, Pendant Edges and Non-Pendant Edges in Graph
7.
Count of all possible Paths in a Tree such that Node X does not appear before Node Y
8.
Count number of times each Edge appears in all possible paths of a given Tree
9.
Print all possible paths from top left to bottom right of a mXn matrix
10.
Print all possible paths to escape out of a matrix from a given position using at most K moves
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
shubham_rana_77
@shubham_rana_77
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
shubhamjd
IshaanKanwar
PranchalKatiyar
nidhi_biet
Rajput-Ji
andrew1234
davidkmohamad
vineetmalik06
avanitrachhadiya2155
mdaman1024
kushagraj81
siddharthsinghvats
hardikkoriintern
janardansthox
Article Tags :
DFS
Backtracking
Graph
Practice Tags :
Backtracking
DFS
Graph