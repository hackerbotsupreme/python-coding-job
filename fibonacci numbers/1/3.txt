Zeckendorf’s Theorem (Non-Neighbouring Fibonacci Representation)

Difficulty Level : Medium
Last Updated : 09 Nov, 2022
Read
Discuss
Courses
Practice
Video
Zeckendorf’s theorem states that every positive integer can be written uniquely as a sum of distinct non-neighbouring Fibonacci numbers. Two Fibonacci numbers are neighbours if they one come after other in Fibonacci Sequence (0, 1, 1, 2, 3, 5, ..). For example, 3 and 5 are neighbours, but 2 and 5 are not.

Given a number, find a representation of number as sum of non-consecutive Fibonacci numbers.

Examples:

Input:  n = 10
Output: 8 2
8 and 2 are two non-consecutive Fibonacci Numbers
and sum of them is 10.

Input:  n = 30
Output: 21 8 1
21, 8 and 1 are non-consecutive Fibonacci Numbers
and sum of them is 30.
We strongly recommend you to minimize your browser and try this yourself first.
The idea is to use Greedy Algorithm. 

1) Let n be input number

2) While n >= 0
     a) Find the greatest Fibonacci Number smaller than n.
        Let this number be 'f'.  Print 'f'
     b) n = n - f 
C++
Java
Python3
# Python program for Zeckendorf's theorem. It finds
# representation of n as sum of non-neighbouring
# Fibonacci Numbers.
 
# Returns the greatest Fibonacci Number smaller than
# or equal to n.
def nearestSmallerEqFib(n):
     
    # Corner cases
    if (n == 0 or n == 1):
        return n
        
    # Finds the greatest Fibonacci Number smaller
    # than n.
    f1, f2, f3 = 0, 1, 1
    while (f3 <= n):
        f1 = f2;
        f2 = f3;
        f3 = f1 + f2;
    return f2;
 
 
# Prints Fibonacci Representation of n using
# greedy algorithm
def printFibRepresntation(n):
     
    while (n>0):
 
        # Find the greates Fibonacci Number smaller
        # than or equal to n
        f = nearestSmallerEqFib(n);
  
        # Print the found fibonacci number
        print (f,end=" ")
  
        # Reduce n
        n = n-f
 
# Driver code test above functions
n = 30
print ("Non-neighbouring Fibonacci Representation of", n, "is")
printFibRepresntation(n)
C#
PHP
Javascript
Output
Non-neighbouring Fibonacci Representation of 30 is 
21 8 1 
Time Complexity:  O(N*LogN)
Auxiliary Space: O(1)

How does above Greedy Algorithm work? 
Let the greatest Fibonacci number smaller than or equal to ‘n’ be fib(i) [i’th Fibonacci Number]. 
Then n – fib(i) will have its own representation as sum of non-neighbouring Fibonacci numbers.
All we want to make sure is that there is no neighbouring problem. By induction, n-fib(i) does not have neighbouring problem, then the only way n could have a neighbouring problem is if n-fib(i) uses fib(i-1) in its representation. 
So all we have to further prove is that n-fib(i) does not use fib(i-1) in its representation
Let us prove it using contradiction. If n-fib(i) = fib(i-1) + fib(i-x) +…, then fib(i) cannot be the closest smallest Fibonacci number to n, since fib(i) + fib(i-1) itself is fib(i+1). 
So if n-fib(i) contains fib(i-1) in its representation then fib(i+1) would be closer smaller fib number to n, contradicting our assumption that fib(i) is the closest smaller fib number to n.



Can this representation be useful? 
Like Binary Representation. This can be an alternate representation to represent positive numbers. One important observation about this representation is, number of 1’s in the Fibonacci representation tends to be much less than the number of 1’s in the binary representation. Hence if in any application where it is more costly to store a 1 than to store a 0, it would make sense to use the fibonacci representation.
This article is contributed by Gaurav Saxena. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
5
Previous
Count number of ways to divide a number in 4 parts
Next
Count number of squares in a rectangle
Related Articles
1.
Compute nCr % p | Set 4 (Chinese Remainder theorem with Lucas Theorem)
2.
Check if a M-th fibonacci number divides N-th fibonacci number
3.
Check if sum of Fibonacci elements in an Array is a Fibonacci number or not
4.
Introduction to Chinese Remainder Theorem
5.
Wilson's Theorem
6.
Compute nCr%p using Lucas Theorem
7.
Implementation of Chinese Remainder theorem (Inverse Modulo based implementation)
8.
Combinatorial Game Theory | Set 4 (Sprague - Grundy Theorem)
9.
Compute nCr%p using Fermat Little Theorem
10.
Using Chinese Remainder Theorem to Combine Modular equations
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
jit_t
varun_saini
jyoti369
_saurabh_jaiswal
surinderdawra388
amartyaghoshgfg
raj2002
Article Tags :
Fibonacci
Mathematical
Practice Tags :
Fibonacci
Mathematical