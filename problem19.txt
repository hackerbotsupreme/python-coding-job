Count of number of given string in 2D character array

Difficulty Level : Medium
Last Updated : 04 Jan, 2023
Read
Discuss(20+)
Courses
Practice
Video
Given a 2-Dimensional character array and a string, we need to find the given string in 2-dimensional character array, such that individual characters can be present left to right, right to left, top to down or down to top.

Examples: 

Input : a ={
            {D,D,D,G,D,D},
            {B,B,D,E,B,S},
            {B,S,K,E,B,K},
            {D,D,D,D,D,E},
            {D,D,D,D,D,E},
            {D,D,D,D,D,G}
           }
        str= "GEEKS"
Output :2

Input : a = {
            {B,B,M,B,B,B},
            {C,B,A,B,B,B},
            {I,B,G,B,B,B},
            {G,B,I,B,B,B},
            {A,B,C,B,B,B},
            {M,C,I,G,A,M}
            }
        str= "MAGIC"

Output :3
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
We have discussed simpler problem to find if a word exists or not in a matrix.
Approach:

To count all occurrences, we follow simple brute force approach. 
Traverse through each character of the matrix and taking each character as a start of the string to be found. 
Try to search in all the possible directions. 
Whenever, a word is found, increase the count.
 After traversing the matrix what ever will be the value of count will be number of times string exists in character matrix.
Algorithm : 

Step 1– Traverse matrix character by character and take one character as string start 
Step 2– For each character find the string in all the four directions recursively 
Step 3– If a string found, we increase the count 
Step 4– When we are done with one character as start, we repeat the same process for the next character 
Step 5– Calculate the sum of count for each character 
Step 6– Final count will be the answer
Implementation:

C++14
C
Java
Python3
# Python code for finding count
# of string in a given 2D
# character array.
 
# utility function to search
# complete string from any
# given index of 2d array
def internalSearch(ii, needle, row, col, hay,
                    row_max, col_max):
     
    found = 0
    if (row >= 0 and row <= row_max and
        col >= 0 and col <= col_max and
        needle[ii] == hay[row][col]):
        match = needle[ii]
        ii += 1
        hay[row][col] = 0
        if (ii == len(needle)):
            found = 1
        else:
             
            # through Backtrack searching
            # in every directions
            found += internalSearch(ii, needle, row,
                               col + 1, hay, row_max, col_max)
            found += internalSearch(ii, needle, row,
                               col - 1, hay, row_max, col_max)
            found += internalSearch(ii, needle, row + 1,
                               col, hay, row_max, col_max)
            found += internalSearch(ii, needle, row - 1,
                               col, hay, row_max, col_max)
        hay[row][col] = match
    return found
 
# Function to search the string in 2d array
def searchString(needle, row, col,strr,
                row_count, col_count):
    found = 0
    for r in range(row_count):
        for c in range(col_count):
            found += internalSearch(0, needle, r, c,
                        strr, row_count - 1, col_count - 1)
             
    return found
 
# Driver code
 
needle = "MAGIC"
inputt = ["BBABBM","CBMBBA","IBABBG",
            "GOZBBI","ABBBBC","MCIGAM"]
 
strr = [0] * len(inputt)
 
for i in range(len(inputt)):
    strr[i] = list(inputt[i])
     
print("count: ", searchString(needle, 0, 0, strr,
                        len(strr), len(strr[0])))
 
# This code is contributed by SHUBHAMSINGH10
C#
Javascript
Output
count: 3
Time Complexity: O(n*m)^2, where n is the row size and m is the column size.
Auxiliary Space: O(n*m)







Like
76
Previous
Pattern Searching using C++ library
Next
String matching where one string contains wildcard characters
Related Articles
1.
Count of index pairs (i, j) such that string after deleting ith character is equal to string after deleting jth character
2.
Count substrings having frequency of a character exceeding that of another character in a string
3.
Count of substrings having the most frequent character in the string as first character
4.
Check if frequency of character in one string is a factor or multiple of frequency of same character in other string
5.
Replace all occurrences of character X with character Y in given string
6.
Generate string by incrementing character of given string by number present at corresponding index of second string
7.
Count substrings that starts with character X and ends with character Y
8.
Count of strings possible by replacing two consecutive same character with new character
9.
Find a string such that every character is lexicographically greater than its immediate next character
10.
Last remaining character after repeated removal of the first character and flipping of characters of a Binary String
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
yasinj3
@yasinj3
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
SHUBHAMSINGH10
avnishsingh2
adityapande88
meghasoni8233
mukulsomukesh
geekygirl2001
lucidcoder121
codewithshinchan
hardikkoriintern
sa06511
Article Tags :
Matrix
Pattern Searching
Strings
Practice Tags :
Matrix
Pattern Searching
Strings
Improve Article
Report Issue