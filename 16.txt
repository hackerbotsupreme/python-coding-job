Print all subsets of a given Set or Array

Difficulty Level : Medium
Last Updated : 28 Dec, 2022
Read
Discuss(20+)
Courses
Practice
Video
Given a set of positive integers, find all its subsets. 

Examples: 

Input: array = {1, 2, 3}
Output: // this space denotes null element. 
         1
         1 2
         1 2 3
         1 3
         2
         2 3
         3
Explanation: These are all the subsets that 
can be formed using the array.

Input: 1 2
Output: 
         1 
         2
         1 2
Explanation: These are all the subsets that 
can be formed using the array.
Recommended Problem
Subsets
Recursion
Backtracking
+1 more
Microsoft
Solve Problem
Submission count: 18K
The iterative solution is already discussed here: the iterative approach to find all subsets. This article aims to provide a backtracking approach.

Approach: The idea is simple, that if there are n number of elements inside an array, there are n number of choices for the first element in the array. Moving forward to the next recursion call, there will be n-1 number of choices (as we cannot insert the last element again now) for inserting the second element in the array. 
Using the above idea forms a recursive solution to the problem.

Algorithm: 

Create a recursive function that takes the following parameters, input array, the current index, the output array, or current subset, if all the subsets need to be stored then a vector of the array is needed if the subsets need to be printed only then this space can be ignored.
First, print the subset (output array) that has been sent to the function and then run a for loop starting from the ‘index’ to n-1 where n is the size of the input array. We use a loop to demonstrate that we have exactly n number of choices to choose from when adding the first element to our new array. 
Inside the loop, we call the function for the next index after inserting that particular index and then in the next call, we again have (n-1) choices to choose from and so it goes. 
Whenever a call is made for the last index of the array : in that function call, the loop is not run as the condition i<A.size() is not fulfilled and hence, we backtrack to the last recursion call and call the function for the next index after removing the element at that current index.
We finally return when the initial loop ends and we have received all the subsets possible. 
 
Complete Interview Preparation - GFG

Implementation: 



C++
Java
Python3
# Python3 program to find all subsets
# by backtracking. 
  
# In the array A at every step we have two 
# choices for each element either we can 
# ignore the element or we can include the 
# element in our subset 
def subsetsUtil(A, subset, index):
    print(*subset)
    for i in range(index, len(A)): 
          
        # include the A[i] in subset. 
        subset.append(A[i])
          
        # move onto the next element. 
        subsetsUtil(A, subset, i + 1) 
          
        # exclude the A[i] from subset and 
        # triggers backtracking.
        subset.pop(-1) 
    return
  
# below function returns the subsets of vector A. 
def subsets(A):
    global res
    subset = []
      
    # keeps track of current element in vector A 
    index = 0
    subsetsUtil(A, subset, index) 
      
# Driver Code
  
# find the subsets of below vector. 
array = [1, 2, 3]
  
# res will store all subsets. 
# O(2 ^ (number of elements inside array)) 
# because at every step we have two choices 
# either include or ignore. 
subsets(array) 
  
# This code is contributed by SHUBHAMSINGH8410
C#
Javascript
Output
1 
1 2 
1 2 3 
1 3 
2 
2 3 
3 
Complexity Analysis:  

Time Complexity: O(n. 2^n). Total number of subsets generated are 2^n, So Time Complexity is O(2^n). If we include the time taken to copy the subset vector into the res vector the time taken will be equal to the size of the subset vector.
Auxiliary Space: O(n) There can be at max n recursion calls at a particular time, which would consume O(n) stack space. 




Like
100
Previous
Print all possible paths from top left to bottom right of a mXn matrix
Next
Warnsdorff's algorithm for Knight’s tour problem
Related Articles
1.
Sum of subsets of all the subsets of an array | O(3^N)
2.
Sum of subsets of all the subsets of an array | O(N)
3.
Split array into minimum number of subsets such that elements of all pairs are present in different subsets at least once
4.
Sum of subsets of all the subsets of an array | O(2^N)
5.
Partition an array of non-negative integers into two subsets such that average of both the subsets is equal
6.
Divide array in two Subsets such that sum of square of sum of both subsets is maximum
7.
Maximum number of subsets an array can be split into such that product of their minimums with size of subsets is at least K
8.
Print all subsets of given size of a set
9.
Perfect Sum Problem (Print all subsets with given sum)
10.
Recursive program to print all subsets with given sum
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
foreverrookie
@foreverrookie
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
AbdulWadood
SHUBHAMSINGH10
andrew1234
Akanksha_Rai
srivastavaharshit333
vaibhavpatel1904
_saurabh_jaiswal
shikhasingrajput
ishankithegenius
hardikkoriintern
rahulgunaseelan
Article Tags :
subset
Arrays
Backtracking
Practice Tags :
Arrays
Backtracking
subset