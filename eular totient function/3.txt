Euler’s Totient function for all numbers smaller than or equal to n

Difficulty Level : Medium
Last Updated : 17 Sep, 2022
Read
Discuss
Courses
Practice
Video
Euler’s Totient function Φ(n) for an input n is the count of numbers in {1, 2, 3, …, n} that are relatively prime to n, i.e., the numbers whose GCD (Greatest Common Divisor) with n is 1.

For example, Φ(4) = 2, Φ(3) = 2 and Φ(5) = 4. There are 2 numbers smaller or equal to 4 that are relatively prime to 4, 2 numbers smaller or equal to 3 that are relatively prime to 3. And 4 numbers smaller than or equal to 5 that are relatively prime to 5.
We have discussed different methods for the computation of Φ(n) in the previous post. 

How to compute Φ for all numbers smaller than or equal to n? 

Example: 

Input: n = 5
Output: Totient of 1 is 1
        Totient of 2 is 1
        Totient of 3 is 2
        Totient of 4 is 2
        Totient of 5 is 4
We strongly recommend you to minimize your browser and try this yourself first.
A Simple Solution is to call Φ(i) for i = 1 to n. 

An Efficient Solution is to use an idea similar to the Sieve of Eratosthenes to precompute all values. The method is based on below product formula.

eulersproduct



The formula basically says that the value of Φ(n) is equal to n multiplied by-product of (1 – 1/p) for all prime factors p of n. For example value of Φ(6) = 6 * (1-1/2) * (1 – 1/3) = 2.

Below is the complete algorithm: 

1) Create an array phi[1..n] to store Φ values of all numbers 
   from 1 to n.  

2) Initialize all values such that phi[i] stores i.  This
   initialization serves two purposes.
   a) To check if phi[i] is already evaluated or not. Note that
      the maximum possible phi value of a number i is i-1.
   b) To initialize phi[i] as i is multiple in the above product
      formula. 

3) Run a loop for p = 2 to n
    a) If phi[p] is p, means p is not evaluated yet and p is a 
       prime number (similar to Sieve), otherwise phi[p] must 
       have been updated in step 3.b
    b) Traverse through all multiples of p and update all 
       multiples of p by multiplying with (1-1/p).

4) Run a loop from i = 1 to n and print all Ph[i] values.
Below is the implementation of above algorithm. 

C++
Java
Python3
# Python program to compute
# Totient function for
# all numbers smaller than
# or equal to n.
 
# Computes and prints
# totient of all numbers
# smaller than or equal to n.
def computeTotient(n):
 
    # Create and initialize
    # an array to store
    # phi or totient values
    phi=[]
    for i in range(n + 2):
        phi.append(0)
 
    for i in range(1, n+1):
 
        phi[i] = i # indicates not evaluated yet
                    # and initializes for product
                    # formula.
 
    # Compute other Phi values
    for p in range(2,n+1):
     
        # If phi[p] is not computed already,
        # then number p is prime
        if (phi[p] == p):
         
            # Phi of a prime number p is
            # always equal to p-1.
            phi[p] = p-1
 
            # Update phi values of all
            # multiples of p
            for i in range(2*p,n+1,p):
             
                # Add contribution of p to its
                # multiple i by multiplying with
                # (1 - 1/p)
                phi[i] = (phi[i]//p) * (p-1)
     
 
    # Print precomputed phi values
    for i in range(1,n+1):
        print("Totient of ", i ," is ",
        phi[i])
 
# Driver code
 
n = 12
computeTotient(n)
 
# This code is contributed
# by Anant Agarwal
C#
PHP
Javascript
Output
Totient of 1 is 1
Totient of 2 is 1
Totient of 3 is 2
Totient of 4 is 2
Totient of 5 is 4
Totient of 6 is 2
Totient of 7 is 6
Totient of 8 is 4
Totient of 9 is 6
Totient of 10 is 4
Totient of 11 is 10
Totient of 12 is 4
Time Complexity: O(n2)

Auxiliary Space: O(n)


The same solution can be used when we have a large number of queries for computing the totient function. 

Another way to compute Euler’s totient function can also be done by using the below formula:


Euler’s totient function

Let us see an example to understand the above function, basically, it does the same job but in a different way:

For example, ϕ(12) = { (2^(2-1)) x (2-1) } x { (3^(1-1)) x (3-1) } =4

Note that ϕ(n) = n−1 if n is prime.

Below is the implementation of the above formula:

C++
Java
Python3
# python program for the above approach
import math
def Euler_totient_function(n):
    result = 1
    for i in range(2,n+1):
        c = 0
        if n % i == 0:
            while (n % i == 0):
                c+=1
                n //= i
        if (c > 0):
            power = math.pow(i,c-1)
            m = math.pow(i,c-1)*(i-1)
            result*=m
    if (n > 1):
        result *= (n - 1)
    return int(result)
 
 
for i in range(1,13):
    print("Euler_totient_function(" , i , "): ",end="")
    print(Euler_totient_function(i))
C#
Javascript
Output
Euler_totient_function(1): 1
Euler_totient_function(2): 1
Euler_totient_function(3): 2
Euler_totient_function(4): 2
Euler_totient_function(5): 4
Euler_totient_function(6): 2
Euler_totient_function(7): 6
Euler_totient_function(8): 4
Euler_totient_function(9): 6
Euler_totient_function(10): 4
Euler_totient_function(11): 10
Euler_totient_function(12): 4
Time Complexity: O(sqrt(n)*log(n))

Auxiliary Space: O(1)

This article is contributed by Ekta Goel. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above
 

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
25
Previous
Optimized Euler Totient Function for Multiple Evaluations
Next
Primitive root of a prime number n modulo n
Related Articles
1.
Generate an array having sum of Euler Totient Function of all elements equal to N
2.
Count of elements having Euler's Totient value one less than itself
3.
Print all Jumping Numbers smaller than or equal to a given value
4.
Minimum numbers (smaller than or equal to N) with sum S
5.
Optimized Euler Totient Function for Multiple Evaluations
6.
Probability of Euler's Totient Function in a range [L, R] to be divisible by M
7.
Check if Euler Totient Function is same for a given number and twice of that number
8.
Euler's Totient Function
9.
Check if a triplet of buildings can be selected such that the third building is taller than the first building and smaller than the second building
10.
An interesting solution to get all prime numbers smaller than n
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
Sam007
jit_t
mukulbaid63
decode2207
hungrywolf
subham348
rishavmahato348
praveeny182
arorakashish0911
amankr0211
Article Tags :
euler-totient
Modular Arithmetic
number-theory
sieve
Mathematical
Practice Tags :
Mathematical
Modular Arithmetic
modula