Segmented Sieve

Difficulty Level : Hard
Last Updated : 15 Jan, 2023
Read
Discuss(50+)
Courses
Practice
Video
Given a number n, print all primes smaller than n. For example, if the given number is 10, output 2, 3, 5, 7.

Recommended Problem
Product of Primes
Prime Number
sieve
Solve Problem
Submission count: 22.1K
A Naive approach is to run a loop from 0 to n-1 and check each number for primeness. A Better Approach is to use Simple Sieve of Eratosthenes.

C
C++
Java
Python3
# This functions finds all primes smaller than 'limit'
# using simple sieve of eratosthenes.
def simpleSieve(limit):
 
    # Create a boolean array "mark[0..limit-1]" and
    # initialize all entries of it as true. A value
    # in mark[p] will finally be false if 'p' is Not
    # a prime, else true.
    mark = [True for i in range(limit)]
 
    # One by one traverse all numbers so that their
    # multiples can be marked as composite.
    for p in range(p * p, limit - 1, 1):
 
        # If p is not changed, then it is a prime
        if (mark[p] == True):
 
            # Update all multiples of p
            for i in range(p * p, limit - 1, p):
                mark[i] = False
 
    # Print all prime numbers and store them in prime
    for p in range(2, limit - 1, 1):
        if (mark[p] == True):
            print(p, end=" ")
 
# This code is contributed by Dharanendra L V.
C#
Javascript
Problems with Simple Sieve:
The Sieve of Eratosthenes looks good, but consider the situation when n is large, the Simple Sieve faces the following issues.

An array of size Θ(n) may not fit in memory
The simple Sieve is not cached friendly even for slightly bigger n. The algorithm traverses the array without locality of reference
Segmented Sieve
The idea of a segmented sieve is to divide the range [0..n-1] in different segments and compute primes in all segments one by one. This algorithm first uses Simple Sieve to find primes smaller than or equal to √(n). Below are steps used in Segmented Sieve.


Use Simple Sieve to find all primes up to the square root of ‘n’ and store these primes in an array “prime[]”. Store the found primes in an array ‘prime[]’.
We need all primes in the range [0..n-1]. We divide this range into different segments such that the size of every segment is at-most √n
Do following for every segment [low..high] 
Create an array mark[high-low+1]. Here we need only O(x) space where x is a number of elements in a given range.
Iterate through all primes found in step 1. For every prime, mark its multiples in the given range [low..high].
In Simple Sieve, we needed O(n) space which may not be feasible for large n. Here we need O(√n) space and we process smaller ranges at a time (locality of reference)

Below is the implementation of the above idea.

C++
Java
Python3
# Python3 program to print all primes
# smaller than n, using segmented sieve
import math
prime = []
 
# This method finds all primes
# smaller than 'limit' using
# simple sieve of eratosthenes.
# It also stores found primes in list prime
def simpleSieve(limit):
     
    # Create a boolean list "mark[0..n-1]" and 
    # initialize all entries of it as True.
    # A value in mark[p] will finally be False
    # if 'p' is Not a prime, else True.
    mark = [True for i in range(limit + 1)]
    p = 2
    while (p * p <= limit):
         
        # If p is not changed, then it is a prime
        if (mark[p] == True):
             
            # Update all multiples of p
            for i in range(p * p, limit + 1, p):
                mark[i] = False 
        p += 1
         
    # Print all prime numbers
    # and store them in prime
    for p in range(2, limit):
        if mark[p]:
            prime.append(p)
            print(p,end = " ")
             
# Prints all prime numbers smaller than 'n'
def segmentedSieve(n):
     
    # Compute all primes smaller than or equal
    # to square root of n using simple sieve
    limit = int(math.floor(math.sqrt(n)) + 1)
    simpleSieve(limit)
     
    # Divide the range [0..n-1] in different segments
    # We have chosen segment size as sqrt(n).
    low = limit
    high = limit * 2
     
    # While all segments of range [0..n-1] are not processed,
    # process one segment at a time
    while low < n:
        if high >= n:
            high = n
             
        # To mark primes in current range. A value in mark[i]
        # will finally be False if 'i-low' is Not a prime,
        # else True.
        mark = [True for i in range(limit + 1)]
         
        # Use the found primes by simpleSieve()
        # to find primes in current range
        for i in range(len(prime)):
             
            # Find the minimum number in [low..high]
            # that is a multiple of prime[i]
            # (divisible by prime[i])
            # For example, if low is 31 and prime[i] is 3,
            # we start with 33.
            loLim = int(math.floor(low / prime[i]) *
                                         prime[i])
            if loLim < low:
                loLim += prime[i]
                 
            # Mark multiples of prime[i] in [low..high]:
            # We are marking j - low for j, i.e. each number
            # in range [low, high] is mapped to [0, high-low]
            # so if range is [50, 100] marking 50 corresponds
            # to marking 0, marking 51 corresponds to 1 and
            # so on. In this way we need to allocate space
            # only for range
            for j in range(loLim, high, prime[i]):
                mark[j - low] = False
                 
        # Numbers which are not marked as False are prime
        for i in range(low, high):
            if mark[i - low]:
                print(i, end = " ")
                 
        # Update low and high for next segment
        low = low + limit
        high = high + limit
 
# Driver Code
n = 100
print("Primes smaller than", n, ":")
segmentedSieve(100)
 
# This code is contributed by bhavyadeep
C#
Javascript
Output


Primes smaller than 100:
2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 
Time Complexity : O(sqrt(n))

Auxiliary Space: O(1)

Note that time complexity (or a number of operations) by Segmented Sieve is the same as Simple Sieve. It has advantages for large ‘n’ as it has better locality of reference thus allowing better caching by the CPU and also requires less memory space.
This article is contributed by Utkarsh Trivedi. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above 





Like
134
Previous
Sieve of Eratosthenes
Next
Sieve of Atkin
Related Articles
1.
Longest sub-array of Prime Numbers using Segmented Sieve
2.
Segmented Sieve (Print Primes in a Range)
3.
Sieve of Atkin
4.
Sieve of Eratosthenes in 0(n) time complexity
5.
Bitwise Sieve
6.
Number of unmarked integers in a special sieve
7.
Sum of all Primes in a given range using Sieve of Eratosthenes
8.
Prime Factorization using Sieve O(log n) for multiple queries
9.
Sieve of Sundaram to print all primes smaller than n
10.
Sieve of Eratosthenes
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
Mithun Kumar
BhavyadeepPurswani
aerosayan
kumarayush151
rutvik_56
pratham76
dharanendralv23
scisaif
todaysgaurav
sweetyty
sanjoy_62
rishavnitro
gautamgoel962
sumitgumber28
_invincible
Article Tags :
Prime Number
sieve
Mathematical
Practice Tags :
Mathematical
Prime Number
sieve
Sieve