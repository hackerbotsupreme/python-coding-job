Smith Number

Difficulty Level : Hard
Last Updated : 23 Jun, 2022
Read
Discuss
Courses
Practice
Video
Given a number n, the task is to find out whether this number is smith or not. A Smith Number is a composite number whose sum of digits is equal to the sum of digits in its prime factorization. Examples:

Input  : n = 4
Output : Yes
Prime factorization = 2, 2  and 2 + 2 = 4
Therefore, 4 is a smith number

Input  : n = 6
Output : No
Prime factorization = 2, 3  and 2 + 3 is
not 6. Therefore, 6 is not a smith number

Input   : n = 666
Output  : Yes
Prime factorization = 2, 3, 3, 37 and
2 + 3 + 3 + (3 + 7) = 6 + 6 + 6 = 18
Therefore, 666 is a smith number

Input   : n = 13
Output  : No
Prime factorization = 13 and 13 = 13,
But 13 is not a smith number as it is not
a composite number
Recommended: Please solve it on “PRACTICE ” first, before moving on to the solution.
The idea is first find all prime numbers below a limit using Sieve of Sundaram (This is especially useful when we want to check multiple numbers for Smith). Now for every input to be checked for Smith, we go through all prime factors of it and find sum of digits of every prime factor. We also find sum of digits in given number. Finally we compare two sums. If they are same, we return true. 

C++
Java
Python
# Python program to check whether a number is
# Smith Number or not.
 
import math
 
MAX  = 10000
 
# array to store all prime less than and equal to 10^6
primes = []
 
# utility function for sieve of sundaram
def sieveSundaram ():
    #In general Sieve of Sundaram, produces primes smaller
    # than (2*x + 2) for a number given number x. Since
    # we want primes smaller than MAX, we reduce MAX to half
    # This array is used to separate numbers of the form
    # i+j+2ij from others where 1 <= i <= j
    marked  = [0] * ((MAX/2)+100)
    # Main logic of Sundaram. Mark all numbers which
    # do not generate prime number by doing 2*i+1
    i = 1
    while i <= ((math.sqrt (MAX)-1)/2) :
        j = (i* (i+1)) << 1
        while j <= MAX/2 :
            marked[j] = 1
            j = j+ 2 * i + 1
        i = i + 1
    # Since 2 is a prime number
    primes.append (2)
     
    # Print other primes. Remaining primes are of the
    # form 2*i + 1 such that marked[i] is false.
    i=1
    while i <= MAX /2 :
        if marked[i] == 0 :
            primes.append( 2* i + 1)
        i=i+1
 
#Returns true if n is a Smith number, else false.
def isSmith( n) :
    original_no = n
     
    #Find sum the digits of prime factors of n
    pDigitSum = 0;
    i=0
    while (primes[i] <= n/2 ) :
         
        while n % primes[i] == 0 :
            #If primes[i] is a prime factor ,
            # add its digits to pDigitSum.
            p = primes[i]
            n = n/p
            while p > 0 :
                pDigitSum += (p % 10)
                p = p/10
        i=i+1
    # If n!=1 then one prime factor still to be
    # summed up
    if not n == 1 and not n == original_no :
        while n > 0 :
            pDigitSum = pDigitSum + n%10
            n=n/10
       
    # All prime factors digits summed up
    # Now sum the original number digits
    sumDigits = 0
    while original_no > 0 :
        sumDigits = sumDigits + original_no % 10
        original_no = original_no/10
         
    #If sum of digits in prime factors and sum
    # of digits in original number are same, then
    # return true. Else return false.
    return pDigitSum == sumDigits
#-----end of function isSmith------
 
#Driver method
# Finding all prime numbers before limit. These
# numbers are used to find prime factors.
sieveSundaram();
print "Printing first few Smith Numbers using isSmith()"
i = 1
while i<500 :
    if isSmith(i) :
        print i,
    i=i+1
     
#This code is contributed by Nikita Tiwari
C#
PHP
Javascript
Output:

Printing first few Smith Numbers using isSmith()
4 22 27 58 85 94 121 166 202 265 274 319 346 355 378 382 391 438 454 483 
Time Complexity: O(n log n) 
Auxiliary Space: O(n)



This article is contributed by Aarti_Rathi and Sahil Chhabra(KILLER). If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.



Like
Previous
Kaprekar Number
Next
Harshad (Or Niven) Number
Related Articles
1.
Find the count of Smith Brothers Pairs in a given Array
2.
Check Whether a Number is an Anti Prime Number(Highly Composite Number)
3.
Number of factors of very large number N modulo M where M is any prime number
4.
Permutation of a number whose sum with the original number is equal to another given number
5.
Minimum number of moves to make M and N equal by repeatedly adding any divisor of number to itself except 1 and the number
6.
Find minimum number to be divided to make a number a perfect square
7.
How to check if a given number is Fibonacci number?
8.
Find the smallest number whose digits multiply to a given number n
9.
Find n'th number in a number system with only 3 and 4
10.
Build Lowest Number by Removing n digits from a given number
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
SushilKumar4
Mithun Kumar
Akanksha_Rai
surinderdawra388
gautamgoel962
codewithshinchan
Article Tags :
series
sieve
Mathematical
Practice Tags :
Mathematical
series
sieve
Sieve
Report Issue