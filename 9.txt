m Coloring Problem

Difficulty Level : Hard
Last Updated : 12 Jan, 2023
Read
Discuss(50)
Courses
Practice
Video
Given an undirected graph and a number m, determine if the graph can be colored with at most m colors such that no two adjacent vertices of the graph are colored with the same color

Note: Here coloring of a graph means the assignment of colors to all vertices

Following is an example of a graph that can be colored with 3 different colors:
 

example of a graph that can be coloured with 3 different colours


Examples: 

Input:  graph = {0, 1, 1, 1},
                         {1, 0, 1, 0},
                         {1, 1, 0, 1},
                         {1, 0, 1, 0}
Output: Solution Exists: Following are the assigned colors: 1  2  3  2
Explanation: By coloring the vertices 
                      with following colors, adjacent 
                      vertices does not have same colors

Input: graph = {1, 1, 1, 1},
                         {1, 1, 1, 1},
                         {1, 1, 1, 1},
                         {1, 1, 1, 1}



Output: Solution does not exist
Explanation: No solution exits 

We strongly recommend that you click here and practice it, before moving on to the solution.
Naive Approach: To solve the problem follow the below idea:

Generate all possible configurations of colors. Since each node can be colored using any of the m available colors, the total number of color configurations possible is mV. After generating a configuration of color, check if the adjacent vertices have the same color or not. If the conditions are met, print the combination and break the loop

Follow the given steps to solve the problem:

Create a recursive function that takes the current index, number of vertices and output color array
If the current index is equal to number of vertices. Check if the output color configuration is safe, i.e check if the adjacent vertices do not have same color. If the conditions are met, print the configuration and break
Assign a color to a vertex (1 to m)
For every assigned color recursively call the function with next index and number of vertices
If any recursive function returns true break the loop and returns true.
Below is the implementation of the above approach:

C++
C
Java
Python3
# Python3 program for the above approach
  
# Number of vertices in the graph
# define 4 4
  
# check if the colored
# graph is safe or not
  
  
def isSafe(graph, color):
  
    # check for every edge
    for i in range(4):
        for j in range(i + 1, 4):
            if (graph[i][j] and color[j] == color[i]):
                return False
    return True
  
# /* This function solves the m Coloring
# problem using recursion. It returns
# false if the m colours cannot be assigned,
# otherwise, return true and prints
# assignments of colours to all vertices.
# Please note that there may be more than
# one solutions, this function prints one
# of the feasible solutions.*/
  
  
def graphColoring(graph, m, i, color):
  
    # if current index reached end
    if (i == 4):
  
        # if coloring is safe
        if (isSafe(graph, color)):
  
            # Print the solution
            printSolution(color)
            return True
        return False
  
    # Assign each color from 1 to m
    for j in range(1, m + 1):
        color[i] = j
  
        # Recur of the rest vertices
        if (graphColoring(graph, m, i + 1, color)):
            return True
        color[i] = 0
    return False
  
# /* A utility function to print solution */
  
  
def printSolution(color):
    print("Solution Exists:" " Following are the assigned colors ")
    for i in range(4):
        print(color[i], end=" ")
  
  
# Driver code
if __name__ == '__main__':
  
    # /* Create following graph and
    # test whether it is 3 colorable
    # (3)---(2)
    # | / |
    # | / |
    # | / |
    # (0)---(1)
    # */
    graph = [
        [0, 1, 1, 1],
        [1, 0, 1, 0],
        [1, 1, 0, 1],
        [1, 0, 1, 0],
    ]
    m = 3  # Number of colors
  
    # Initialize all color values as 0.
    # This initialization is needed
    # correct functioning of isSafe()
    color = [0 for i in range(4)]
  
    # Function call
    if (not graphColoring(graph, m, 0, color)):
        print("Solution does not exist")
  
# This code is contributed by mohit kumar 29
C#
Javascript
Output
Solution Exists: Following are the assigned colors 
  1  2  3  2
Time Complexity: O(mV). There is a total O(mV) combination of colors
Auxiliary Space: O(V). Recursive Stack of graph coloring(â€¦) function will require O(V) space.

m Coloring Problem using Backtracking:
To solve the problem follow the below idea:

The idea is to assign colors one by one to different vertices, starting from vertex 0. Before assigning a color, check for safety by considering already assigned colors to the adjacent vertices i.e check if the adjacent vertices have the same color or not. If there is any color assignment that does not violate the conditions, mark the color assignment as part of the solution. If no assignment of color is possible then backtrack and return false

Follow the given steps to solve the problem:

Create a recursive function that takes the graph, current index, number of vertices, and output color array.
If the current index is equal to the number of vertices. Print the color configuration in the output array.
Assign a color to a vertex (1 to m).
For every assigned color, check if the configuration is safe, (i.e. check if the adjacent vertices do not have the same color) recursively call the function with the next index and number of vertices
If any recursive function returns true break the loop and return true
If no recursive function returns true then return false
Below is the implementation of the above approach:

C++
C
Java
Python3
# Python3 program for solution of M Coloring
# problem using backtracking
  
  
class Graph():
  
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)]
                      for row in range(vertices)]
  
    # A utility function to check
    # if the current color assignment
    # is safe for vertex v
    def isSafe(self, v, colour, c):
        for i in range(self.V):
            if self.graph[v][i] == 1 and colour[i] == c:
                return False
        return True
  
    # A recursive utility function to solve m
    # coloring  problem
    def graphColourUtil(self, m, colour, v):
        if v == self.V:
            return True
  
        for c in range(1, m + 1):
            if self.isSafe(v, colour, c) == True:
                colour[v] = c
                if self.graphColourUtil(m, colour, v + 1) == True:
                    return True
                colour[v] = 0
  
    def graphColouring(self, m):
        colour = [0] * self.V
        if self.graphColourUtil(m, colour, 0) == None:
            return False
  
        # Print the solution
        print("Solution exist and Following are the assigned colours:")
        for c in colour:
            print(c, end=' ')
        return True
  
  
# Driver Code
if __name__ == '__main__':
    g = Graph(4)
    g.graph = [[0, 1, 1, 1], [1, 0, 1, 0], [1, 1, 0, 1], [1, 0, 1, 0]]
    m = 3
  
    # Function call
    g.graphColouring(m)
  
# This code is contributed by Divyanshu Mehta
C#
Javascript
Output
Solution Exists: Following are the assigned colors 
 1  2  3  2 
Time Complexity: O(mV). There is a total of O(mV) combinations of colors. The upper bound time complexity remains the same but the average time taken will be less.
Auxiliary Space: O(V). The recursive Stack of the graph coloring function will require O(V) space.

m Coloring Problem using BFS:
To solve the problem follow the below idea:

The approach here is to color each node from 1 to n initially by color 1. And start traveling BFS from an unvisited starting node to cover all connected components in one go. On reaching each node during BFS traversal, do the following:

Follow the given steps to solve the problem:

Check all edges of the given node
For each vertex connected to our node via an edge:
check if the color of the nodes is the same. If the same, increase the color of the other node (not the current) by one
to check if it is visited or unvisited. If not visited, mark it as visited and push it into a queue
Check condition for maxColors till now. If it exceeds M, return false
After visiting all nodes, return true (As no violating condition could be found while traveling)
Below is the implementation of the above approach:

C++
Java
Python3
# Python3 program for the above approach
  
from queue import Queue
  
  
class node:
  
    color = 1
    edges = set()
  
  
def canPaint(nodes, n, m):
  
    # Create a visited array of n
    # nodes, initialized to zero
    visited = [0 for _ in range(n+1)]
  
    # maxColors used till now are 1 as
    # all nodes are painted color 1
    maxColors = 1
  
    # Do a full BFS traversal from
    # all unvisited starting points
    for _ in range(1, n + 1):
        if visited[_]:
            continue
  
        # If the starting point is unvisited,
        # mark it visited and push it in queue
        visited[_] = 1
        q = Queue()
        q.put(_)
  
        # BFS Travel starts here
        while not q.empty():
            top = q.get()
  
            # Checking all adjacent nodes
            # to "top" edge in our queue
            for _ in nodes[top].edges:
  
                # IMPORTANT: If the color of the
                # adjacent node is same, increase it by 1
  
                if nodes[top].color == nodes[_].color:
                    nodes[_].color += 1
  
                # If number of colors used shoots m,
                # return 0
                maxColors = max(maxColors, max(
                    nodes[top].color, nodes[_].color))
  
                if maxColors > m:
                    print(maxColors)
                    return 0
  
                # If the adjacent node is not visited,
                # mark it visited and push it in queue
                if not visited[_]:
                    visited[_] = 1
                    q.put(_)
  
    return 1
  
  
# Driver code
if __name__ == "__main__":
  
    n = 4
    graph = [[0, 1, 1, 1],
             [1, 0, 1, 0],
             [1, 1, 0, 1],
             [1, 0, 1, 0]]
  
    # Number of colors
    m = 3
  
    # Create a vector of n+1
    # nodes of type "node"
    # The zeroth position is just
    # dummy (1 to n to be used)
    nodes = []
    for _ in range(n+1):
        nodes.append(node())
  
    # Add edges to each node as
    # per given input
    for _ in range(n):
        for __ in range(n):
            if graph[_][__]:
  
                # Connect the undirected graph
                nodes[_].edges.add(_)
                nodes[__].edges.add(__)
  
    # Function call
    print(canPaint(nodes, n, m))
  
# This code is contributed by harshitkap00r
C#
Javascript
Output
1
Time Complexity: O(V + E)
Auxiliary Space: O(V). For Storing Visited List

Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above.

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
103
Previous
Subset Sum problem
Next
Hamiltonian Cycle
Related Articles
1.
Graph Coloring | Set 1 (Introduction and Applications)
2.
Graph Coloring | Set 2 (Greedy Algorithm)
3.
Coloring a Cycle Graph
4.
Mathematics | Planar Graphs and Graph Coloring
5.
Edge Coloring of a Graph
6.
3-coloring is NP Complete
7.
Java Program to Find Independent Sets in a Graph using Graph Coloring
8.
Java Program to Find Independent Sets in a Graph By Graph Coloring
9.
Java Program to Use Color Interchange Method to Perform Vertex Coloring of Graph
10.
DSatur Algorithm for Graph Coloring
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
SarathChandra1
aakashr79
KasraK
reciever
princiraj1992
sharanlobana
andrew1234
arishabh1998
shivanisinghss2110
mohit kumar 29
pratikraut0000
divyeshrabadiya07
divyesh072019
rutvik_56
avanitrachhadiya2155
unknown2108
harshitkap00r
ab2127
rrrtnx
abhishekpatel946
surindertarika1234
amartyaghoshgfg
simmytarika5
parvesh
janardansthox
Article Tags :
Graph Coloring
Samsung
Backtracking
Graph
Practice Tags :
Samsung
Backtracking
Graph
Improve Article
Report Issue