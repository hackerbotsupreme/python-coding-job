Foldable Binary Trees

Difficulty Level : Medium
Last Updated : 13 Jan, 2023
Read
Discuss(100+)
Courses
Practice
Video
Given a binary tree, find out if the tree can be folded or not. A tree can be folded if the left and right subtrees of the tree are structure-wise mirror images of each other. An empty tree is considered foldable. 

Examples:

Input:
       10
     /     \
   7      15
     \     /
    9  11
Output: Can be folded      

Input: 
        10
       /  \
     7   15
   /    /
5   11
Output: Cannot be folded    

Recommended Problem
Foldable Binary Tree
Tree
Data Structures
Expedia
Solve Problem
Submission count: 35.3K
Foldable Binary Trees by Changing Left Subtree to its Mirror:
The idea is to change the left subtree to its mirror then check that left subtree with its right subtree.

Follow the steps below to solve the problem:

If tree is empty, then return true.
Convert the left subtree to its mirror image
Check if the structure of left subtree and right subtree is same and store the result.
res = isStructSame(root->left, root->right). isStructSame() recursively compares structures of two subtrees and returns true if structures are same
Revert the changes made in step (2) to get the original tree.
Return result res stored in step 3.
Below is the implementation of the above approach.



C++
C
Java
Python3
# Python3 program to check foldable binary tree
 
#  A binary tree node has data,
# pointer to left child and a
# pointer to right child
 
 
class newNode:
    def __init__(self, d):
        self.data = d
        self.left = None
        self.right = None
 
# Returns true if the given
# tree is foldable
 
 
def isFoldable(node):
 
    # base case
    if node == None:
        return true
 
    # convert left subtree to its mirror
    mirror(node.left)
 
    # Compare the structures of the right subtree and mirrored
    # left subtree
    res = isStructSame(node.left, node.right)
 
    # Get the original tree back
    mirror(node.left)
 
    return res
 
 
def isStructSame(a, b):
 
    if a == None and b == None:
        return True
    if a != None and b != None and isStructSame(a.left, b.left) and isStructSame(a.right, b.right):
        return True
 
    return False
 
 
def mirror(node):
 
    if node == None:
        return
    else:
 
        # do the subtrees
        mirror(node.left)
        mirror(node.right)
 
        # swap the pointers in this node
        temp = node.left
        node.left = node.right
        node.right = temp
 
 
# Driver Code
if __name__ == '__main__':
 
    '''
    The constructed binary tree is
             1
           /   \
          2     3
           \    /
            4  5
    '''
    root = newNode(1)
    root.left = newNode(2)
    root.right = newNode(3)
    root.right.left = newNode(4)
    root.left.right = newNode(5)
 
    if isFoldable(root):
        print("tree is foldable")
    else:
        print("Tree is not foldable")
C#
Javascript
Output
tree is foldable
Time complexity: O(N), Visiting all the nodes of the tree of size N.
Auxiliary Space: O(N), If stack space is considered else O(1)

Thanks to ajaym for suggesting this approach. 

Foldable Binary Trees by Checking if Left and Right subtrees are Mirror:
The idea is to check the left and right subtree whether they are mirror or not.

Follow the steps below to solve the problem:

If tree is empty then return true.
Else check if left and right subtrees are structure wise mirrors of each other. Use utility function IsFoldableUtil(root->left, root->right) for this.
Checks if n1 and n2 are mirror of each other.
If both trees are empty then return true. 
If one of them is empty and other is not then return false. 
Return true if following conditions are met
n1->left is mirror of n2->right
n1->right is mirror of n2->left
Below is the implementation of the above approach.

C++
C
Java
Python3
# Python3 program to check
# foldable binary tree
 
# Utility function to create a new
# tree node
 
 
class newNode:
    def __init__(self, data):
        self.data = data
        self.left = self.right = None
 
# Returns true if the given tree can be folded
 
 
def IsFoldable(root):
    if (root == None):
        return True
    return IsFoldableUtil(root.left, root.right)
 
 
# A utility function that checks
# if trees with roots as n1 and n2
# are mirror of each other
def IsFoldableUtil(n1, n2):
    # If both left and right subtrees are NULL,
    # then return true
    if n1 == None and n2 == None:
        return True
 
    # If one of the trees is NULL and other is not,
    # then return false
    if n1 == None or n2 == None:
        return False
 
    # Otherwise check if left and
    # right subtrees are mirrors of
    # their counterparts
 
    d1 = IsFoldableUtil(n1.left, n2.right)
    d2 = IsFoldableUtil(n1.right, n2.left)
    return d1 and d2
 
 
# Driver code
if __name__ == "__main__":
 
    """ The constructed binary tree is 
    1 
    / \ 
    2 3 
    \ / 
    4 5 
"""
    root = newNode(1)
    root.left = newNode(2)
    root.right = newNode(3)
    root.left.right = newNode(4)
    root.right.left = newNode(5)
 
    if IsFoldable(root):
        print("tree is foldable")
    else:
        print("tree is not foldable")
 
# This code is contributed by
# Anupam Baranwal(anupambaranwal)
C#
Javascript
Output
tree is foldable
Time Complexity: O(N), Visiting every node of the tree of size N.
Auxiliary Space: O(N), If stack space is considered 

Foldable Binary Trees using Breadth first Search:
The idea is to use Queue for traversing the tree and using the BFS approach. 

Follow the steps below to solve the problem:

The left child of the left subtree = the right child of the right subtree. Both of them should be not null.
The right child of the left subtree = left child of the right subtree. Both of them should be null or not null.
 
Below is the implementation of the above approach:

C++
Java
Python3
# class to create a node with key, left child and right child.
class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
 
 
# Function to find whether the tree is foldable
def isFoldable(root):
 
     # Queue to store visited nodes
    q = []
 
    # Initially add the left and right nodes of root
    if root != None:
        q.append(root.left)
        q.append(root.right)
 
    while (len(q) != 0):
 
        # Remove the front 2 nodes to
        # check for None condition
        p = q.pop(0)
        r = q.pop(0)
 
        # If both are None, continue and check
        # the further elements
        if (p == None and r == None):
            continue
 
        # If one of them is not None, then return False
        if ((p == None and r != None) or (p != None and r == None)):
            return False
 
        ''' Insert in the same order:
            1. left of left subtree
            2. right of right subtree
            3. right of left subtree
            4. left of right subtree 
        '''
        q.append(p.left)
        q.append(r.right)
        q.append(p.right)
        q.append(r.left)
 
    # Only if the tree is foldable
    return True
 
 
# Driver code
# Insert data into the tree
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.right.left = Node(4)
root.left.right = Node(5)
 
# Function call
if isFoldable(root):
    print("tree is foldable")
else:
    print("tree is not foldable")
 
    # This code is contributed by mariuscristiancapatina
C#
Javascript
Output
tree is foldable
Time complexity: O(N), Visiting all the nodes of the tree of size N.
Auxiliary Space: O(N), Using queue for storing nodes

Please write comments if you find the above code/algorithm incorrect, or find other ways to solve the same problem.





Like
59
Previous
Binary Tree (Array implementation)
Next
Check whether a binary tree is a full binary tree or not
Related Articles
1.
Generic Trees(N-ary Trees)
2.
Construct a Maximum Binary Tree from two given Binary Trees
3.
Count the Number of Binary Search Trees present in a Binary Tree
4.
Find all possible binary trees with given Inorder Traversal
5.
Number of full binary trees such that each node is product of its children
6.
Find first non matching leaves in two binary trees
7.
Enumeration of Binary Trees
8.
Count Balanced Binary Trees of Height h
9.
Merge Two Binary Trees by doing Node Sum (Recursive and Iterative)
10.
Number of Binary Trees for given Preorder Sequence length
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
andrew1234
rathbhupendra
princiraj1992
anupambaranwal
avllikhita
avanitrachhadiya2155
rameshtravel07
rag2127
patel2127
sagartomar9927
simranarora5sos
jana_sayantan
devmittal0407
mariuscristiancapatina
hardikkoriintern
ishank0106
adityamaharshi21
raj2002
Article Tags :
Expedia
Tree
Practice Tags :
Expedia
Tree