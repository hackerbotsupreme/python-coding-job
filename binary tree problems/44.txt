Construct Complete Binary Tree from its Linked List Representation

Difficulty Level : Medium
Last Updated : 01 Aug, 2022
Read
Discuss(80+)
Courses
Practice
Video
Given Linked List Representation of Complete Binary Tree, construct the Binary tree. A complete binary tree can be represented in an array in the following approach.
If the root node is stored at index i, its left, and right children are stored at indices 2*i+1, and 2*i+2 respectively. 
Suppose a tree is represented by a linked list in the same way, how do we convert this into a normally linked representation of a binary tree where every node has data, left and right pointers? In the linked list representation, we cannot directly access the children of the current node unless we traverse the list.
 

LinkedListToBST

 

Recommended Problem
Make Binary Tree From Linked List
Queue
Tree
+1 more
Amazon
Solve Problem
Submission count: 27.8K
We are mainly given level order traversal in sequential access form. We know head of linked list is always is root of the tree. We take the first node as root and we also know that the next two nodes are left and right children of root. So we know partial Binary Tree. The idea is to do Level order traversal of the partially built Binary Tree using queue and traverse the linked list at the same time. At every step, we take the parent node from queue, make next two nodes of linked list as children of the parent node, and enqueue the next two nodes to queue.
1. Create an empty queue. 
2. Make the first node of the list as root, and enqueue it to the queue. 
3. Until we reach the end of the list, do the following. 
………a. Dequeue one node from the queue. This is the current parent. 
………b. Traverse two nodes in the list, add them as children of the current parent. 
………c. Enqueue the two nodes into the queue.

Below is the implementation of the above approach:

C++
Java
Python3
# Python program to create a Complete Binary Tree from
# its linked list representation
 
# Linked List node
class ListNode:
 
        # Constructor to create a new node
        def __init__(self, data):
            self.data = data
            self.next = None
 
# Binary Tree Node structure
class BinaryTreeNode:
 
    # Constructor to create a new node
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 
# Class to convert the linked list to Binary Tree
class Conversion:
 
    # Constructor for storing head of linked list
    # and root for the Binary Tree
    def __init__(self, data = None):
        self.head = None
        self.root = None
 
    def push(self, new_data):
 
        # Creating a new linked list node and storing data
        new_node = ListNode(new_data)
 
        # Make next of new node as head
        new_node.next = self.head
 
        # Move the head to point to new node
        self.head = new_node
 
    def convertList2Binary(self):
 
        # Queue to store the parent nodes
        q = []
 
        # Base Case
        if self.head is None:
            self.root = None
            return
 
        # 1.) The first node is always the root node,
        # and add it to the queue
        self.root = BinaryTreeNode(self.head.data)
        q.append(self.root)
 
        # Advance the pointer to the next node
        self.head = self.head.next
 
        # Until the end of linked list is reached, do:
        while(self.head):
 
            # 2.a) Take the parent node from the q and
            # and remove it from q
            parent = q.pop(0) # Front of queue
 
            # 2.c) Take next two nodes from the linked list.
            # We will add them as children of the current
            # parent node in step 2.b.
            # Push them into the queue so that they will be
            # parent to the future node
            leftChild= None
            rightChild = None
 
            leftChild = BinaryTreeNode(self.head.data)
            q.append(leftChild)
            self.head = self.head.next
            if(self.head):
                rightChild = BinaryTreeNode(self.head.data)
                q.append(rightChild)
                self.head = self.head.next
 
            #2.b) Assign the left and right children of parent
            parent.left = leftChild
            parent.right = rightChild
 
    def inorderTraversal(self, root):
        if(root):
            self.inorderTraversal(root.left)
            print (root.data,end=" ")
            self.inorderTraversal(root.right)
 
# Driver Program to test above function
 
# Object of conversion class
conv = Conversion()
conv.push(36)
conv.push(30)
conv.push(25)
conv.push(15)
conv.push(12)
conv.push(10)
 
conv.convertList2Binary()
 
print ("Inorder Traversal of the constructed Binary Tree is:")
conv.inorderTraversal(conv.root)
 
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)
C#
Javascript
Output
Inorder Traversal of the constructed Binary Tree is: 
25 12 30 10 36 15 
Time Complexity: O(n), where n is the number of nodes.
Auxiliary Space: O(b), Here b is the maximum number of nodes at any level.
 
This article is compiled by Ravi Chandra Enaganti. Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above.







Like
58
Previous
Construct a tree from Inorder and Level order traversals | Set 1
Next
Construct a complete binary tree from given array in level order fashion
Related Articles
1.
Construct Full Binary Tree using its Preorder traversal and Preorder traversal of its mirror tree
2.
Construct Binary Tree from String with bracket representation
3.
Construct Binary Tree from given Parent Array representation | Iterative Approach
4.
Construct a Binary Tree from String with bracket representation | Set 2
5.
Construct Binary Tree from given Parent Array representation
6.
Linked complete binary tree & its creation
7.
Construct a complete binary tree from given array in level order fashion
8.
Construct XOR tree by Given leaf nodes of Perfect Binary Tree
9.
Construct a Complete N-ary Tree from given Postorder Traversal
10.
Construct a Maximum Binary Tree from two given Binary Trees
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
princiraj1992
rdtank
mishra695047
amartyaghoshgfg
simmytarika5
romioranjan
aakash_rana
abhijeet19403
Article Tags :
Amazon
Queue
Tree
Practice Tags :
Amazon
Queue
Tree
Improve Article
Report Issue