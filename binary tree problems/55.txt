Lowest Common Ancestor in a Binary Tree

Difficulty Level : Medium
Last Updated : 20 Oct, 2022
Read
Discuss(310+)
Courses
Practice
Video
What is Lowest Common Ancestor in Binary Tree?
The lowest common ancestor is the lowest node in the tree that has both n1 and n2 as descendants, where n1 and n2 are the nodes for which we wish to find the LCA. Hence, the LCA of a binary tree with nodes n1 and n2 is the shared ancestor of n1 and n2 that is located farthest from the root. 

Application of Lowest Common Ancestor(LCA):
To determine the distance between pairs of nodes in a tree: the distance from n1 to n2 can be computed as the distance from the root to n1, plus the distance from the root to n2, minus twice the distance from the root to their lowest common ancestor.
 


Lowest Common Ancestor in Binary Tree

Recommended Problem
Lowest Common Ancestor in a Binary Tree
Tree
Data Structures
Flipkart
Accolite
+13 more
Solve Problem
Submission count: 1.3L

Lowest Common Ancestor in a Binary Tree By Storing paths from root to n1 and root to n2: 
The idea of this approach is to store the path from the root to n1 and root to n2 in two separate data structures. Then look simultaneously into the values stored in the data structure, and look for the first mismatch.

Illustration:



Find the LCA of 5 and 6

Path from root to 5 = { 1, 2, 5 }
Path from root to 6 = { 1, 3, 6 }

We start checking from 0 index. As both of the value matches( pathA[0] = pathB[0] ), we move to the next index.
pathA[1] not equals to pathB[1], there’s a mismatch so we consider the previous value. 
Therefore the LCA of (5,6) = 1
Follow the steps below to solve the problem:

Find a path from the root to n1 and store it in a vector or array. 
Find a path from the root to n2 and store it in another vector or array. 
Traverse both paths till the values in arrays are the same. Return the common element just before the mismatch. 
Following is the implementation of the above algorithm:



C++
Java
Python3
# Python Program for Lowest Common Ancestor in a Binary Tree
# O(n) solution to find LCS of two given values n1 and n2
 
# A binary tree node
class Node:
    # Constructor to create a new binary node
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
 
# Finds the path from root node to given root of the tree.
# Stores the path in a list path[], returns true if path
# exists otherwise false
def findPath(root, path, k):
 
    # Baes Case
    if root is None:
        return False
 
    # Store this node is path vector. The node will be
    # removed if not in path from root to k
    path.append(root.key)
 
    # See if the k is same as root's key
    if root.key == k:
        return True
 
    # Check if k is found in left or right sub-tree
    if ((root.left != None and findPath(root.left, path, k)) or
            (root.right != None and findPath(root.right, path, k))):
        return True
 
    # If not present in subtree rooted with root, remove
    # root from path and return False
 
    path.pop()
    return False
 
# Returns LCA if node n1 , n2 are present in the given
# binary tree otherwise return -1
def findLCA(root, n1, n2):
 
    # To store paths to n1 and n2 fromthe root
    path1 = []
    path2 = []
 
    # Find paths from root to n1 and root to n2.
    # If either n1 or n2 is not present , return -1
    if (not findPath(root, path1, n1) or not findPath(root, path2, n2)):
        return -1
 
    # Compare the paths to get the first different value
    i = 0
    while(i < len(path1) and i < len(path2)):
        if path1[i] != path2[i]:
            break
        i += 1
    return path1[i-1]
 
 
# Driver program to test above function
if __name__ == '__main__':
     
    # Let's create the Binary Tree shown in above diagram
    root = Node(1)
    root.left = Node(2)
    root.right = Node(3)
    root.left.left = Node(4)
    root.left.right = Node(5)
    root.right.left = Node(6)
    root.right.right = Node(7)
     
    print("LCA(4, 5) = %d" % (findLCA(root, 4, 5,)))
    print("LCA(4, 6) = %d" % (findLCA(root, 4, 6)))
    print("LCA(3, 4) = %d" % (findLCA(root, 3, 4)))
    print("LCA(2, 4) = %d" % (findLCA(root, 2, 4)))
 
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)
C#
Javascript
Output
LCA(4, 5) = 2
LCA(4, 6) = 1
LCA(3, 4) = 1
LCA(2, 4) = 2
Time Complexity: O(N). The tree is traversed twice, and then path arrays are compared. 
Auxiliary Space: O(N). Extra Space for path1 and path2.

Lowest Common Ancestor in a Binary Tree By Single Traversal:
The idea is to traverse the tree starting from the root. If any of the given keys (n1 and n2) matches with the root, then the root is LCA (assuming that both keys are present). If the root doesn’t match with any of the keys, we recur for the left and right subtree. 

The node which has one key present in its left subtree and the other key present in the right subtree is the LCA. 
If both keys lie in the left subtree, then the left subtree has LCA also, 
Otherwise, LCA lies in the right subtree.  
Illustration:


Find the LCA of 5 and 6

Root is pointing to the node with value 1, as its value doesn’t match with { 5, 6 }. We look for the key in left subtree and right subtree.

Left Subtree :
New Root = { 2 } ≠ 5 or 6, hence we will continue our recursion
New Root = { 4 } , it’s left and right subtree is null, we will return NULL for this call
New Root = { 5 } , value matches with 5 so will return the node with value 5
The function call for root with value 2 will return a value of 5
Right Subtree :
Root = { 3 } ≠ 5 or 6 hence we continue our recursion
Root = { 6 } = 5 or 6 , we will return the this node with value 6 
Root = { 7 } ≠ 5 or 6, we will return NULL
So the function call for root with value 3 will return node with value 6
As both the left subtree and right subtree of the node with value 1 is not NULL, so 1 is the LCA
Follow the steps below to solve the problem:

We pass the root to a helper function and check if the value of the root matches any of n1 and n2. 
If YES, return the root
else recursive call on the left and right subtree
Basically, we do pre-order traversal, at first we check if the root->value matches with n1 or n2. Then traverse on the left and right subtree.
If there is any root that returns one NULL and another NON-NULL value, we shall return the corresponding NON-NULL value for that node.
The node that returns both NON-NULL values for both the left and right subtree, is our Lowest Common Ancestor.
Below is the implementation of the above approach.

C++
C
Java
Python3
# Python program to find LCA of n1 and n2 using one
# traversal of Binary tree
 
# A binary tree node
 
 
class Node:
 
    # Constructor to create a new tree node
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
 
# This function returns pointer to LCA of two given
# values n1 and n2
# This function assumes that n1 and n2 are present in
# Binary Tree
 
 
def findLCA(root, n1, n2):
 
    # Base Case
    if root is None:
        return None
 
    # If either n1 or n2 matches with root's key, report
    #  the presence by returning root (Note that if a key is
    #  ancestor of other, then the ancestor key becomes LCA
    if root.key == n1 or root.key == n2:
        return root
 
    # Look for keys in left and right subtrees
    left_lca = findLCA(root.left, n1, n2)
    right_lca = findLCA(root.right, n1, n2)
 
    # If both of the above calls return Non-NULL, then one key
    # is present in once subtree and other is present in other,
    # So this node is the LCA
    if left_lca and right_lca:
        return root
 
    # Otherwise check if left subtree or right subtree is LCA
    return left_lca if left_lca is not None else right_lca
 
 
# Driver code
if __name__ == '__main__':
     
    # Let us create a binary tree given in the above example
    root = Node(1)
    root.left = Node(2)
    root.right = Node(3)
    root.left.left = Node(4)
    root.left.right = Node(5)
    root.right.left = Node(6)
    root.right.right = Node(7)
    print("LCA(4, 5) = ", findLCA(root, 4, 5).key)
    print("LCA(4, 6) = ", findLCA(root, 4, 6).key)
    print("LCA(3, 4) = ", findLCA(root, 3, 4).key)
    print("LCA(2, 4) = ", findLCA(root, 2, 4).key)
 
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)
C#
Javascript
Output
LCA(4, 5) = 2
LCA(4, 6) = 1
LCA(3, 4) = 1
LCA(2, 4) = 2
Time Complexity: O(N) as the method does a simple tree traversal in a bottom-up fashion. 
Auxiliary Space: O(H), where H is the height of the tree.

Note: The above method assumes that keys are present in Binary Tree. If one key is present and the other is absent, then it returns the present key as LCA (Ideally should have returned NULL). We can extend this method to handle all cases by checking if n1 and n2 are present in the tree first and then finding the LCA of n1 and n2. To check whether the node is present in the binary tree or not then traverse on the tree for both n1 and n2 nodes separately.

C++
Java
Python3
""" Program to find LCA of n1 and n2 using one traversal of
 Binary tree
It handles all cases even when n1 or n2 is not there in tree
"""
 
# A binary tree node
 
 
class Node:
 
    # Constructor to create a new node
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
 
# This function return pointer to LCA of two given values
# n1 and n2
# v1 is set as true by this function if n1 is found
# v2 is set as true by this function if n2 is found
 
 
def findLCAUtil(root, n1, n2, v):
 
    # Base Case
    if root is None:
        return None
 
    # IF either n1 or n2 matches ith root's key, report
    # the presence by setting v1 or v2 as true and return
    # root (Note that if a key is ancestor of other, then
    # the ancestor key becomes LCA)
    if root.key == n1:
        v[0] = True
        return root
 
    if root.key == n2:
        v[1] = True
        return root
 
    # Look for keys in left and right subtree
    left_lca = findLCAUtil(root.left, n1, n2, v)
    right_lca = findLCAUtil(root.right, n1, n2, v)
 
    # If both of the above calls return Non-NULL, then one key
    # is present in once subtree and other is present in other,
    # So this node is the LCA
    if left_lca and right_lca:
        return root
 
    # Otherwise check if left subtree or right subtree is LCA
    return left_lca if left_lca is not None else right_lca
 
 
def find(root, k):
 
    # Base Case
    if root is None:
        return False
 
    # If key is present at root, or if left subtree or right
    # subtree , return true
    if (root.key == k or find(root.left, k) or
            find(root.right, k)):
        return True
 
    # Else return false
    return False
 
# This function returns LCA of n1 and n2 on value if both
# n1 and n2 are present in tree, otherwise returns None
 
 
def findLCA(root, n1, n2):
 
    # Initialize n1 and n2 as not visited
    v = [False, False]
 
    # Find lca of n1 and n2 using the technique discussed above
    lca = findLCAUtil(root, n1, n2, v)
 
    # Returns LCA only if both n1 and n2 are present in tree
    if (v[0] and v[1] or v[0] and find(lca, n2) or v[1] and
            find(lca, n1)):
        return lca
 
    # Else return None
    return None
 
 
# Driver program to test above function
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
root.right.left = Node(6)
root.right.right = Node(7)
 
lca = findLCA(root, 4, 5)
 
if lca is not None:
    print("LCA(4, 5) = ", lca.key)
else:
    print("Keys are not present")
 
lca = findLCA(root, 4, 10)
if lca is not None:
    print("LCA(4,10) = ", lca.key)
else:
    print("Keys are not present")
 
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)
C#
Javascript
Output
LCA(4, 5) = 2
Keys are not present 
Time Complexity: O(N) as the method does a simple tree traversal in a bottom-up fashion. 
Auxiliary Space: O(H), where h is the height of the tree.

We have discussed an efficient solution to find LCA in Binary Search Tree. In Binary Search Tree, using BST properties, we can find LCA in O(h) time where h is the height of the tree. Such an implementation is not possible in Binary Tree as keys Binary Tree nodes don’t follow any order.

You may like to see the below articles as well : 
LCA using Parent Pointer 
Lowest Common Ancestor in a Binary Search Tree. 
Find LCA in Binary Tree using RMQ





Like
238
Previous
Replace each node in binary tree with the sum of its inorder predecessor and successor
Next
Lowest Common Ancestor in a Binary Tree using Parent Pointer
Related Articles
1.
Lowest Common Ancestor in a Binary Search Tree.
2.
Lowest Common Ancestor in a Binary Tree | Set 3 (Using RMQ)
3.
Lowest Common Ancestor of the deepest leaves of a Binary Tree
4.
Lowest Common Ancestor in a Binary Tree using Parent Pointer
5.
Lowest Common Ancestor for a Set of Nodes in a Rooted Tree
6.
Lowest Common Ancestor in Parent Array Representation
7.
Least Common Ancestor of any number of nodes in Binary Tree
8.
Tarjan's off-line lowest common ancestors algorithm
9.
Maximum difference between node and its ancestor in Binary Tree
10.
Construct Ancestor Matrix from a Given Binary Tree
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
Tushar Garg 6
shrikanth13
rutvik_56
pratham76
mukesh07
rdtank
divyeshrabadiya07
surinderdawra388
samriddhisrivastava0626
amartyaghoshgfg
simmytarika5
adityakumar129
abhinav04
hardikkoriintern
isha307
kshitijdwivedi29
pradipbankar0097
ishank0106
Article Tags :
Accolite
Amazon
American Express
Expedia
LCA
MakeMyTrip
Microsoft
Payu
Snapdeal
Times Internet
Twitter
Tree
Practice Tags :
Accolite
Amazon
American Express
Expedia
MakeMyTrip