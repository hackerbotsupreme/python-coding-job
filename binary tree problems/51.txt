Check whether a given Binary Tree is Complete or not | Set 1 (Iterative Solution)

Difficulty Level : Medium
Last Updated : 18 Jan, 2023
Read
Discuss(240+)
Courses
Practice
Video
Given a Binary Tree, write a function to check whether the given Binary Tree is Complete Binary Tree or not.
A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible. See the following examples.

The following trees are examples of Complete Binary Trees
    1
  /   \
 2     3
  
       1
    /    \
   2       3
  /
 4

       1
    /    \
   2      3
  /  \    /
 4    5  6
The following trees are examples of Non-Complete Binary Trees
    1
      \
       3
  
       1
    /    \
   2       3
    \     /  \   
     4   5    6

       1
    /    \
   2      3
         /  \
        4    5 
Recommended Problem
Complete Binary Tree
Queue
Tree
+3 more
Solve Problem
Submission count: 21.4K
The method 2 of level order traversal post can be easily modified to check whether a tree is Complete or not. To understand the approach, let us first define the term ‘Full Node’. A node is ‘Full Node’ if both left and right children are not empty (or not NULL). 

The approach is to do a level order traversal starting from the root. In the traversal, once a node is found which is NOT a Full Node, all the following nodes must be leaf nodes. 

Also, one more thing needs to be checked to handle the below case: If a node has an empty left child, then the right child must be empty.  


    1
  /   \
 2     3
  \
   4
Thanks to Guddu Sharma for suggesting this simple and efficient approach. 

C++
C
Java
Python
# Check whether a binary tree is complete or not
 
# A binary tree node
class Node:
 
    # Constructor to create a new node
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 
# Given a binary tree, return true if the tree is complete
# else return false
def isCompleteBT(root):
     
    # Base Case: An empty tree is complete Binary tree
    if root is None:
        return True
 
    # Create an empty queue
    queue = []
 
    # Create a flag variable which will be set True
    # when a non-full node is seen
    flag = False
 
    # Do level order traversal using queue
    queue.append(root)
    while(len(queue) > 0):
        tempNode = queue.pop(0) # Dequeue
 
        # Check if left child is present
        if (tempNode.left):
             
            # If we have seen a non-full node, and we see
            # a node with non-empty left child, then the
            # given tree is not a complete binary tree
            if flag == True :
                return False
 
            # Enqueue left child
            queue.append(tempNode.left)
 
            # If this a non-full node, set the flag as true
        else:
            flag = True
 
        # Check if right child is present
        if(tempNode.right):
                 
            # If we have seen a non full node, and we
            # see a node with non-empty right child, then
            # the given tree is not a complete BT
            if flag == True:
                return False
 
            # Enqueue right child
            queue.append(tempNode.right)
             
        # If this is non-full node, set the flag as True
        else:
            flag = True
         
    # If we reach here, then the tree is complete BT
    return True
 
 
# Driver program to test above function
 
""" Let us construct the following Binary Tree which
      is not a complete Binary Tree
            1
          /   \
         2     3
        / \     \
       4   5     6
    """
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
root.right.right = Node(6)
 
if (isCompleteBT(root)):
    print "Complete Binary Tree"
else:
    print "NOT Complete Binary Tree"
 
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)
C#
Javascript
Output
Complete Binary Tree
Time Complexity: O(n) where n is the number of nodes in given Binary Tree
Auxiliary Space: O(n) for queue. 



Method 2 :  A more simple approach would be to check whether the NULL Node encountered is the last node of the Binary Tree. If the null node encountered in the binary tree is the last node then it is a complete binary tree and if there exists a valid node even after encountering a null node then the tree is not a complete binary tree.

C++
C
Java
Python3
# A binary tree node has data, pointer to left child and a
# pointer to right child
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 
# Given a binary tree, return true if the tree is complete
# else false
def isCompleteBT(root: Node) -> bool:
    # Base Case: An empty tree is complete Binary Tree
    if root is None:
        return True
 
    # Create an empty queue
    q = []
    q.append(root)
    # Create a flag variable which will be set true
    # when a non full node is seen
    flag = False
 
    # Do level order traversal using queue.
    while len(q) != 0:
        temp = q.pop(0)
 
        if temp is None:
            # If we have seen a NULL node, we set the flag
            # to true
            flag = True
        else:
            # If that NULL node is not the last node then
            # return false
            if flag:
                return False
            # Push both nodes even if there are null
            q.append(temp.left)
            q.append(temp.right)
 
    # If we reach here, then the tree is complete Binary
    # Tree
    return True
 
# Helper function that allocates a new node with the
# given data and NULL left and right pointers.
def newNode(data: int) -> Node:
    temp = Node(data)
    return temp
 
# Driver code
if __name__ == '__main__':
    # Let us construct the following Binary Tree which
    # is not a complete Binary Tree
    #        1
    #       / \
    #      2   3
    #     / \  /
    #    4   5 6
    root = newNode(1)
    root.left = newNode(2)
    root.right = newNode(3)
    root.left.left = newNode(4)
    root.left.right = newNode(5)
    root.right.left = newNode(6)
 
    if isCompleteBT(root) == True:
        print("Complete Binary Tree")
    else:
        print("NOT Complete Binary Tree")
 
# This code is contributed by lokeshpotta20.
C#
Javascript
Output
Complete Binary Tree
Time Complexity: O(n) where n is the number of nodes in given Binary Tree

Auxiliary Space: O(n) for queue. 





Like
45
Previous
Check whether a given binary tree is perfect or not
Next
Check if a Binary Tree is subtree of another binary tree | Set 1
Related Articles
1.
Check whether a binary tree is a complete tree or not | Set 2 (Recursive Solution)
2.
Check whether a binary tree is a full binary tree or not | Iterative Approach
3.
Check whether a given binary tree is skewed binary tree or not?
4.
Check whether a binary tree is a full binary tree or not
5.
Check if a binary tree is subtree of another binary tree using preorder traversal : Iterative
6.
Iterative approach to check if a Binary Tree is BST or not
7.
Iterative Boundary Traversal of Complete Binary tree
8.
Check whether a given binary tree is perfect or not
9.
Iterative Approach to check if two Binary Trees are Isomorphic or not
10.
Check for Symmetric Binary Tree (Iterative Approach)
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
princiraj1992
rathbhupendra
Akanksha_Rai
IZUNA_894
anikakapoor
rutvik_56
surindertarika1234
surinderdawra388
prasanna1995
kk9826225
GauravRajput1
sagartomar9927
jana_sayantan
krisania804
hardikkoriintern
yashagarwal2852002
lokeshpotta20
Article Tags :
Queue
Tree
Practice Tags :
Queue
Tree