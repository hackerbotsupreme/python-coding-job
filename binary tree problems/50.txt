Check if given Preorder, Inorder and Postorder traversals are of same tree

Difficulty Level : Medium
Last Updated : 25 Jan, 2023
Read
Discuss
Courses
Practice
Video
Given Preorder, Inorder, and Postorder traversals of some tree. Write a program to check if they all are of the same tree. 

Examples: 

Input : Inorder -> 4 2 5 1 3
        Preorder -> 1 2 4 5 3
        Postorder -> 4 5 2 3 1
Output : Yes
Explanation : All of the above three traversals are of 
the same tree              1
                         /   \
                        2     3
                      /   \
                     4     5

Input : Inorder -> 4 2 5 1 3
        Preorder -> 1 5 4 2 3
        Postorder -> 4 1 2 3 5
Output : No 
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
The most basic approach to solve this problem will be to first construct a tree using two of the three given traversals and then do the third traversal on this constructed tree and compare it with the given traversal. If both of the traversals are same then print Yes otherwise print No. Here, we use Inorder and Preorder traversals to construct the tree. We may also use Inorder and Postorder traversal instead of Preorder traversal for tree construction. You may refer to this post on how to construct a tree from given Inorder and Preorder traversal. After constructing the tree, we will obtain the Postorder traversal of this tree and compare it with the given Postorder traversal.

Below is the implementation of the above approach: 

C++
Java
Python3
# Python3 program to check if
# all three given traversals
# are of the same tree
class node:
   
    def __init__(self, x):
       
        self.data = x
        self.left = None
        self.right = None
 
preIndex = 0
 
# Function to find index of value
# in arr[start...end]. The function
# assumes that value is present in in
def search(arr, strt, end, value):
   
    for i in range(strt, end + 1):
        if(arr[i] == value):
            return i
 
# Recursive function to construct
# binary tree of size lenn from
# Inorder traversal in and Preorder
# traversal pre[].  Initial values
# of inStrt and inEnd should be 0
# and lenn -1. The function doesn't
# do any error checking for cases
# where inorder and preorder do not
# form a tree
def buildTree(inn, pre, inStrt, inEnd):
   
    global preIndex
 
    if(inStrt > inEnd):
        return None
 
    # Pick current node from Preorder
    # traversal using preIndex and
    # increment preIndex
    tNode = node(pre[preIndex])
    preIndex += 1
 
    # If this node has no children
    # then return
    if (inStrt == inEnd):
        return tNode
 
    # Else find the index of this
    # node in Inorder traversal
    inIndex = search(inn, inStrt,
                     inEnd, tNode.data)
 
    # Using index in Inorder traversal,
    # construct left and right subtress
    tNode.left = buildTree(inn, pre, inStrt,
                           inIndex - 1)
    tNode.right = buildTree(inn, pre,
                            inIndex + 1, inEnd)
 
    return tNode
 
# function to compare Postorder traversal
# on constructed tree and given Postorder
def checkPostorder(node, postOrder, index):
    if (node == None):
        return index
 
    # first recur on left child
    index = checkPostorder(node.left,
                           postOrder,
                           index)
 
    # now recur on right child
    index = checkPostorder(node.right,
                           postOrder,
                           index)
 
    # Compare if data at current index in
    # both Postorder traversals are same
    if (node.data == postOrder[index]):
        index += 1
    else:
        return - 1
 
    return index
 
# Driver code
if __name__ == '__main__':
   
    inOrder = [4, 2, 5, 1, 3]
    preOrder = [1, 2, 4, 5, 3]
    postOrder = [4, 5, 2, 3, 1]
    lenn = len(inOrder)
 
    # build tree from given
    # Inorder and Preorder traversals
    root = buildTree(inOrder, preOrder,
                     0, lenn - 1)
 
    # compare postorder traversal on
    # constructed tree with given
    # Postorder traversal
    index = checkPostorder(root, postOrder, 0)
 
    # If both postorder traversals are same
    if (index == lenn):
        print("Yes")
    else:
        print("No")
 
# This code is contributed by Mohit Kumar 29
C#
Javascript
Output
Yes
Time Complexity : O( n * n ), where n is number of nodes in the tree.
Space Complexity: O(n), for call stack

This article is contributed by Harsh Agarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.



Efficient algorithm using hash map to store indices of inorder elements :

While building the tree from Inorder and Preorder traversal we need to check if the inorder and preorder traversals are valid themself for some tree, and if yes , then keep building the tree, but if valid binary tree can not be built from given inorder and preorder traversal, then we must stop building the tree and return false. And also we can build the tree from inorder and preorder traversal in O(n) time using hashmap to store the indices of the inorder elementsâ€™ array.

Implementation:

C++
#include <bits/stdc++.h>
using namespace std;
struct Node {
    int data;
    Node *left, *right;
 
    Node(int val)
    {
        data = val;
        left = right = NULL;
    }
};
Node* buildTreeFromInorderPreorder(
    int inStart, int inEnd, int& preIndex, int preorder[],
    unordered_map<int, int>& inorderIndexMap,
    bool& notPossible)
{
    if (inStart > inEnd)
        return NULL;
 
    // build the current Node
    int rootData = preorder[preIndex];
    Node* root = new Node(rootData);
    preIndex++;
 
    // find the node in inorderIndexMap
    if (inorderIndexMap.find(rootData)
        == inorderIndexMap.end()) {
        notPossible = true;
        return root;
    }
 
    int inorderIndex = inorderIndexMap[rootData];
    if (!(inStart <= inorderIndex
          && inorderIndex <= inEnd)) {
        notPossible = true;
        return root;
    }
 
    int leftInorderStart = inStart,
        leftInorderEnd = inorderIndex - 1,
        rightInorderStart = inorderIndex + 1,
        rightInorderEnd = inEnd;
 
    root->left = buildTreeFromInorderPreorder(
        leftInorderStart, leftInorderEnd, preIndex,
        preorder, inorderIndexMap, notPossible);
 
    if (notPossible)
        return root;
 
    root->right = buildTreeFromInorderPreorder(
        rightInorderStart, rightInorderEnd, preIndex,
        preorder, inorderIndexMap, notPossible);
 
    return root;
}
 
bool checkPostorderCorrect(Node* root, int& postIndex,
                           int postorder[])
{
    if (!root)
        return true;
 
    if (!checkPostorderCorrect(root->left, postIndex,
                               postorder))
        return false;
    if (!checkPostorderCorrect(root->right, postIndex,
                               postorder))
        return false;
 
    return (root->data == postorder[postIndex++]);
}
 
void printPostorder(Node* root)
{
    if (!root)
        return;
 
    printPostorder(root->left);
    printPostorder(root->right);
 
    cout << root->data << ", ";
}
 
void printInorder(Node* root)
{
    if (!root)
        return;
 
    printInorder(root->left);
    cout << root->data << ", ";
    printInorder(root->right);
}
 
bool checktree(int preorder[], int inorder[],
               int postorder[], int N)
{
    // Your code goes here
    if (N == 0)
        return true;
 
    unordered_map<int, int> inorderIndexMap;
    for (int i = 0; i < N; i++)
        inorderIndexMap[inorder[i]] = i;
 
    int preIndex = 0;
 
    // return checkInorderPreorder(0, N - 1, preIndex,
    // preorder, inorderIndexMap) &&
    // checkInorderPostorder(0, N - 1, postIndex, postorder,
    // inorderIndexMap);
 
    bool notPossible = false;
 
    Node* root = buildTreeFromInorderPreorder(
        0, N - 1, preIndex, preorder, inorderIndexMap,
        notPossible);
 
    if (notPossible)
        return false;
 
    int postIndex = 0;
 
    return checkPostorderCorrect(root, postIndex,
                                 postorder);
}
 
// Driver program to test above functions
int main()
{
    int inOrder[] = { 4, 2, 5, 1, 3 };
    int preOrder[] = { 1, 2, 4, 5, 3 };
    int postOrder[] = { 4, 5, 2, 3, 1 };
 
    int len = sizeof(inOrder) / sizeof(inOrder[0]);
 
    // If both postorder traversals are same
    if (checktree(preOrder, inOrder, postOrder, len))
        cout << "Yes";
    else
        cout << "No";
 
    return 0;
}
Java
Javascript
Output
Yes
Time Complexity: O(N)
Auxiliary Space: O(N), where N is number of nodes in the tree.





Like
24
Previous
Check if removing an edge can divide a Binary Tree in two halves
Next
Given level order traversal of a Binary Tree, check if the Tree is a Min-Heap
Related Articles
1.
Check if given Preorder, Inorder and Postorder traversals are of same tree | Set 2
2.
Tree Traversals (Inorder, Preorder and Postorder)
3.
Print Postorder traversal from given Inorder and Preorder traversals
4.
Preorder from Inorder and Postorder traversals
5.
Check if given inorder and preorder traversals are valid for any Binary Tree without building the tree
6.
Construct Full Binary Tree from given preorder and postorder traversals
7.
Construct Tree from given Inorder and Preorder traversals
8.
Preorder, Postorder and Inorder Traversal of a Binary Tree using a single Stack
9.
Binary Search Tree (BST) Traversals â€“ Inorder, Preorder, Post Order
10.
Construct Full Binary Tree using its Preorder traversal and Preorder traversal of its mirror tree
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
prerna saini
princiraj1992
mohit kumar 29
patel2127
sourashis69
surinderdawra388
noviced3vq6
hardikkoriintern
lokeshpotta20
Article Tags :
Binary Tree
Tree Traversals
Tree
Practice Tags :
Tree
Improve Article
Report Issue