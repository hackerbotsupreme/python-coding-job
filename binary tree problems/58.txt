Modify a binary tree to get preorder traversal using right pointers only

Difficulty Level : Medium
Last Updated : 02 Aug, 2022
Read
Discuss(30+)
Courses
Practice
Video
Given a binary tree. Modify it in such a way that after modification you can have a preorder traversal of it using only the right pointers. During modification, you can use right as well as left pointers. 

Examples: 

Input :    10
          /   \
        8      2
      /  \    
    3     5  
    
Output :    10
              \
               8
                \ 
                 3
                  \
                   5
                    \
                     2
Explanation : The preorder traversal
of given binary tree is 10 8 3 5 2.
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Method 1 (Recursive):

One needs to make the right pointer of root point to the left subtree. 
If the node has just left child, then just moving the child to right will complete the processing for that node. 
If there is a right child too, then it should be made right child of the right-most of the original left subtree. 
The above function used in the code process a node and then returns the rightmost node of the transformed subtree.

Implementation:

C++
Java
Python3
# Python code to modify binary tree for
# traversal using only right pointer
 
class newNode():
 
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
         
         
# Function to modify tree
def modifytree(root):
 
    right = root.right
    rightMost = root
 
    # if the left tree exists
    if (root.left):
 
        # get the right-most of the
        # original left subtree
        rightMost = modifytree(root.left)
 
        # set root right to left subtree
        root.right = root.left
        root.left = None
     
 
    # if the right subtree does
    # not exists we are done!
    if (not right):
        return rightMost
 
    # set right pointer of right-most
    # of the original left subtree
    rightMost.right = right
 
    # modify the rightsubtree
    rightMost = modifytree(right)
    return rightMost
 
 
# printing using right pointer only
def printpre(root):
 
    while (root != None):
        print(root.data,end=" ")
        root = root.right
         
# Driver code
if __name__ == '__main__':
    """ Constructed binary tree is
    10
        / \
    8 2
    / \
    3 5     """
    root = newNode(10)
    root.left = newNode(8)
    root.right = newNode(2)
    root.left.left = newNode(3)
    root.left.right = newNode(5)
 
    modifytree(root)
    printpre(root)
 
# This code is contributed by SHUBHAMSINGH10
C#
Javascript
Output: 
10 8 3 5 2 
 

Time Complexity : O(n)
Auxiliary Space : O(n)



Method 2 (Iterative): This can be easily done using iterative preorder traversal. See here. Iterative preorder traversal 

The idea is to maintain a variable prev which maintains the previous node of the preorder traversal. Every-time a new node is encountered, the node set its right to previous one and prev is made equal to the current node. In the end we will have a sort of linked list whose first element is root then left child then right, so on and so forth.

Implementation:

C++
Java
Python
# Python code to modify binary tree for
# traversal using only right pointer
 
# A binary tree node has data,
# left child and right child
class newNode():
 
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 
# An iterative process to set the right
# pointer of Binary tree
def modifytree( root):
     
    # Base Case
    if (root == None):
        return
         
    # Create an empty stack and append root to it
    nodeStack = []
    nodeStack.append(root)
     
    ''' Pop all items one by one.
    Do following for every popped item
    a) print
    b) append its right child
    c) append its left child
    Note that right child is appended first
    so that left is processed first '''
    pre = None
    while (len(nodeStack)):
         
        # Pop the top item from stack
        node = nodeStack[-1]
        nodeStack.pop()
         
        # append right and left children of
        # the popped node to stack
        if (node.right):
            nodeStack.append(node.right)
        if (node.left):
            nodeStack.append(node.left)
             
        # check if some previous node exists
        if (pre != None):
             
            # set the right pointer of
            # previous node to current
            pre.right = node
             
        # set previous node as current node
        pre = node
         
# printing using right pointer only
def printpre( root):
    while (root != None):
        print(root.data, end = " ")
        root = root.right
     
# Driver code
 
''' Constructed binary tree is
        10
    / \
    8     2
/ \    
3     5
'''
root = newNode(10)
root.left = newNode(8)
root.right = newNode(2)
root.left.left = newNode(3)
root.left.right = newNode(5)
 
modifytree(root)
printpre(root)
 
# This code is contributed by SHUBHAMSINGH10
C#
Javascript
Output: 
10 8 3 5 2 
 

Time Complexity : O(n)
Auxiliary Space : O(n)





Like
25
Previous
Number of Binary Trees for given Preorder Sequence length
Next
N Queen Problem | Backtracking-3
Related Articles
1.
Construct Full Binary Tree using its Preorder traversal and Preorder traversal of its mirror tree
2.
Check if a binary tree is subtree of another binary tree using preorder traversal : Iterative
3.
Modify Binary Tree by replacing each node with the sum of its Preorder Predecessor and Successor
4.
Preorder, Postorder and Inorder Traversal of a Binary Tree using a single Stack
5.
Check if a given array can represent Preorder Traversal of Binary Search Tree
6.
Find n-th node in Preorder traversal of a Binary Tree
7.
Construct a Perfect Binary Tree from Preorder Traversal
8.
Find right sibling of a binary tree with parent pointers
9.
Convert Binary Tree to Doubly Linked List by fixing left and right pointers
10.
Construct the full k-ary tree from its preorder traversal
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
aditya314
@aditya314
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
02DCE
prerna saini
andrew1234
SHUBHAMSINGH10
29AjayKumar
Akanksha_Rai
sooda367
decode2207
vaibhavrabadiya117
sweetyty
ranjanrohit840
hardikkoriintern
Article Tags :
Stack
Tree
Practice Tags :
Stack
Tree
Improve Article
Report Issue