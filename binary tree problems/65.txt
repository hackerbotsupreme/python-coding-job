Convert a Binary Tree to a Circular Doubly Link List

Difficulty Level : Hard
Last Updated : 10 Jan, 2023
Read
Discuss(60+)
Courses
Practice
Video
Given a Binary Tree, convert it to a Circular Doubly Linked List (In-Place).  

The left and right pointers in nodes are to be used as previous and next pointers respectively in the converted Circular Linked List.
The order of nodes in the List must be the same as in Inorder for the given Binary Tree.
The first node of Inorder traversal must be the head node of the Circular List.
Examples:

tree to list

Recommended Problem
Binary Tree to CDLL
Linked List
Tree
+1 more
Amazon
SAP Labs
Solve Problem
Submission count: 23.3K
Convert a Binary Tree to a Circular Doubly Link List using Recursion:
The idea is to make a general-purpose function that concatenates two given circular doubly lists

Follow the steps below to solve the problem:

Recursively convert the left subtree to a circular DLL. Let the converted list be leftList.
Recursively convert the right subtree to a circular DLL. Let the converted list be rightList. 
Make a circular linked list of roots of the tree, and make the left and right root points to themselves. 
Concatenate leftList with the list of the single root node. 
Concatenate the list produced in the step above with rightList.
Note: The above approach traverses the tree in a Postorder fashion. We can traverse in an inorder fashion also. We can first concatenate left subtree and root, then recur for the right subtree and concatenate the result with left-root concatenation.

How do Concatenate two circular DLLs? 



Get the last node of the left list. Retrieving the last node is an O(1) operation since the prev pointer of the head points to the last node of the list.
Connect it with the first node of the right list
Get the last node of the second list
Connect it with the head of the list.
Below are implementations of the above idea:

C++
C
Java
Python3
# Python3 Program to convert a Binary
# Tree to a Circular Doubly Linked List
  
  
class newNode:
    def __init__(self, data):
        self.data = data
        self.left = self.right = None
  
# A function that appends rightList
# at the end of leftList.
  
  
def concatenate(leftList, rightList):
  
    # If either of the list is empty
    # then return the other list
    if (leftList == None):
        return rightList
    if (rightList == None):
        return leftList
  
    # Store the last Node of left List
    leftLast = leftList.left
  
    # Store the last Node of right List
    rightLast = rightList.left
  
    # Connect the last node of Left List
    # with the first Node of the right List
    leftLast.right = rightList
    rightList.left = leftLast
  
    # Left of first node points to
    # the last node in the list
    leftList.left = rightLast
  
    # Right of last node refers to
    # the first node of the List
    rightLast.right = leftList
  
    return leftList
  
# Function converts a tree to a circular
# Linked List and then returns the head
# of the Linked List
  
  
def bTreeToCList(root):
    if (root == None):
        return None
  
    # Recursively convert left and
    # right subtrees
    left = bTreeToCList(root.left)
    right = bTreeToCList(root.right)
  
    # Make a circular linked list of single
    # node (or root). To do so, make the
    # right and left pointers of this node
    # point to itself
    root.left = root.right = root
  
    # Step 1 (concatenate the left list
    #          with the list with single
    #         node, i.e., current node)
    # Step 2 (concatenate the returned list
    #          with the right List)
    return concatenate(concatenate(left,
                                   root), right)
  
# Display Circular Link List
  
  
def displayCList(head):
    print("Circular Linked List is :")
    itr = head
    first = 1
    while (head != itr or first):
        print(itr.data, end=" ")
        itr = itr.right
        first = 0
    print()
  
  
# Driver Code
if __name__ == '__main__':
    root = newNode(10)
    root.left = newNode(12)
    root.right = newNode(15)
    root.left.left = newNode(25)
    root.left.right = newNode(30)
    root.right.left = newNode(36)
  
    head = bTreeToCList(root)
    displayCList(head)
  
# This code is contributed by PranchalK
C#
Javascript
Output
Circular Linked List is :
25 12 30 10 36 15 
Time Complexity: O(N), As every node is visited at most once.
Auxiliary space: O(log N), The extra space is used in the recursion call stack which can grow up to a maximum size of logN as it is a binary tree.

Convert a Binary Tree to a Circular Doubly Link List by Inorder Traversal:
The idea is to do in-order traversal of the binary tree. While doing inorder traversal, keep track of the previously visited node in a variable, say prev. For every visited node, make it the next of the prev and set previous of this node as prev.

Follow the steps below to solve the problem:

First convert the binary tree into doubly linked list refer to this post Convert a given Binary Tree to Doubly Linked List.
Now convert this Doubly Linked List to circular Doubly linked list by connecting first and last node.
Below is the implementation of the above approach.

C++
Java
Python
# A python program for in-place conversion of Binary Tree to DLL
# A binary tree node has data, left pointers and right pointers
class Node:
    def __init__(self, val):
        self.data = val
        self.left = None
        self.right = None
  
# head --> Pointer to head node of created doubly linked list
head = None
  
# Initialize previously visited node as NULL. This is
# so that the same value is accessible in all recursive
# calls
prev = None
  
# A simple recursive function to convert a given Binary tree
# to Doubly Linked List
# root --> Root of Binary Tree
def BinaryTree2DoubleLinkedList(root):
  
    # Base case
    if (root == None):
        return
  
    # Recursively convert left subtree
    BinaryTree2DoubleLinkedList(root.left)
  
    # Now convert this node
    global prev, head
    if (prev == None):
        head = root
    else:
        root.left = prev
        prev.right = root
    prev = root
  
    # Finally convert right subtree
    BinaryTree2DoubleLinkedList(root.right)
  
# Function to print nodes in a given doubly linked list
  
  
def printList(node):
    while (node != None):
        print(node.data)
        node = node.right
  
  
# Driver program to test above functions
# Let us create the tree as shown in above diagram
root = Node(10)
root.left = Node(12)
root.right = Node(15)
root.left.left = Node(25)
root.left.right = Node(30)
root.right.left = Node(36)
  
# convert to DLL
BinaryTree2DoubleLinkedList(root)
  
# Print the converted List
printList(head)
  
# This code is contributed by adityamaharshi21.
C#
Javascript
Output
25 12 30 10 36 15 
Time Complexity: O(N), As every node is visited at most once.
Auxiliary space: O(log N), The extra space is used in the recursive function call stack which can grow upto a maximum size of logN.

This approach was contributed by Abhijeet Kumar

This article is contributed by Chirag Agarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.





Like
98
Next
The Great Tree-List Recursion Problem.
Related Articles
1.
Convert Binary Tree to Circular Doubly Linked List using Linear extra space
2.
Convert an Array to a Circular Doubly Linked List
3.
Convert a Binary Tree into Doubly Linked List in spiral fashion
4.
Convert Binary Tree to Doubly Linked List using Morris Traversal
5.
Convert Binary Tree to Doubly Linked List by fixing left and right pointers
6.
Convert given Binary Tree to Doubly Linked List in Linear time
7.
Convert Binary Tree to Doubly Linked List using inorder traversal
8.
Convert Binary Tree to Doubly Linked List by keeping track of visited node
9.
Insertion at Specific Position in a Circular Doubly Linked List
10.
Reverse a doubly circular linked list
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
shrikanth13
PranchalKatiyar
umadevi9616
simranarora5sos
abhijeet19403
hardikkoriintern
lokeshmvs21
adityakumar129
ishank0106
ishankhandelwals
adityamaharshi21
Article Tags :
circular linked list
doubly linked list
SAP Labs
Linked List
Tree
Practice Tags :
SAP Labs
circular linked list
Linked List
Tree