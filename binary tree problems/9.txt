Tree Traversals (Inorder, Preorder and Postorder)

Difficulty Level : Easy
Last Updated : 08 Nov, 2022
Read
Discuss(60+)
Courses
Practice
Video
Unlike linear data structures (Array, Linked List, Queues, Stacks, etc) which have only one logical way to traverse them, trees can be traversed in different ways. The following are the generally used methods for traversing trees:

Example:



Inorder Traversal (Practice): 
Algorithm Inorder(tree)

Traverse the left subtree, i.e., call Inorder(left->subtree)
Visit the root.
Traverse the right subtree, i.e., call Inorder(right->subtree)
Uses of Inorder Traversal:
In the case of binary search trees (BST), Inorder traversal gives nodes in non-decreasing order. To get nodes of BST in non-increasing order, a variation of Inorder traversal where Inorder traversal is reversed can be used. 
Example: In order traversal for the above-given figure is 4 2 5 1 3.

C++
C
Java
Python
# Python3 program to for tree traversals
 
# A class that represents an individual node in a
# Binary Tree
 
 
class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key
 
 
# A function to do inorder tree traversal
def printInorder(root):
 
    if root:
 
        # First recur on left child
        printInorder(root.left)
 
        # then print the data of node
        print(root.val),
 
        # now recur on right child
        printInorder(root.right)
 
 
# Driver code
if __name__ == "__main__":
    root = Node(1)
    root.left = Node(2)
    root.right = Node(3)
    root.left.left = Node(4)
    root.left.right = Node(5)
 
    # Function call
    print "\nInorder traversal of binary tree is"
    printInorder(root)
C#
Javascript
Output
Inorder traversal of binary tree is 
4 2 5 1 3 
Time Complexity: O(N)
Auxiliary Space: If we don’t consider the size of the stack for function calls then O(1) otherwise O(h) where h is the height of the tree. 



Preorder Traversal (Practice): 
Algorithm Preorder(tree)

Visit the root.
Traverse the left subtree, i.e., call Preorder(left->subtree)
Traverse the right subtree, i.e., call Preorder(right->subtree) 
Uses of Preorder:
Preorder traversal is used to create a copy of the tree. Preorder traversal is also used to get prefix expressions on an expression tree.
Example: Preorder traversal for the above-given figure is 1 2 4 5 3.

C++
C
Java
Python
# Python3 program to for tree traversals
 
# A class that represents an individual node in a
# Binary Tree
 
 
class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key
 
 
# A function to do preorder tree traversal
def printPreorder(root):
 
    if root:
 
        # First print the data of node
        print(root.val),
 
        # Then recur on left child
        printPreorder(root.left)
 
        # Finally recur on right child
        printPreorder(root.right)
 
 
# Driver code
if __name__ == "__main__":
  root = Node(1)
  root.left = Node(2)
  root.right = Node(3)
  root.left.left = Node(4)
  root.left.right = Node(5)
 
  # Function call
  print "Preorder traversal of binary tree is"
  printPreorder(root)
C#
Javascript
Output
Preorder traversal of binary tree is 
1 2 4 5 3 
Time Complexity: O(N)
Auxiliary Space: If we don’t consider the size of the stack for function calls then O(1) otherwise O(h) where h is the height of the tree. 

Postorder Traversal (Practice): 
Algorithm Postorder(tree)

Traverse the left subtree, i.e., call Postorder(left->subtree)
Traverse the right subtree, i.e., call Postorder(right->subtree)
Visit the root
Uses of Postorder:
Postorder traversal is used to delete the tree. Please see the question for the deletion of a tree for details. Postorder traversal is also useful to get the postfix expression of an expression tree
Example: Postorder traversal for the above-given figure is 4 5 2 3 1

Below is the implementation of the above traversal methods:

C++
C
Java
Python
# Python3 program to for tree traversals
 
# A class that represents an individual node in a
# Binary Tree
 
 
class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key
 
# A function to do postorder tree traversal
def printPostorder(root):
 
    if root:
 
        # First recur on left child
        printPostorder(root.left)
 
        # the recur on right child
        printPostorder(root.right)
 
        # now print the data of node
        print(root.val),
 
 
# Driver code
if __name__ == "__main__":
  root = Node(1)
  root.left = Node(2)
  root.right = Node(3)
  root.left.left = Node(4)
  root.left.right = Node(5)
 
  # Function call
  print "\nPostorder traversal of binary tree is"
  printPostorder(root)
C#
Javascript
Output
Postorder traversal of binary tree is 
4 5 2 3 1 
Time Complexity: O(N)
Auxiliary Space: If we don’t consider the size of the stack for function calls then O(1) otherwise O(h) where h is the height of the tree. 

Note: The height of the skewed tree is n (no. of elements) so the worst space complexity is O(N) and the height is (Log N) for the balanced tree so the best space
complexity is O(Log N).

Let us see different corner cases:

Complexity function T(n) — for all problems where tree traversal is involved — can be defined as: T(n) = T(k) + T(n – k – 1) + c
Where k is the number of nodes on one side of the root and n-k-1 on the other side.

Let’s do an analysis of boundary conditions:

Case 1: Skewed tree (One of the subtrees is empty and another subtree is non-empty )
k is 0 in this case. 
T(n) = T(0) + T(n-1) + c 
T(n) = 2T(0) + T(n-2) + 2c 
T(n) = 3T(0) + T(n-3) + 3c 
T(n) = 4T(0) + T(n-4) + 4c
………………………………………… 
…………………………………………. 
T(n) = (n-1)T(0) + T(1) + (n-1)c 
T(n) = nT(0) + (n)c
Value of T(0) will be some constant say d. (traversing an empty tree will take some constants time)
T(n) = n(c+d) 
T(n) = Θ(n) (Theta of n)

Case 2: Both left and right subtrees have an equal number of nodes.
T(n) = 2T(|_n/2_|) + c
This recursive function is in the standard form (T(n) = aT(n/b) + (-)(n) ) for master method. If we solve it by master method we get (-)(n)

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
670
Previous
Introduction to Height Balanced Binary Tree
Next
Inorder Tree Traversal without Recursion
Related Articles
1.
Check if given Preorder, Inorder and Postorder traversals are of same tree | Set 2
2.
Check if given Preorder, Inorder and Postorder traversals are of same tree
3.
Preorder from Inorder and Postorder traversals
4.
Print Postorder traversal from given Inorder and Preorder traversals
5.
Check if given inorder and preorder traversals are valid for any Binary Tree without building the tree
6.
Construct Full Binary Tree from given preorder and postorder traversals
7.
Construct Tree from given Inorder and Preorder traversals
8.
Preorder, Postorder and Inorder Traversal of a Binary Tree using a single Stack
9.
Construct Full Binary Tree using its Preorder traversal and Preorder traversal of its mirror tree
10.
Construct a tree from Inorder and Level order traversals | Set 1
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
danielbritten
andrew1234
sapcastic
ac2147020
aashish1995
khushboogoyal499
gabaa406
pujasingg43
pranjaypoddar
jivendrasah
janardansthox
cse19bcs6009
ajaymakvana
Article Tags :
Inorder Traversal
PostOrder Traversal
Preorder Traversal
Snapdeal
tree-traversal
Trees
Articles
Tree
Practice Tags :
Snapdeal
Tree
Improve Article
Report Issue