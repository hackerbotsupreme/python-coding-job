Merge Two Binary Trees by doing Node Sum (Recursive and Iterative)

Difficulty Level : Medium
Last Updated : 13 Jul, 2022
Read
Discuss
Courses
Practice
Video
Given two binary trees. We need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the non-null node will be used as the node of new tree.

Example:  

Input: 
     Tree 1            Tree 2                  
       2                 3                             
      / \               / \                            
     1   4             6   1                        
    /                   \   \                      
   5                     2   7                  

Output: Merged tree:
         5
        / \
       7   5
      / \   \ 
     5   2   7
Note: The merging process must start from the root nodes of both trees. 

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Recursive Algorithm: 

Traverse the tree in Pre-order fashion
Check if both the tree nodes are NULL 
If not, then update the value
Recur for left subtrees
Recur for right subtrees
Return root of updated Tree
C++
C
Java
Python3
# Python3 program to Merge Two Binary Trees
 
# Helper class that allocates a new node
# with the given data and None left and
# right pointers.
class newNode:
    def __init__(self, data):
        self.data = data
        self.left = self.right = None
 
# Given a binary tree, prints nodes
# in inorder
def inorder(node):
    if (not node):
        return
 
    # first recur on left child
    inorder(node.left)
 
    # then print the data of node
    print(node.data, end = " ")
 
    # now recur on right child
    inorder(node.right)
 
# Function to merge given two
# binary trees
def MergeTrees(t1, t2):
    if (not t1):
        return t2
    if (not t2):
        return t1
    t1.data += t2.data
    t1.left = MergeTrees(t1.left, t2.left)
    t1.right = MergeTrees(t1.right, t2.right)
    return t1
 
# Driver code
if __name__ == '__main__':
     
    # Let us construct the first Binary Tree
    #     1
    #     / \
    #     2     3
    # / \     \
    # 4 5     6
    root1 = newNode(1)
    root1.left = newNode(2)
    root1.right = newNode(3)
    root1.left.left = newNode(4)
    root1.left.right = newNode(5)
    root1.right.right = newNode(6)
 
    # Let us construct the second Binary Tree
    #     4
    #     / \
    # 1     7
    # /     / \
    # 3     2 6
    root2 = newNode(4)
    root2.left = newNode(1)
    root2.right = newNode(7)
    root2.left.left = newNode(3)
    root2.right.left = newNode(2)
    root2.right.right = newNode(6)
 
    root3 = MergeTrees(root1, root2)
    print("The Merged Binary Tree is:")
    inorder(root3)
 
# This code is contributed by PranchalK
C#
Javascript
Output
The Merged Binary Tree is:
7 3 5 5 2 10 12 
Complexity Analysis: 

Time complexity : O(n) 
A total of n nodes need to be traversed. Here, n represents the minimum number of nodes from the two given trees.
Auxiliary Space : O(n) 
The depth of the recursion tree can go upto n in case of a skewed tree. In average case, depth will be O(logn).
Iterative Algorithm:



Create a stack
Push the root nodes of both the trees onto the stack.
While the stack is not empty, perform following steps : 
Pop a node pair from the top of the stack
For every node pair removed, add the values corresponding to the two nodes and update the value of the corresponding node in the first tree
If the left child of the first tree exists, push the left child(pair) of both the trees onto the stack.
If the left child of the first tree doesnâ€™t exist, append the left child of the second tree to the current node of the first tree
Do same for right child pair as well.
If both the current nodes are NULL, continue with popping the next nodes from the stack.
Return root of updated Tree
Implementation:

C++
Java
Python3
# Python3 program to Merge Two Binary Trees
  
''' A binary tree node has data, pointer to left child
and a pointer to right child '''
class Node:
     
    def __init__(self, data):
         
        self.data = data
        self.left = None
        self.right = None
         
# Structure to store node pair onto stack
class snode:
     
    def __init__(self, l, r):
         
        self.l = l
        self.r = r
  
''' Helper function that allocates a new node with the
given data and None left and right pointers. '''
def newNode(data):
 
    new_node = Node(data)
    return new_node
     
''' Given a binary tree, print its nodes in inorder'''
def inorder(node):
 
    if (not node):
        return;
  
    ''' first recur on left child '''
    inorder(node.left);
  
    ''' then print the data of node '''
    print(node.data, end=' ');
  
    ''' now recur on right child '''
    inorder(node.right);
  
''' Function to merge given two binary trees'''
  
def MergeTrees(t1, t2):
 
    if (not t1):
        return t2;
    if (not t2):
        return t1;
    s = []
     
    temp = snode(t1, t2)
     
    s.append(temp);
    n = None
     
    while (len(s) != 0):
     
        n = s[-1]
        s.pop();
         
        if (n.l == None or n.r == None):
            continue;
             
        n.l.data += n.r.data;
        if (n.l.left == None):
            n.l.left = n.r.left;
        else:
            t=snode(n.l.left, n.r.left)
            s.append(t);
         
        if (n.l.right == None):
            n.l.right = n.r.right;
        else:
 
            t=snode(n.l.right, n.r.right)
            s.append(t);
         
    return t1;
  
# Driver code
if __name__=='__main__':
     
    ''' Let us construct the first Binary Tree
            1
          /   \
         2     3
        / \     \
       4   5     6
    '''
   
    root1 = newNode(1);
    root1.left = newNode(2);
    root1.right = newNode(3);
    root1.left.left = newNode(4);
    root1.left.right = newNode(5);
    root1.right.right = newNode(6);
   
    ''' Let us construct the second Binary Tree
           4
         /   \
        1     7
       /     /  \
      3     2    6   '''
     
    root2 = newNode(4);
    root2.left = newNode(1);
    root2.right = newNode(7);
    root2.left.left = newNode(3);
    root2.right.left = newNode(2);
    root2.right.right = newNode(6);
   
    root3 = MergeTrees(root1, root2);
    print("The Merged Binary Tree is:");
    inorder(root3);
     
# This code is contributed by rutvik76
C#
Javascript
Output
The Merged Binary Tree is:
7 3 5 5 2 10 12 
Complexity Analysis:  

Time complexity : O(n) 
A total of n nodes need to be traversed. Here, n represents the minimum number of nodes from the two given trees.
Auxiliary Space : O(n) 
The depth of the stack can go upto n in case of a skewed tree.
This article is contributed by Aakash Pal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 





Like
28
Previous
Sum of all the numbers that are formed from root to leaf paths
Next
Vertical Sum in a given Binary Tree | Set 1
Related Articles
1.
Iterative Approach to check if two Binary Trees are Isomorphic or not
2.
Count half nodes in a Binary tree (Iterative and Recursive)
3.
Count full nodes in a Binary tree (Iterative and Recursive)
4.
Iterative function to check if two trees are identical
5.
Iterative method to check if two trees are mirror of each other
6.
Construct a Maximum Binary Tree from two given Binary Trees
7.
Get level of a node in binary tree | iterative approach
8.
Deepest left leaf node in a binary tree | iterative approach
9.
Deepest right leaf node in a binary tree | Iterative approach
10.
Check whether a binary tree is a full binary tree or not | Iterative Approach
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
shrikanth13
PranchalKatiyar
rutvik_56
GauravRajput1
aashish1995
divyeshrabadiya07
sagartomar9927
unknown2108
patel2127
sweetyty
surinderdawra388
mahmoodashqur
rravithejareddy
adityakumar129
hardikkoriintern
Article Tags :
Tree
Practice Tags :
Tree
Improve Article
Report Issue