Morris traversal for Preorder

Difficulty Level : Hard
Last Updated : 20 Dec, 2022
Read
Discuss(40+)
Courses
Practice
Video
Using Morris Traversal, we can traverse the tree without using stack and recursion. The algorithm for Preorder is almost similar to Morris traversal for Inorder.

1...If left child is null, print the current node data. Move to right child. 
….Else, Make the right child of the inorder predecessor point to the current node. Two cases arise: 
………a) The right child of the inorder predecessor already points to the current node. Set right child to NULL. Move to right child of current node. 
………b) The right child is NULL. Set it to the current node. Print the current node’s data and move to left child of current node. 
2...Iterate until the current node is not NULL.

Following is the implementation of the above algorithm. 

C++
C
Java
Python3
# Python program for Morris Preorder traversal
 
# A binary tree Node
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 
# Preorder traversal without
# recursion and without stack
def MorrisTraversal(root):
    curr = root
 
    while curr:
        # If left child is null, print the
        # current node data. And, update
        # the current pointer to right child.
        if curr.left is None:
            print(curr.data, end= " ")
            curr = curr.right
 
        else:
            # Find the inorder predecessor
            prev = curr.left
 
            while prev.right is not None and prev.right is not curr:
                prev = prev.right
 
            # If the right child of inorder
            # predecessor already points to
            # the current node, update the
            # current with it's right child
            if prev.right is curr:
                prev.right = None
                curr = curr.right
                 
            # else If right child doesn't point
            # to the current node, then print this
            # node's data and update the right child
            # pointer with the current node and update
            # the current with it's left child
            else:
                print (curr.data, end=" ")
                prev.right = curr
                curr = curr.left
 
# Function for Standard preorder traversal
def preorfer(root):
    if root :
        print(root.data, end = " ")
        preorfer(root.left)
        preorfer(root.right)
         
 
# Driver program to test
root = Node(1)
root.left = Node(2)
root.right = Node(3)
 
root.left.left = Node(4)
root.left.right = Node(5)
 
root.right.left= Node(6)
root.right.right = Node(7)
 
root.left.left.left = Node(8)
root.left.left.right = Node(9)
 
root.left.right.left = Node(10)
root.left.right.right = Node(11)
 
 
MorrisTraversal(root)
print("\n")
preorfer(root)
 
 
# This code is contributed by 'Aartee'
C#
Javascript
Output
1 2 4 8 9 5 10 11 3 6 7 
1 2 4 8 9 5 10 11 3 6 7 
Time Complexity: O(n), we visit every node at most once.
Auxiliary Space: O(1), we use a constant amount of space for variables and pointers.

Limitations: 
Morris’s traversal modifies the tree during the process. It establishes the right links while moving down the tree and resets the right links while moving up the tree. So the algorithm cannot be applied if write operations are not allowed.

This article is compiled by Aashish Barnwal and reviewed by the GeeksforGeeks team. Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above.
 



Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
40
Previous
Iterative Preorder Traversal
Next
Iterative Postorder Traversal | Set 1 (Using Two Stacks)
Related Articles
1.
Construct Full Binary Tree using its Preorder traversal and Preorder traversal of its mirror tree
2.
Level order traversal of Binary Tree using Morris Traversal
3.
Reverse Morris traversal using Threaded Binary Tree
4.
Morris traversal for Postorder
5.
Convert Binary Tree to Doubly Linked List using Morris Traversal
6.
Iterative Preorder Traversal
7.
Check if a given array can represent Preorder Traversal of Binary Search Tree
8.
Construct the full k-ary tree from its preorder traversal
9.
Modify a binary tree to get preorder traversal using right pointers only
10.
Find n-th node in Preorder traversal of a Binary Tree
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
shrikanth13
rathbhupendra
rutvik_56
surindertarika1234
surajrasr7277
Article Tags :
Tree
Practice Tags :
Tree
Improve Article
Report Issue