Check whether a given binary tree is perfect or not

Difficulty Level : Easy
Last Updated : 27 Jan, 2023
Read
Discuss(20+)
Courses
Practice
Video
Given a Binary Tree, write a function to check whether the given Binary Tree is a perfect Binary Tree or not.
A Binary tree is Perfect Binary Tree in which all internal nodes have two children and all leaves are at same level.

Examples: 

The following tree is a perfect binary tree 

               10
           /       \  
         20         30  
        /  \        /  \
      40    50    60   70


               18
           /       \  
         15         30  
The following tree is not a perfect binary tree 


      1
    /    \
   2       3
    \     /  \   
     4   5    6
Recommended Problem
Perfect Binary Tree
Tree
Data Structures
FactSet
Solve Problem
Submission count: 12.4K
A Perfect Binary Tree of height h (where height is number of nodes on path from root to leaf) has 2h – 1 nodes.

Below is an idea to check whether a given Binary Tree is perfect or not.  

Find depth of any node (in below tree we find depth of leftmost node). Let this depth be d.
Now recursively traverse the tree and check for following two conditions. 
Every internal node should have both children non-empty
All leaves are at depth ‘d’
Implementation:



C++
Java
Python3
# Python3 program to check whether a
# given Binary Tree is Perfect or not
 
# Helper class that allocates a new
# node with the given key and None
# left and right pointer.
class newNode:
    def __init__(self, k):
        self.key = k
        self.right = self.left = None
 
# Returns depth of leftmost leaf.
def findADepth(node):
    d = 0
    while (node != None):
        d += 1
        node = node.left
    return d
 
# This function tests if a binary tree
# is perfect or not. It basically checks
# for two things :
# 1) All leaves are at same level
# 2) All internal nodes have two children
def isPerfectRec(root, d, level = 0):
     
    # An empty tree is perfect
    if (root == None):
        return True
 
    # If leaf node, then its depth must
    # be same as depth of all other leaves.
    if (root.left == None and root.right == None):
        return (d == level + 1)
 
    # If internal node and one child is empty
    if (root.left == None or root.right == None):
        return False
 
    # Left and right subtrees must be perfect.
    return (isPerfectRec(root.left, d, level + 1) and
            isPerfectRec(root.right, d, level + 1))
 
# Wrapper over isPerfectRec()
def isPerfect(root):
    d = findADepth(root)
    return isPerfectRec(root, d)
 
# Driver Code
if __name__ == '__main__':
    root = None
    root = newNode(10)
    root.left = newNode(20)
    root.right = newNode(30)
 
    root.left.left = newNode(40)
    root.left.right = newNode(50)
    root.right.left = newNode(60)
    root.right.right = newNode(70)
 
    if (isPerfect(root)):
        print("Yes")
    else:
        print("No")
         
# This code is contributed by pranchalK
C#
Javascript
Output
Yes
Complexity Analysis:

Time complexity: O(n) 
Space Complexity: O(n)
Method 2: Using the length of the binary tree

Since a full binary tree has 2^h – 1 nodes, we can count the number of nodes in the binary tree and determine whether it is a power of 2 or not.

To efficiently determine whether it is a power of 2 or not, we can use bitwise operation x & (x+1) == 0

Implementation:

C++
Java
Python3
# Python3 program to check whether a
# given Binary Tree is Perfect or not
 
# Helper class that allocates a new
# node with the given key and None
# left and right pointer.
class newNode:
    def __init__(self, k):
        self.key = k
        self.right = self.left = None
 
#This functions gets the size of binary tree
#Basically, the number of nodes this binary tree has
def getLength(root):
  if root == None:
    return 0
  return 1 + getLength(root.left) + getLength(root.right)
 
#Returns True if length of binary tree is a power of 2 else False
def isPerfect(root):
  length = getLength(root)
  return length & (length+1) == 0
 
# Driver Code
if __name__ == '__main__':
    root = None
    root = newNode(10)
    root.left = newNode(20)
    root.right = newNode(30)
 
    root.left.left = newNode(40)
    root.left.right = newNode(50)
    root.right.left = newNode(60)
    root.right.right = newNode(70)
 
    if (isPerfect(root)):
        print("Yes")
    else:
        print("No")
         
# This code is contributed by beardedowl
Javascript
Output
Yes
Complexity Analysis:

Time Complexity: O(n)
Space Complexity:O(n)
This article is contributed by Nikhil Papisetty. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 





Like
32
Previous
Check whether a binary tree is a full binary tree or not
Next
Check whether a given Binary Tree is Complete or not | Set 1 (Iterative Solution)
Related Articles
1.
Check whether a given binary tree is skewed binary tree or not?
2.
Check whether a binary tree is a full binary tree or not | Iterative Approach
3.
Check whether a binary tree is a full binary tree or not
4.
Check whether a binary tree is a complete tree or not | Set 2 (Recursive Solution)
5.
Check whether a given Binary Tree is Complete or not | Set 1 (Iterative Solution)
6.
Construct XOR tree by Given leaf nodes of Perfect Binary Tree
7.
Iterative approach to check if a Binary Tree is Perfect
8.
Check if any level of a perfect Binary Tree forms a Palindrome
9.
Check if a Binary Tree is an Even-Odd Tree or not
10.
Complexity of different operations in Binary tree, Binary Search Tree and AVL tree
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
prerna saini
Rajput-Ji
PranchalKatiyar
noob2000
surindertarika1234
beardedowl
shinjanpatra
sainitushar438
hardikkoriintern
Article Tags :
Amazon
FactSet
Tree
Practice Tags :
Amazon
FactSet
Tree
Improve Article
Report Issue