Diameter of a Binary Tree

Difficulty Level : Medium
Last Updated : 15 Sep, 2022
Read
Discuss(540+)
Courses
Practice
Video
The diameter/width of a tree is defined as the number of nodes on the longest path between two end nodes. 

The diagram below shows two trees each with a diameter of nine, the leaves that form the ends of the longest path are shaded (note that there is more than one path in each tree of length nine, but no path longer than nine nodes). 



Recommended Problem
Diameter of a Binary Tree
Tree
Data Structures
Amazon
Microsoft
+1 more
Solve Problem
Submission count: 2L
Approach: The diameter of a tree T is the largest of the following quantities:


the diameter of T’s left subtree.
the diameter of T’s right subtree.
the longest path between leaves that goes through the root of T (this can be computed from the heights of the subtrees of T)
Below is the implementation of the above approach

C++
C
Java
Python3
# Python3 program to find the diameter of binary tree
 
# A binary tree node
 
 
class Node:
 
    # Constructor to create a new node
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 
 
# The function Compute the "height" of a tree. Height is the
# number of nodes along the longest path from the root node
# down to the farthest leaf node.
 
def height(node):
 
    # Base Case : Tree is empty
    if node is None:
        return 0
 
    # If tree is not empty then height = 1 + max of left
    # height and right heights
    return 1 + max(height(node.left), height(node.right))
 
# Function to get the diameter of a binary tree
 
 
def diameter(root):
 
    # Base Case when tree is empty
    if root is None:
        return 0
 
    # Get the height of left and right sub-trees
    lheight = height(root.left)
    rheight = height(root.right)
 
    # Get the diameter of left and right sub-trees
    ldiameter = diameter(root.left)
    rdiameter = diameter(root.right)
 
    # Return max of the following tree:
    # 1) Diameter of left subtree
    # 2) Diameter of right subtree
    # 3) Height of left subtree + height of right subtree +1
    return max(lheight + rheight + 1, max(ldiameter, rdiameter))
 
 
# Driver Code
if __name__ == "__main__":
    """
    Constructed binary tree is
                1
              /   \
            2      3
          /  \
        4     5
    """
 
    root = Node(1)
    root.left = Node(2)
    root.right = Node(3)
    root.left.left = Node(4)
    root.left.right = Node(5)
 
    # Function Call
    print(diameter(root))
 
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)
C#
Javascript
Output
Diameter of the given binary tree is 4
Time Complexity: O(N2)
Auxiliary Space: O(N) for call stack
 
Efficient Approach: To solve the problem follow the below idea:



 The above implementation can be optimized by calculating the height in the same recursion rather than calling a height() separately. Thanks to Amar for suggesting this optimized version.

Below is the implementation of the above approach:

C++
Java
Python3
# Python3 program to find the diameter of a binary tree
# A binary tree Node
 
 
class Node:
 
    # Constructor to create a new Node
    def __init__(self, data):
        self.data = data
        self.left = self.right = None
 
# utility class to pass height object
 
 
class Height:
    def __init(self):
        self.h = 0
 
# Optimised recursive function to find diameter
# of binary tree
 
 
def diameterOpt(root, height):
 
    # to store height of left and right subtree
    lh = Height()
    rh = Height()
 
    # base condition- when binary tree is empty
    if root is None:
        height.h = 0
        return 0
 
    # ldiameter --> diameter of left subtree
    # rdiameter  --> diameter of right subtree
 
    # height of left subtree and right subtree is obtained from lh and rh
    # and returned value of function is stored in ldiameter and rdiameter
 
    ldiameter = diameterOpt(root.left, lh)
    rdiameter = diameterOpt(root.right, rh)
 
    # height of tree will be max of left subtree
    # height and right subtree height plus1
 
    height.h = max(lh.h, rh.h) + 1
 
    # return maximum of the following
    # 1)left diameter
    # 2)right diameter
    # 3)left height + right height + 1
    return max(lh.h + rh.h + 1, max(ldiameter, rdiameter))
 
# function to calculate diameter of binary tree
 
 
def diameter(root):
    height = Height()
    return diameterOpt(root, height)
 
 
# Driver Code
if __name__ == "__main__":
    root = Node(1)
    root.left = Node(2)
    root.right = Node(3)
    root.left.left = Node(4)
    root.left.right = Node(5)
 
    """
  Constructed binary tree is
              1
          /   \
          2      3
        /  \
      4     5
  """
 
    print("The diameter of the binary tree is:", end=" ")
    # Function Call
    print(diameter(root))
 
# This code is contributed by Shweta Singh(shweta44)
C#
Javascript
Output
Diameter of the given binary tree is 4
Time Complexity: O(N) 
Auxiliary Space: O(N) due to recursive calls.

Related Article:
Diameter of a Binary Tree in O(n) [A new method]
Diameter of an N-ary tree

Asked in: Amazon, Cadence, MakeMyTrip, Microsoft, Oracle, Philips, Prop Tiger, Sales Force, Snapdeal, VMWare
Please write comments if you find any of the above codes/algorithms incorrect, or find other ways to solve the same problem.





Like
160
Previous
Handshaking Lemma and Interesting Tree Properties
Next
Enumeration of Binary Trees
Related Articles
1.
Diameter of a Binary Tree in O(n) [A new method]
2.
Diameter of a Binary Indexed Tree with N nodes
3.
Finding the lexicographically smallest diameter in a binary tree
4.
Diameter of an N-ary tree
5.
Diameter of a tree using DFS
6.
Diameter of n-ary tree using BFS
7.
DP on Trees | Set-3 ( Diameter of N-ary Tree )
8.
Possible edges of a tree for given diameter, height and vertices
9.
Make a tree with n vertices , d diameter and at most vertex degree k
10.
Complexity of different operations in Binary tree, Binary Search Tree and AVL tree
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
shweta44
anman9801
parascoding
rahulas1505
shivanisinghss2110
krishaccot
divyesh072019
ghoshdipan
probinsah
simmytarika5
shinjanpatra
surinderdawra388
simranarora5sos
vibhukarnwal077
adityabansal0005
polymatir3j
qlfunduck
naveen_619
janardansthox
Article Tags :
Amazon
Cadence India
Directi
MakeMyTrip
Microsoft
Oracle
OYO Rooms
Philips
Salesforce
Snapdeal
VMWare
Tree
Practice Tags :
Amazon
Cadence India
Directi
MakeMyTrip
Microsoft
Oracle
OYO Rooms
Philips
Salesforce
Snapdeal
VMWare
Tree
Improve Article
Report Issue
WHAT'S NEW

Complete Test Series Course
