Introduction to Binary Tree – Data Structure and Algorithm Tutorials

Difficulty Level : Easy
Last Updated : 28 Jan, 2023
Read
Discuss(60+)
Courses
Practice
Video
A tree is a popular data structure that is non-linear in nature. Unlike other data structures like an array, stack, queue, and linked list which are linear in nature, a tree represents a hierarchical structure. The ordering information of a tree is not important. A tree contains nodes and 2 pointers. These two pointers are the left child and the right child of the parent node. Let us understand the terms of tree in detail.

Root: The root of a tree is the topmost node of the tree that has no parent node. There is only one root node in every tree.
Parent Node:  The node which is a predecessor of a node is called the parent node of that node.
Child Node: The node which is the immediate successor of a node is called the child node of that node.
Sibling: Children of the same parent node are called siblings.
Edge: Edge acts as a link between the parent node and the child node.
Leaf: A node that has no child is known as the leaf node. It is the last node of the tree. There can be multiple leaf nodes in a tree.
Subtree: The subtree of a node is the tree considering that particular node as the root node.
Depth: The depth of the node is the distance from the root node to that particular node.
Height: The height of the node is the distance from that node to the deepest node of that subtree.
Height of tree: The Height of the tree is the maximum height of any node. This is the same as the height of the root node.
Level: A level is the number of parent nodes corresponding to a given node of the tree.
Degree of node:  The degree of a node is the number of its children.
NULL: The number of NULL nodes in a binary tree is (N+1), where N is the number of nodes in a binary tree.
  

Introduction to Binary Tree - Data Structure and Algorithm Tutorials
Introduction to Binary Tree – Data Structure and Algorithm Tutorials

Why to use Tree Data Structure? 
1. One reason to use trees might be because you want to store information that naturally forms a hierarchy. For example, the file system on a computer: 


File System

2. Trees (with some ordering e.g., BST) provide moderate access/search (quicker than Linked List and slower than arrays). 
3. Trees provide moderate insertion/deletion (quicker than Arrays and slower than Unordered Linked Lists). 
4. Like Linked Lists and unlike Arrays, Trees don’t have an upper limit on the number of nodes as nodes are linked using pointers.

The main applications of tree data structure: 
Manipulate hierarchical data. 
Make information easy to search (see tree traversal). 
Manipulate sorted lists of data. 
As a workflow for compositing digital images for visual effects. 
Router algorithms 
Form of multi-stage decision-making (see business chess). 
Trees can be used to represent the structure of a sentence, and can be used in parsing algorithms to analyze the grammar of a sentence.
Trees can be used to represent the decision-making process of computer-controlled characters in games, such as in decision trees.
Huffman coding uses a tree to represent the frequency of characters in a text, which can be used for data compression.
Trees are used to represent the syntax of a programming language, and can be used in compiler design to check the syntax of a program and generate machine code.
What is a Binary Tree?
A binary tree is a tree data structure in which each node can have at most two children, which are referred to as the left child and the right child. The topmost node in a binary tree is called the root, and the bottom-most nodes are called leaves. A binary tree can be visualized as a hierarchical structure with the root at the top and the leaves at the bottom.

Binary trees have many applications in computer science, including data storage and retrieval, expression evaluation, network routing, and game AI. They can also be used to implement various algorithms such as searching, sorting, and graph algorithms.

Representation of Binary Tree:
Each node in the tree contains the following:



Data
Pointer to the left child
Pointer to the right child

Binary Tree

In C, we can represent a tree node using structures. In other languages, we can use classes as part of their OOP feature. Below is an example of a tree node with integer data.

C
C++
Python
# A Python class that represents
# an individual node in a Binary Tree
 
class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key
Java
C#
Javascript
Basic Operations On Binary Tree:
Inserting an element.
Removing an element.
Searching for an element.
Deletion for an element.
Traversing an element. There are four (mainly three) types of traversals in a binary tree which will be discussed ahead.
Auxiliary Operations On Binary Tree:
Finding the height of the tree
Find the level of the tree
Finding the size of the entire tree.
Applications of Binary Tree:
In compilers, Expression Trees are used which is an application of binary trees.
Huffman coding trees are used in data compression algorithms.
Priority Queue is another application of binary tree that is used for searching maximum or minimum in O(1) time complexity.
Represent hierarchical data.
Used in editing software like Microsoft Excel and spreadsheets.
Useful for indexing segmented at the database is useful in storing cache in the system,
Syntax trees are used for most famous compilers for programming like GCC, and AOCL to perform arithmetic operations.
For implementing priority queues.
Used to find elements in less time (binary search tree)
Used to enable fast memory allocation in computers. 
Used to perform encoding and decoding operations.
Binary trees can be used to organize and retrieve information from large datasets, such as in inverted index and k-d trees.
Binary trees can be used to represent the decision-making process of computer-controlled characters in games, such as in decision trees.
 Binary trees can be used to implement searching algorithms, such as in binary search trees which can be used to quickly find an element in a sorted list.
Binary trees can be used to implement sorting algorithms, such as in heap sort which uses a binary heap to sort elements efficiently.
Binary Tree Traversals:
Tree Traversal algorithms can be classified broadly into two categories:

Depth-First Search (DFS) Algorithms
Breadth-First Search (BFS) Algorithms
Tree Traversal using Depth-First Search (DFS) algorithm can be further classified into three categories:
Preorder Traversal (current-left-right: Visit the current node before visiting any nodes inside the left or right subtrees. Here, the traversal is root – left child – right child. It means that the root node is traversed first then its left child and finally the right child.
Inorder Traversal (left-current-right): Visit the current node after visiting all nodes inside the left subtree but before visiting any node within the right subtree. Here, the traversal is left child – root – right child.  It means that the left child is traversed first then its root node and finally the right child.
Postorder Traversal (left-right-current): Visit the current node after visiting all the nodes of the left and right subtrees.  Here, the traversal is left child – right child – root.  It means that the left child has traversed first then the right child and finally its root node.
Tree Traversal using Breadth-First Search (BFS) algorithm can be further classified into one category:
Level Order Traversal:  Visit nodes level-by-level and left-to-right fashion at the same level. Here, the traversal is level-wise. It means that the most left child has traversed first and then the other children of the same level from left to right have traversed. 
Let us traverse the following tree with all four traversal methods:

Binary Tree
Binary Tree

Pre-order Traversal of the above tree: 1-2-4-5-3-6-7
In-order Traversal of the above tree: 4-2-5-1-6-3-7
Post-order Traversal of the above tree: 4-5-2-6-7-3-1
Level-order Traversal of the above tree: 1-2-3-4-5-6-7

Implementation of Binary Tree:
Let us create a simple tree with 4 nodes. The created tree would be as follows. 

Binary Tree
Binary Tree

Simple example :

Java
class Node {
  int data;
  Node left;
  Node right;
 
  public Node(int data) {
    this.data = data;
  }
}
 
class BinaryTree {
  Node root;
 
  public void addNode(int data) {
    Node newNode = new Node(data);
 
    if (root == null) {
      root = newNode;
    } else {
      Node focusNode = root;
      Node parent;
 
      while (true) {
        parent = focusNode;
 
        if (data < focusNode.data) {
          focusNode = focusNode.left;
          if (focusNode == null) {
            parent.left = newNode;
            return;
          }
        } else {
          focusNode = focusNode.right;
          if (focusNode == null) {
            parent.right = newNode;
            return;
          }
        }
      }
    }
  }
 
  public void preOrderTraversal(Node focusNode) {
    if (focusNode != null) {
      System.out.print(focusNode.data + " ");
      preOrderTraversal(focusNode.left);
      preOrderTraversal(focusNode.right);
    }
  }
}
 
public class Main {
  public static void main(String[] args) {
    BinaryTree tree = new BinaryTree();
 
    tree.addNode(50);
    tree.addNode(25);
    tree.addNode(75);
    tree.addNode(12);
    tree.addNode(37);
    tree.addNode(43);
    tree.addNode(30);
 
    tree.preOrderTraversal(tree.root);
  }
}
C++
Output
50 25 12 37 30 43 75 
Time Complexity : O(h), h is height of tree.

Auxiliary Space : O(h), h is height of tree.

Below is the Implementation of the binary tree:

C++
C
Java
Python
# Python program to introduce Binary Tree
# A class that represents an individual node
# in a Binary Tree
 
 
class Node:
    def __init__(self, key):
        self.left = None
          self.right = None
          self.val = key
 
if __name__ == '__main__':
    # Create root
    root = Node(1)
    ''' following is the tree after above statement
    1
    / \
    None None'''
root.left = Node(2)
root.right = Node(3)
 
''' 2 and 3 become left and right children of 1
1
/ \
2 3
/ \ / \
None None None None'''
 
root.left.left = Node(4)
'''4 becomes left child of 2
1
/ \
2 3
/ \ / \
4 None None None
/ \
None None'''
C#
Javascript
Summary: Tree is a hierarchical data structure. Main uses of trees include maintaining hierarchical data, providing moderate access and insert/delete operations. Binary trees are special cases of tree where every node has at most two children.



Below are set 2 and set 3 of this post. 
Properties of Binary Tree 
Types of Binary Tree
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
1.31k
Previous
Introduction to Tree - Data Structure and Algorithm Tutorials
Next
Properties of Binary Tree
Related Articles
1.
Introduction to Tree - Data Structure and Algorithm Tutorials
2.
Introduction to Segment Trees - Data Structure and Algorithm Tutorials
3.
Introduction to Trie - Data Structure and Algorithm Tutorials
4.
Complexity of different operations in Binary tree, Binary Search Tree and AVL tree
5.
Introduction to Hierarchical Data Structure
6.
Difference between Binary Tree and Binary Search Tree
7.
Maximum sub-tree sum in a Binary Tree such that the sub-tree is also a BST
8.
Convert a Generic Tree(N-array Tree) to Binary Tree
9.
Check if a Binary Tree is subtree of another binary tree | Set 1
10.
Binary Tree to Binary Search Tree Conversion
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
nsp92
princiraj1992
manikanta2901
Twinkl Bajaj
anandpatel98260
umadevi9616
putitinwafi
shreyasnaphad
hardikkoriintern
preetilobra8448
chiragmundra2002
harendrakumar123
susobhanakhuli
itsadityash
laxmishinde5t82
Article Tags :
Tree
Practice Tags :
Tree
Improve Article
Report Issue