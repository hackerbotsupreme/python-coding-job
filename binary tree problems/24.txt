Boundary Traversal of binary tree

Difficulty Level : Medium
Last Updated : 11 Jan, 2023
Read
Discuss(410+)
Courses
Practice
Video
Given a binary tree, print boundary nodes of the binary tree Anti-Clockwise starting from the root.

 The boundary includes 

left boundary (nodes on left excluding leaf nodes)
leaves (consist of only the leaf nodes)
right boundary (nodes on right excluding leaf nodes)
The left boundary is defined as the path from the root to the left-most node. The right boundary is defined as the path from the root to the right-most node. If the root doesn’t have left subtree or right subtree, then the root itself is left boundary or right boundary. Note this definition only applies to the input binary tree, and not apply to any subtrees.
The left-most node is defined as a leaf node you could reach when you always firstly travel to the left subtree if it exists. If not, travel to the right subtree. Repeat until you reach a leaf node.
The right-most node is also defined in the same way with left and right exchanged. 
For example, boundary traversal of the following tree is “20 8 4 10 14 25 22”

This is how we write the traversal:

root : 20

left- boundary nodes: 8

leaf nodes: 4 10 14 25



right – boundary nodes: 22 

 


 

Recommended Problem
Boundary Traversal of binary tree
Tree
Data Structures
Flipkart
Morgan Stanley
+10 more
Solve Problem
Submission count: 2.3L
We break the problem in 3 parts: 

1. Print the left boundary in top-down manner. 
2. Print all leaf nodes from left to right, which can again be sub-divided into two sub-parts: 
…..2.1 Print all leaf nodes of left sub-tree from left to right. 
…..2.2 Print all leaf nodes of right subtree from left to right. 
3. Print the right boundary in bottom-up manner.
We need to take care of one thing that nodes are not printed again. e.g. The left most node is also the leaf node of the tree.
Based on the above cases, below is the implementation:
 

Implementation:

C++
C
Java
Python3
# Python3 program for binary traversal of binary tree
 
# A binary tree node
class Node:
 
    # Constructor to create a new node
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 
# A simple function to print leaf nodes of a Binary Tree
def printLeaves(root):
    if(root):
        printLeaves(root.left)
         
        # Print it if it is a leaf node
        if root.left is None and root.right is None:
            print(root.data),
 
        printLeaves(root.right)
 
# A function to print all left boundary nodes, except a
# leaf node. Print the nodes in TOP DOWN manner
def printBoundaryLeft(root):
     
    if(root):
        if (root.left):
             
            # to ensure top down order, print the node
            # before calling itself for left subtree
            print(root.data)
            printBoundaryLeft(root.left)
         
        elif(root.right):
            print (root.data)
            printBoundaryLeft(root.right)
         
        # do nothing if it is a leaf node, this way we
        # avoid duplicates in output
 
 
# A function to print all right boundary nodes, except
# a leaf node. Print the nodes in BOTTOM UP manner
def printBoundaryRight(root):
     
    if(root):
        if (root.right):
            # to ensure bottom up order, first call for
            # right subtree, then print this node
            printBoundaryRight(root.right)
            print(root.data)
         
        elif(root.left):
            printBoundaryRight(root.left)
            print(root.data)
 
        # do nothing if it is a leaf node, this way we
        # avoid duplicates in output
 
 
# A function to do boundary traversal of a given binary tree
def printBoundary(root):
    if (root):
        print(root.data)
         
        # Print the left boundary in top-down manner
        printBoundaryLeft(root.left)
 
        # Print all leaf nodes
        printLeaves(root.left)
        printLeaves(root.right)
 
        # Print the right boundary in bottom-up manner
        printBoundaryRight(root.right)
 
 
# Driver program to test above function
root = Node(20)
root.left = Node(8)
root.left.left = Node(4)
root.left.right = Node(12)
root.left.right.left = Node(10)
root.left.right.right = Node(14)
root.right = Node(22)
root.right.right = Node(25)
printBoundary(root)
 
# This code is contributed by
# Nikhil Kumar Singh(nickzuck_007)
C#
Javascript
Output
20 8 4 10 14 25 22 
Time Complexity: O(n) where n is the number of nodes in binary tree.
Auxiliary Space: O(n)

Clean Code with returning the traversal:
[No direct printing + Iterative Version of the code]

Algorithm:

Right Boundary – Go Right Right until no Right. Dont Include Leaf nodes. (as it leads to duplication)
Left Boundary – Go Left Left until no Left. Dont Include Leaf nodes. (as it leads to duplication)
Leaf Boundary – Do inorder/preorder, if leaf node add to the List.
We pass the array as reference, so its the same memory location used by all functions, to coordinate the result at one place.
CODE:

C++
Java
Python3
# Python program to print boundary traversal of binary tree
 
# A binary tree node has data, pointer to left child
# and a pointer to right child
class Node:
    def __init__(self, key):
        self.data = key
        self.left = None
        self.right = None
 
 
def isLeaf(node):
    if node.left == None and node.right == None:
        return True
    return False
 
 
def addLeftBound(root, res):
    # Go left left and no left then right but again check from left
    root = root.left
    while(root is not None):
        if isLeaf(root) is not True:
            res.append(root.data)
        if(root.left is not None):
            root = root.left
        else:
            root = root.right
 
 
def addRightBound(root, res):
    # Go right right and no right then left but again check from right
    root = root.right
    # As we need the reverse of this for Anticlockwise
    # refer above picture for better understanding
    stk = []
    while(root is not None):
        if isLeaf(root) is not True:
            stk.append(root.data)
        if root.right is not None:
            root = root.right
        else:
            root = root.left
 
    while(len(stk) != 0):
        res.append(stk.pop(-1))
 
         
# its kind of preorder
def addLeaves(root, res):
    if root is None:
        return
    if isLeaf(root) is True:
        res.append(root.data)  # just store leaf nodes
        return
    addLeaves(root.left, res)
    addLeaves(root.right, res)
 
 
def boundary(root, res):
    # Your code here
    if root is None:
        return
    if isLeaf(root) is not True:
        res.append(root.data)  # if leaf then its done by addLeaf
    addLeftBound(root, res)
    addLeaves(root, res)
    addRightBound(root, res)
 
 
if __name__ == '__main__':
    root = Node(20)
    root.left = Node(8)
    root.left.left = Node(4)
    root.left.right = Node(12)
    root.left.right.left = Node(10)
    root.left.right.right = Node(14)
    root.right = Node(22)
    root.right.right = Node(25)
 
    res = []
    boundary(root, res)
    for i in res:
        print(i)
 
# This code is contributed by Yash Agarwal(yashagarwal2852002)
C#
Javascript
Output
20 8 4 10 14 25 22 
Time Complexity: O(n) where n is the number of nodes in binary tree.
Auxiliary Space: O(n) 





Like
208
Previous
Iterative diagonal traversal of binary tree
Next
Density of Binary Tree in One Traversal
Related Articles
1.
Iterative Boundary Traversal of Complete Binary tree
2.
Boundary Level order traversal of a Binary Tree
3.
Boundary Root to Leaf Path traversal of a Binary Tree
4.
Construct Full Binary Tree using its Preorder traversal and Preorder traversal of its mirror tree
5.
Pre Order, Post Order and In Order traversal of a Binary Tree in one traversal | (Using recursion)
6.
Level order traversal of Binary Tree using Morris Traversal
7.
Check if a binary tree is subtree of another binary tree using preorder traversal : Iterative
8.
Sum of all the Boundary Nodes of a Binary Tree
9.
Given level order traversal of a Binary Tree, check if the Tree is a Min-Heap
10.
Complexity of different operations in Binary tree, Binary Search Tree and AVL tree
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
Ravi Teja Chowdary
joshiyogesh
shrikanth13
Akanksha_Rai
Sanjiban Bairagya
gp6
decode2207
prasanna1995
adityakumar129
hardikkoriintern
rbkraj000
sniggy
deaddemon
yashagarwal2852002
Article Tags :
Accolite
Amazon
Hike
Kritikal Solutions
Microsoft
Morgan Stanley
Payu
Snapdeal
Tree
Practice Tags :
Accolite
Amazon
Hike
Kritikal Solutions
Microsoft
Morgan Stanley
Payu
Snapdeal
Tree
Improve Article
Report Issue