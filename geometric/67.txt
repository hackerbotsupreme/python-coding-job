Convex Hull using Jarvis’ Algorithm or Wrapping

Difficulty Level : Hard
Last Updated : 28 Nov, 2022
Read
Discuss(110+)
Courses
Practice
Video
Given a set of points in the plane. the convex hull of the set is the smallest convex polygon that contains all the points of it.
 



We strongly recommend to see the following post first. 
How to check if two given line segments intersect?
The idea of Jarvis’s Algorithm is simple, we start from the leftmost point (or point with minimum x coordinate value) and we keep wrapping points in counterclockwise direction. 

The big question is, given a point p as current point, how to find the next point in output? 

The idea is to use orientation() here. Next point is selected as the point that beats all other points at counterclockwise orientation, i.e., next point is q if for any other point r, we have “orientation(p, q, r) = counterclockwise”. 

 Algorithm:
Step 1) Initialize p as leftmost point. 
Step 2) Do following while we don’t come back to the first (or leftmost) point. 
            2.1) The next point q is the point, such that the triplet (p, q, r) is counter clockwise for any other point r. 

                    To find this, we simply initialize q as next point, then we traverse through all points. 



                    For any point i, if i is more counter clockwise, i.e., orientation(p, i, q) is counter clockwise, then we update q as i. 

                    Our final value of q is going to be the most counter clockwise point. 
           2.2) next[p] = q (Store q as next of p in the output convex hull). 
           2.3) p = q (Set p as q for next iteration).
 



 

Recommended: Please solve it on “PRACTICE” first, before moving on to the solution.
Below is the implementation of above algorithm. 
 

C++
Java
Python3
# Python3 program to find convex hull of a set of points. Refer 
# https://www.geeksforgeeks.org/orientation-3-ordered-points/
# for explanation of orientation()
  
# point class with x, y as point 
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
  
def Left_index(points):
      
    '''
    Finding the left most point
    '''
    minn = 0
    for i in range(1,len(points)):
        if points[i].x < points[minn].x:
            minn = i
        elif points[i].x == points[minn].x:
            if points[i].y > points[minn].y:
                minn = i
    return minn
  
def orientation(p, q, r):
    '''
    To find orientation of ordered triplet (p, q, r). 
    The function returns following values 
    0 --> p, q and r are collinear 
    1 --> Clockwise 
    2 --> Counterclockwise 
    '''
    val = (q.y - p.y) * (r.x - q.x) - \
          (q.x - p.x) * (r.y - q.y)
  
    if val == 0:
        return 0
    elif val > 0:
        return 1
    else:
        return 2
  
def convexHull(points, n):
      
    # There must be at least 3 points 
    if n < 3:
        return
  
    # Find the leftmost point
    l = Left_index(points)
  
    hull = []
      
    '''
    Start from leftmost point, keep moving counterclockwise 
    until reach the start point again. This loop runs O(h) 
    times where h is number of points in result or output. 
    '''
    p = l
    q = 0
    while(True):
          
        # Add current point to result 
        hull.append(p)
  
        '''
        Search for a point 'q' such that orientation(p, q, 
        x) is counterclockwise for all points 'x'. The idea 
        is to keep track of last visited most counterclock- 
        wise point in q. If any point 'i' is more counterclock- 
        wise than q, then update q. 
        '''
        q = (p + 1) % n
  
        for i in range(n):
              
            # If i is more counterclockwise 
            # than current q, then update q 
            if(orientation(points[p], 
                           points[i], points[q]) == 2):
                q = i
  
        '''
        Now q is the most counterclockwise with respect to p 
        Set p as q for next iteration, so that q is added to 
        result 'hull' 
        '''
        p = q
  
        # While we don't come to first point
        if(p == l):
            break
  
    # Print Result 
    for each in hull:
        print(points[each].x, points[each].y)
  
# Driver Code
points = []
points.append(Point(0, 3))
points.append(Point(2, 2))
points.append(Point(1, 1))
points.append(Point(2, 1))
points.append(Point(3, 0))
points.append(Point(0, 0))
points.append(Point(3, 3))
  
convexHull(points, len(points))
  
# This code is contributed by 
# Akarsh Somani, IIIT Kalyani
C#
Javascript
Output: The output is points of the convex hull. 
 

(0, 3)
(0, 0)
(3, 0)
(3, 3)
Time Complexity:  O(m * n), where n is number of input points and m is number of output or hull points (m <= n).  For every point on the hull we examine all the other points to determine the next point.

Worst case, Time complexity: O(n2).  The worst case occurs when all the points are on the hull (m = n).

Auxiliary Space: O(n), since n extra space has been taken.
Set 2- Convex Hull (Graham  Scan) 
Note : The above code may produce different results for different order of inputs, when there are collinear points in the convex hull. For example, it produces output as (0, 3) (0, 0) (3, 0) (3, 3) for input (0, 3), (0, 0), (0, 1), (3, 0), (3, 3) and output as (0, 3) (0, 1) (0, 0) (3, 0) (3, 3) for input as (0, 3), (0, 1), (0, 0), (3, 0), (3, 3). We generally need the farthest next point in case of collinear, we can get the desired result in case of collinear points by adding one more if condition. Please refer this modified code.
Sources: 
http://www.cs.uiuc.edu/~jeffe/teaching/373/notes/x05-convexhull.pdf 
http://www.dcs.gla.ac.uk/~pat/52233/slides/Hull1x1.pdf
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above
 





Like
50
Previous
Find number of diagonals in n sided convex polygon
Next
Convex Hull using Graham Scan
Related Articles
1.
Dynamic Convex hull | Adding Points to an Existing Convex Hull
2.
Convex Hull using Divide and Conquer Algorithm
3.
Convex Hull | Monotone chain algorithm
4.
Quickhull Algorithm for Convex Hull
5.
Convex Hull using Graham Scan
6.
Perimeter of Convex hull for a given set of points
7.
Deleting points from Convex Hull
8.
Tangents between two Convex Polygons
9.
Find number of diagonals in n sided convex polygon
10.
Number of ways a convex polygon of n+2 sides can split into triangles by connecting vertices
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
princi singh
akarshsomani
duang
avanitrachhadiya2155
sagar0719kumar
simmytarika5
lucidcoder121
rishavpgl4
Article Tags :
DSA
Geometric
Mathematical
Practice Tags :
Geometric
Mathematical
Improve Article
Report Issue