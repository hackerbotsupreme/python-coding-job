Find the Missing Point of Parallelogram

Difficulty Level : Medium
Last Updated : 03 Aug, 2022
Read
Discuss
Courses
Practice
Video
Given three coordinate points A, B and C, find the missing point D such that ABCD can be a parallelogram.
Examples : 
 

Input : A = (1, 0)
        B = (1, 1)
        C = (0, 1)
Output : 0, 0
Explanation:
The three input points form a unit
square with the point (0, 0)

Input : A = (5, 0)
        B = (1, 1)
        C = (2, 5)
Output : 6, 4
As shown in below diagram, there can be multiple possible outputs, we need to print any one of them. 
 

Parallelogram

 

Recommended Problem
Missing Point of a Parallelogram
Mathematical
Geometric
+1 more
Solve Problem
Submission count: 2.4K
A quadrilateral is said to be a parallelogram if its opposite sides are parallel and equal in length. 
 

quadrilateral 

As weâ€™re given three points of the parallelogram, we can find the slope of the missing sides as well as their lengths. 
The algorithm can be explained as follows
Let R be the missing point. Now from definition, we have 
 

Length of PR = Length of QS = L1 (Opposite sides are equal)
Slope of PR = Slope of QS = M1 (Opposite sides are parallel)
Length of PQ = Length of RS = L2 (Opposite sides are equal)
Slope of PQ= Slope of RS = M2 (Opposite sides are parallel)
Thus we can find the points at a distance L1 from P having slope M1 as mentioned in below article : 
Find points at a given distance on a line of given slope.
Now one of the points will satisfy the above conditions which can easily be checked (using either condition 3 or 4)

Below is the implementation of the above approach: 

C++
Java
Python3
# Python program to find missing point of a
# parallelogram
 
import math as Math
FLOAT_MAX = 3.40282e+38
 
# given a source point, slope(m) of line
# passing through it this function calculates
# and return two points at a distance l away
# from the source
 
 
def findPoints(source, m, l):
    a = [0] * (2)
    b = [0] * (2)
 
    # slope is 0
    if (m == 0):
        a[0] = source[0] + l
        a[1] = source[1]
 
        b[0] = source[0] - l
        b[1] = source[1]
    # slope if infinity
    elif (m == FLOAT_MAX):
        a[0] = source[0]
        a[1] = source[1] + l
 
        b[0] = source[0]
        b[1] = source[1] - l
    # normal case
    else:
        dx = (l / ((1 + (m * m)) ** 0.5))
        dy = m * dx
        a[0] = source[0] + dx
        a[1] = source[1] + dy
        b[0] = source[0] - dx
        b[1] = source[1] - dy
 
    return [a, b]
 
 
# given two points, this function calculates
# the slope of the line/ passing through the
# points
def findSlope(p, q):
    if (p[1] == q[1]):
        return 0
    if (p[0] == q[0]):
        return FLOAT_MAX
    return (q[1] - p[1]) / (q[0] - p[0])
 
 
# calculates the distance between two points
def findDistance(p, q):
    return Math.sqrt(Math.pow((q[0] - p[0]), 2) + Math.pow((q[1] - p[1]), 2))
 
 
# given three points, it prints a point such
# that a parallelogram is formed
def findMissingPoint(a, b, c):
    # calculate points originating from a
    d = findPoints(a, findSlope(b, c), findDistance(b, c))
 
    # now check which of the two points satisfy
    # the conditions
    if (findDistance(d[0], c) == findDistance(a, b)):
        print(f"{(int)(d[0][0])}, {(int)(d[0][1])}")
 
    else:
        print(f"{(int)(d[1][0])}, {(int)(d[1][1])}")
 
 
# Driver code
Point1 = [1, 0]
Point2 = [1, 1]
Point3 = [0, 1]
findMissingPoint(Point1, Point2, Point3)
 
Point1 = [5, 0]
Point2 = [1, 1]
Point3 = [2, 5]
findMissingPoint(Point1, Point2, Point3)
 
# The code is contributed by Saurabh Jaiswal
C#
Javascript
Output : 
 

0, 0
6, 4
Time Complexity: O(log(log n)) since using inbuilt sqrt and log functions 
Auxiliary Space: O(1)

Alternative Approach: 
 

parallelogram

Since the opposite sides are equal, AD = BC and AB = CD, we can calculate the co-ordinates of the missing point (D) as: 
 

AD = BC
(Dx - Ax, Dy - Ay) = (Cx - Bx, Cy - By)
Dx = Ax + Cx - Bx 
Dy = Ay + Cy - By
References: https://math.stackexchange.com/questions/887095/find-the-4th-vertex-of-the-parallelogram
Below is the implementation of above approach:
 

C++
Java
Python 3
# Python 3 program to find missing point
# of a parallelogram
 
# Main method
if __name__ == "__main__":
     
    # coordinates of A
     
    ax, ay = 5, 0
     
    # coordinates of B
     
    bx ,by = 1, 1
     
    # coordinates of C
     
    cx ,cy = 2, 5
     
    print(ax + cx - bx , ",", ay + cy - by)
 
# This code is contributed by Smitha
C#
PHP
Javascript
Output: 
 

6, 4
Time Complexity: O(1) 
Auxiliary Space: O(1)

This article is contributed by Aarti_Rathi and Ashutosh Kumar ðŸ˜€ and Abhishek Sharma. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
 



Like
Previous
Check whether four points make a parallelogram
Next
How to check if a given point lies inside or outside a polygon?
Related Articles
1.
Find all possible coordinates of parallelogram
2.
Find area of parallelogram if vectors of two adjacent sides are given
3.
Program to find the Area of a Parallelogram
4.
Find time required to reach point N from point 0 according to given rules
5.
Check whether four points make a parallelogram
6.
Program for Circumference of a Parallelogram
7.
Area of a triangle inside a parallelogram
8.
Perimeter and Area of Varignon's Parallelogram
9.
Program to calculate area of a parallelogram
10.
Length of a Diagonal of a Parallelogram using the length of Sides and the other Diagonal