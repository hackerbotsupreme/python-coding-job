Number of Triangles that can be formed given a set of lines in Euclidean Plane

Difficulty Level : Medium
Last Updated : 23 Jun, 2022
Read
Discuss
Courses
Practice
Video
Given a set L = {l1, l2, ………, ln} of ‘n’ distinct lines on the Euclidean Plane. The ith line is given by an equation in the form aix + biy = ci. Find the number of triangles that can be formed using the lines in the set L. Note that no two pairs of lines intersect at the same point. 
Note: This problem doesn’t mention that the lines can’t be parallel which makes the problem difficult to solve.

Examples: 

Input: a[] = {1, 2, 3, 4}
       b[] = {2, 4, 5, 5}
       c[] = {5, 7, 8, 6}
Output: 2
The number of triangles that can be formed are: 2

Input: a[] = {1, 2, 3, 2, 4, 1, 2, 3, 4, 5}
       b[] = {2, 4, 6, 3, 6, 5, 10, 15, 20, 25}
       c[] = {3, 5, 11, 10, 9, 17, 13, 11, 7, 3}
Output: 30
The number of triangles that can be formed are: 30
Naive Algorithm
The naive algorithm can be described as: 

Pick up 3 arbitrary lines from the set L.
Now check if a triangle can be formed using the selected 3 lines. This can be done easily by checking that none of them is pairwise parallel.
Increment the counter if the triangle can be formed. 
 
Time Complexity: There are nC3 triplets of lines. For each triplet, we have to do 3 comparisons to check that any 2 lines are not parallel which means the check can be done in O(1) time. This makes the naive algorithm O(n3).

Efficient Algorithm
This can also be achieved in O(n log n). The logic behind the efficient algorithm is described below.
We divide the set L in various subsets. The formation of subsets is based on slopes i.e. all the lines in a particular subset have the same slope i.e. they are parallel to each other.

Let us consider three sets (say A, B and C). For a particular set (say A) the lines belonging to this are all parallel to each other. If we have A, B, and C, we can pick one line from each set to get a triangle because none of these lines will be parallel. By making the subsets we have ensured that no two lines which are parallel are being picked together.

SubsetOfParallelLines



Now if we have only these 3 subsets, 

Number of triangles = (Number of ways to pick a line from A) * 
                      (Number of ways to pick a line from B) * 
                      (Number of ways to pick a line from C) 
                   = m1*m2*m3
Here m1 is count of elements with first slope (in Set A)
Here m2 is count of elements with first slope (in Set B)
Here m3 is count of elements with first slope (in Set C)
Similarly, if we have 4 subsets, we can extend this logic to get, 
Number of triangles = m1*m2*m3 + m1*m2*m4 + m1*m3*m4 + m2*m3*m4

For number of subsets greater than 3, If we have ‘k’ subsets, our task is to find the sum of number of elements of the subset taken 3 at a time. This can be done by maintaining a count array. We make a count array where counti denotes the count of the ith subset of parallel lines. 

We one by one compute following values.
sum1 = m1 + m2 + m3 .....
sum2 = m1*m2 + m1*m3 + ... + m2*m3 + m2*m4 + ...
sum3 = m1*m2*m3 + m1*m2*m4 + ...... m2*m3*m4 + ....
sum3 gives our final answer
C++
Java
Python3
#  Python program to find the number of
#  triangles that can be formed
#  using a set of lines in Euclidean
#  Plane
import math
EPSILON = 1.0842e-19
 
# double variables can't be checked precisely
# using '==' this function returns true if
# the double variables are equal
 
 
def compareDoubles(A, B):
    diff = A-B
    return (diff < EPSILON) and (-diff < EPSILON)
 
#  This function returns the number of triangles
#  for a given set of lines
 
 
def numberOfTringles(a, b, c, n):
    # slope array stores the slope of lines
    slope = []
 
    for i in range(0, n):
        slope.append((a[i]*1.0)/b[i])
 
    # slope array is sorted so that all lines
    # with same slope come together
    slope.sort()
 
    # After sorting slopes, count different
    # slopes. k is index in count[].
    k = 0
    count = []
    this_count = 1  # Count of current slope
 
    for i in range(1, n):
        if compareDoubles(slope[i], slope[i-1]):
            this_count = this_count + 1
        else:
            count.append(this_count)
            k = k + 1
            this_count = 1
 
    count.append(this_count)
    k = k + 1
 
    # calculating sum1 (Sum of all slopes)
    # sum1 = m1 + m2 + ...
    sum1 = 0
    for i in range(0, k):
        sum1 += count[i]
 
    # calculating sum2. sum2 = m1*m2 + m2*m3 + ...
    sum2 = 0
    temp = []  # Needed for sum3
    for i in range(0, k):
        temp.append(count[i]*(sum1-count[i]))
        sum2 += temp[i]
 
    sum2 = math.floor(sum2/2)
 
    # calculating sum3 which gives the final answer
    # m1 * m2 * m3 + m2 * m3 * m4 + ...
    sum3 = 0
    for i in range(0, k):
        sum3 += count[i]*(sum2-temp[i])
 
    sum3 = math.floor(sum3/3)
 
    return sum3
 
 
# Driver Code
# lines are stored as arrays of a, b
# and c for 'ax+by=c'
a = [1, 2, 3, 4]
b = [2, 4, 5, 5]
c = [5, 7, 8, 6]
 
# n is the number of lines
n = len(a)
 
print("The number of triangles that can be formed are: ",
      numberOfTringles(a, b, c, n))
 
# The code is contributed by Gautam goel (gautamgoel962)
C#
Javascript
Output: 

The number of triangles that can be formed are: 2
Time Complexity: All the loops in the code are O(n). The time complexity in this implementation is thus driven by the sort function used to sort the slope array. This makes the algorithm O(nlogn).
Auxiliary Space: O(n)

This article is contributed by Aarti_Rathi and Aanya Jindal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
 

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
1
Previous
Check if right triangle possible from given area and hypotenuse
Next
Program to calculate area of Circumcircle of an Equilateral Triangle
Related Articles
1.
Number of triangles formed from a set of points on three lines
2.
Total number of triangles formed when there are H horizontal and V vertical lines
3.
Maximum number of region in which N non-parallel lines can divide a plane
4.
Find number of unique triangles among given N triangles
5.
Number of triangles that can be formed with given N points
6.
Number of triangles in a plane if no more than two points are collinear
7.
Check if N given lines can be intersected by K vertical lines
8.
Python - Find the maximum number of triangles with given points on three lines
9.
Maximum count of Equilateral Triangles that can be formed within given Equilateral Triangle
10.
Find minimum y coordinates from set of N lines in a plane
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
Stream_Cipher
rdtank
gautamgoel962
codewithrathi
Article Tags :
Geometric-Lines
triangle
DSA
Geometric
Practice Tags :
Geometric
Improve Article
Report Issue