Tug of War

Difficulty Level : Hard
Last Updated : 03 Aug, 2022
Read
Discuss(160+)
Courses
Practice
Video
Given a set of n integers, divide the set in two subsets of n/2 sizes each such that the absolute difference of the sum of two subsets is as minimum as possible. If n is even, then sizes of two subsets must be strictly n/2 and if n is odd, then size of one subset must be (n-1)/2 and size of other subset must be (n+1)/2.
For example, let given set be {3, 4, 5, -3, 100, 1, 89, 54, 23, 20}, the size of set is 10. Output for this set should be {4, 100, 1, 23, 20} and {3, 5, -3, 89, 54}. Both output subsets are of size 5 and sum of elements in both subsets is same (148 and 148). 
Let us consider another example where n is odd. Let given set be {23, 45, -34, 12, 0, 98, -99, 4, 189, -1, 4}. The output subsets should be {45, -34, 12, 98, -1} and {23, 0, -99, 4, 189, 4}. The sums of elements in two subsets are 120 and 121 respectively.
The following solution tries every possible subset of half size. If one subset of half size is formed, the remaining elements form the other subset. We initialize current set as empty and one by one build it. There are two possibilities for every element, either it is part of current set, or it is part of the remaining elements (other subset). We consider both possibilities for every element. When the size of current set becomes n/2, we check whether this solutions is better than the best solution available so far. If it is, then we update the best solution.
Following is the implementation for Tug of War problem. It prints the required arrays. 
 

C++
Java
Python3
# Python3 program for above approach
 
# function that tries every possible
# solution by calling itself recursively
def TOWUtil(arr, n, curr_elements, no_of_selected_elements,
            soln, min_diff, Sum, curr_sum, curr_position):
     
    # checks whether the it is going
    # out of bound
    if (curr_position == n):
        return
 
    # checks that the numbers of elements
    # left are not less than the number of
    # elements required to form the solution
    if ((int(n / 2) - no_of_selected_elements) >
                          (n - curr_position)):
        return
 
    # consider the cases when current element
    # is not included in the solution
    TOWUtil(arr, n, curr_elements, no_of_selected_elements,
            soln, min_diff, Sum, curr_sum, curr_position + 1)
 
    # add the current element to the solution
    no_of_selected_elements += 1
    curr_sum = curr_sum + arr[curr_position]
    curr_elements[curr_position] = True
 
    # checks if a solution is formed
    if (no_of_selected_elements == int(n / 2)):
         
        # checks if the solution formed is better
        # than the best solution so far
        if (abs(int(Sum / 2) - curr_sum) < min_diff[0]):
            min_diff[0] = abs(int(Sum / 2) - curr_sum)
            for i in range(n):
                soln[i] = curr_elements[i]
    else:
         
        # consider the cases where current
        # element is included in the solution
        TOWUtil(arr, n, curr_elements, no_of_selected_elements,
                soln, min_diff, Sum, curr_sum, curr_position + 1)
 
    # removes current element before returning
    # to the caller of this function
    curr_elements[curr_position] = False
 
# main function that generate an arr
def tugOfWar(arr, n):
     
    # the boolean array that contains the
    # inclusion and exclusion of an element
    # in current set. The number excluded
    # automatically form the other set
    curr_elements = [None] * n
 
    # The inclusion/exclusion array
    # for final solution
    soln = [None] * n
 
    min_diff = [999999999999]
 
    Sum = 0
    for i in range(n):
        Sum += arr[i]
        curr_elements[i] = soln[i] = False
 
    # Find the solution using recursive
    # function TOWUtil()
    TOWUtil(arr, n, curr_elements, 0,
            soln, min_diff, Sum, 0, 0)
 
    # Print the solution
    print("The first subset is: ")
    for i in range(n):
        if (soln[i] == True):
            print(arr[i], end = " ")
    print()
    print("The second subset is: ")
    for i in range(n):
        if (soln[i] == False):
            print(arr[i], end = " ")
 
# Driver Code
if __name__ == '__main__':
 
    arr = [23, 45, -34, 12, 0, 98,
               -99, 4, 189, -1, 4]
    n = len(arr)
    tugOfWar(arr, n)
 
# This code is contributed by PranchalK
C#
PHP
Javascript
Output: 

The first subset is: 45 -34 12 98 -1
The second subset is: 23 0 -99 4 189 4
Time Complexity: O(2^n)
This article is compiled by Ashish Anand and reviewed by GeeksforGeeks team. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
 

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
65
Previous
Count all possible Paths between two Vertices
Next
8 queen problem
Related Articles
1.
What is the difference between Backtracking and Recursion?
2.
4 Queens Problem
3.
Allocate minimum number of pages (Non Consecutive)
4.
Find all Unique Subsets of a given Set
5.
Find K numbers in a given range [L, R] such that their bitwise XOR is X
6.
Find all even sum paths in given Binary Search Tree
7.
Find X and Y from their sum, difference, product, division and remainder
8.
Count of Subsets that can be partitioned into two non empty sets with equal Sum
9.
Count of Possible paths of given Matrix having Bitwise XOR equal to K
10.
Count of possible seating arrangements in Cinema hall to maintain Social Distancing
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
rathbhupendra
PranchalKatiyar
29AjayKumar
ManasChhabra2
nidhi_biet
rishabhmittal
Rajput-Ji
simranarora5sos
20je0643
Article Tags :
Backtracking
Practice Tags :
Backtracking