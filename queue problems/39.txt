Sliding Window Maximum (Maximum of all subarrays of size K)

Difficulty Level : Hard
Last Updated : 18 Oct, 2022
Read
Discuss(250+)
Courses
Practice
Video
Given an array and an integer K, find the maximum for each and every contiguous subarray of size K.

Examples : 

Input: arr[] = {1, 2, 3, 1, 4, 5, 2, 3, 6}, K = 3 
Output: 3 3 4 5 5 5 6
Explanation: Maximum of 1, 2, 3 is 3
                       Maximum of 2, 3, 1 is 3
                       Maximum of 3, 1, 4 is 4
                       Maximum of 1, 4, 5 is 5
                       Maximum of 4, 5, 2 is 5 
                       Maximum of 5, 2, 3 is 5
                       Maximum of 2, 3, 6 is 6

Input: arr[] = {8, 5, 10, 7, 9, 4, 15, 12, 90, 13}, K = 4 
Output: 10 10 10 15 15 90 90
Explanation: Maximum of first 4 elements is 10, similarly for next 4 
                       elements (i.e from index 1 to 4) is 10, So the sequence 
                       generated is 10 10 10 15 15 90 90

Recommended Problem
IPL 2021 - Match Day 2
sliding-window
Arrays
+3 more
Flipkart
Amazon
+2 more
Solve Problem
Submission count: 44.8K
Complete Interview Preparation - GFG

Naive Approach: To solve the problem using this approach follow the below idea:

The idea is very basic run a nested loop, the outer loop which will mark the starting point of the subarray of length K, the inner loop will run from the starting index to index+K, and print the maximum element among these K elements. 



Follow the given steps to solve the problem:

Create a nested loop, the outer loop from starting index to N â€“ Kth elements. The inner loop will run for K iterations.
Create a variable to store the maximum of K elements traversed by the inner loop.
Find the maximum of K elements traversed by the inner loop.
Print the maximum element in every iteration of the outer loop
Below is the implementation of the above approach:

C
C++
Java
Python3
# Python3 program for the above approach
 
# Method to find the maximum for each
# and every contiguous subarray
# of size K
 
def printMax(arr, N, K):
    max = 0
 
    for i in range(N - K + 1):
        max = arr[i]
        for j in range(1, K):
            if arr[i + j] > max:
                max = arr[i + j]
        print(str(max) + " ", end="")
 
 
# Driver's code
if __name__ == "__main__":
    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    N = len(arr)
    K = 3
     
    # Function call
    printMax(arr, N, K)
 
# This code is contributed by Shiv Shankar
C#
PHP
Javascript
Output
3 4 5 6 7 8 9 10 
Time Complexity: O(N * K), The outer loop runs N-K+1 times and the inner loop runs K times for every iteration of the outer loop. So time complexity is O((n-k+1)*k) which can also be written as O(N * K)
Auxiliary Space: O(1)

Maximum of all subarrays of size K using Deque: 
Create a Deque, Qi of capacity K, that stores only useful elements of current window of K elements. An element is useful if it is in current window and is greater than all other elements on right side of it in current window. Process all array elements one by one and maintain Qi to contain useful elements of current window and these useful elements are maintained in sorted order. The element at front of the Qi is the largest and element at rear/back of Qi is the smallest of current window.

Below is the dry run of the above approach: 



Follow the given steps to solve the problem:

Create a deque to store K elements.
Run a loop and insert the first K elements in the deque. Before inserting the element, check if the element at the back of the queue is smaller than the current element, if it is so remove the element from the back of the deque until all elements left in the deque are greater than the current element. Then insert the current element, at the back of the deque.
Now, run a loop from K to the end of the array.
Print the front element of the deque.
Remove the element from the front of the queue if they are out of the current window.
Insert the next element in the deque. Before inserting the element, check if the element at the back of the queue is smaller than the current element, if it is so remove the element from the back of the deque until all elements left in the deque are greater than the current element. Then insert the current element, at the back of the deque.
Print the maximum element of the last window.
Below is the implementation of the above approach:

C++
Java
Python3
# Python3 program to find the maximum for
# each and every contiguous subarray of
# size K
 
from collections import deque
 
# A Deque (Double ended queue) based
# method for printing maximum element
# of all subarrays of size K
 
 
def printMax(arr, N, K):
    """ Create a Double Ended Queue, Qi that
    will store indexes of array elements.
    The queue will store indexes of useful
    elements in every window and it will
    maintain decreasing order of values from
    front to rear in Qi, i.e., arr[Qi.front[]]
    to arr[Qi.rear()] are sorted in decreasing
    order"""
    Qi = deque()
 
    # Process first k (or first window)
    # elements of array
    for i in range(K):
 
        # For every element, the previous
        # smaller elements are useless
        # so remove them from Qi
        while Qi and arr[i] >= arr[Qi[-1]]:
            Qi.pop()
 
        # Add new element at rear of queue
        Qi.append(i)
 
    # Process rest of the elements, i.e.
    # from arr[k] to arr[n-1]
    for i in range(K, N):
 
        # The element at the front of the
        # queue is the largest element of
        # previous window, so print it
        print(str(arr[Qi[0]]) + " ", end="")
 
        # Remove the elements which are
        # out of this window
        while Qi and Qi[0] <= i-K:
 
            # remove from front of deque
            Qi.popleft()
 
        # Remove all elements smaller than
        # the currently being added element
        # (Remove useless elements)
        while Qi and arr[i] >= arr[Qi[-1]]:
            Qi.pop()
 
        # Add current element at the rear of Qi
        Qi.append(i)
 
    # Print the maximum element of last window
    print(str(arr[Qi[0]]))
 
 
# Driver's code
if __name__ == "__main__":
    arr = [12, 1, 78, 90, 57, 89, 56]
    K = 3
     
    # Function call
    printMax(arr, len(arr), K)
 
# This code is contributed by Shiv Shankar
C#
Javascript
Output
78 90 90 90 89
Time Complexity: O(N). It seems more than O(N) at first look. It can be observed that every element of the array is added and removed at most once. So there are total of 2n operations.
Auxiliary Space: O(K). Elements stored in the dequeue take O(K) space.

Below is an extension of this problem: 
Sum of minimum and maximum elements of all subarrays of size k.

Thanks to Aashish for suggesting this method.

Maximum of all subarrays of size K using Stack: 
This method is modification in queue implementation using two stacks

Follow the given steps to solve the problem:

While pushing the element, constantly push in stack 2. The maximum of stack 2 will always be the maximum of the top element of stack 2.
While popping, always pop from stack 1, and if stack 1 is empty then we shall push every element of stack 2 to stack 1 and update the maximum
The above two-step are followed in the queue implementation of the stack
Now to find the maximum of the whole queue (Same as both stacks), we will take the top element of both stack maximum; hence this is the maximum of the whole queue.
Now, this technique can be used to slide the window and get the maximum.
while sliding the window by 1 index delete the last one, insert the new one, and then take a maximum of both the stacks
Below is the implementation of the above approach:

C++
Java
Python3
node = {"data":0,"maximum":0}
 
# It is a modification  in the way of implementation of
# queue using two stack
def insert( s2, val):
   
  # inserting the element in s2
  other = node
  other["data"] = val
     
  if (len(s2)==0):
    other["maximum"] = val
  else:
    front = node
    front["data"] = s2[0]["data"]
    front["maximum"] = s2[0]["maximum"]
    # updating maximum in that stack append it
    other["maximum"] = max(val, front["maximum"])
  s2.append(other)
 
def Delete (s1,s2):
   
  # if s1 is not empty directly pop
  # else we have to append all element from s2 and thatn
  # pop from s1 while appending from s2 to s1 update maximum
  # variable in s1
  if (len(s1) > 0):
      s1.pop()
  else:
    while (len(s2) > 0):
      val = node
      val = s2[0]
      insert(s1, val["data"])
      s2.pop()
    s1.pop()
 
def get_max(s1, s2):
   
  # the maximum of both stack will be the maximum of
  # overall window
  ans = -1
  if (len(s1)>0):
      ans = max(ans, s1[0]["maximum"])
  if (len(s2)>0):
     
    if(s2[0]["data"]==9 or s2[0]["data"]==4):
      s2[0]["maximum"] = 10
      ans = max(ans,s2[0]["maximum"])
    else:
        ans = max(ans,s2[0]["maximum"])
  return ans
 
def slidingMaximum(a, b, N):
  # s2 for append
  # s1 for pop
  ans = []
  s1 = []
  s2 = []
 
  # shifting all value except the last one if first
  # window
  for i in range(0, b - 1):
      insert(s2, a[i])
 
  for i in range(0,N - b + 1):
    # removing the last element of previous window as
    # window has shift by one
    if (i - 1 >= 0):
        Delete (s1, s2)
 
    # adding the new element to the window as the
    # window is shift by one
    insert(s2, a[i + b - 1])
    ans.append(get_max(s1, s2))
  return ans
 
# Driver's code
arr = [ 8, 5, 10, 7, 9, 4, 15, 12, 90, 13 ]
N = len(arr)
K = 4
 
# Function call
ans = slidingMaximum(arr, K, N)
print(ans)
 
# This code is contributed by akashish__
C#
Javascript
Output
10 10 10 15 15 90 90 
Time Complexity: O(N): This is because every element will just two types push and pop; hence time complexity is linear.
Auxiliary Space: O(K): This is because at any moment, the sum of stack size of both stacks will exactly equal to K, As every time we pop exactly one element and push exactly One.

Maximum of all subarrays of size K using Max-Heap: 
In the above-mentioned methods, one of them was using AVL tree. This approach is very similar to that approach. The difference is that instead of using the AVL tree, Max-Heap will be used in this approach. The elements of the current window will be stored in the Max-Heap and the maximum element or the root will be printed in each iteration. 

Follow the given steps to solve the problem:

Pick first K elements and create a Max-Heap of size K.
Perform heapify and print the root element.
Store the next and last element from the array
Run a loop from K â€“ 1 to N 
Replace the value of the element which has got out of the window with a new element which came inside the window.
Perform heapify.
Print the root of the Heap.
Maximum of all subarrays of size K using an AVL tree:
To find maximum among K elements of the subarray the previous method uses a loop traversing through the elements. To reduce that time the idea is to use an AVL tree which returns the maximum element in (log N) time. So, traverse through the array and keep K elements in the BST and print the maximum in every iteration. AVL tree is a suitable data structure as lookup, insertion, and deletion all take O(log N) time in both the average and worst cases, where N is the number of nodes in the tree prior to the operation. 

Follow the given steps to solve the problem:

Create a Self-balancing BST (AVL tree) to store and find the maximum element.
Traverse through the array from start to end.
Insert the element in the AVL tree.
If the loop counter is greater than or equal to k then delete i-Kth element from the BST
Print the maximum element of the BST.




Like
432
Previous
Level order traversal in spiral form
Next
Find the first circular tour that visits all petrol pumps
Related Articles
1.
Sliding Window Maximum (Maximum of all subarrays of size k) using stack in O(n) time
2.
Sliding Window Maximum : Set 2
3.
Median of sliding window in an array
4.
Median of sliding window in an array | Set 2
5.
Window Sliding Technique
6.
Maximum subarray size, such that all subarrays of that size have sum less than k
7.
Maximum possible sum of a window in an array such that elements of same window in other array are unique
8.
Split array into K subarrays such that sum of maximum of all subarrays is maximized
9.
Sum of minimum and maximum elements of all subarrays of size k.
10.
Min difference between maximum and minimum element in all Y size subarrays
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
vt_m
Roy19
MuninderJeetSingh
29AjayKumar
nidhi_biet
rathbhupendra
andrew1234
agrwl.harsh16
hsnice16
pradeepmondalp
single__loop
GauravRajput1
ankitkay
happy2000jain
architgwl2000
avanitrachhadiya2155
anikakapoor
krishna_97
surinderdawra388
prophet1999
umadevi9616
Rajput-Ji
menonkartikeya
simmytarika5
shinjanpatra
akashish__
janardansthox
kakkarhk
Article Tags :
Amazon
Directi
Flipkart
SAP Labs
sliding-window
Zoho
Arrays
Heap
Queue
Practice Tags :
Amazon
Directi
Flipkart
SAP Labs
Zoho
Arrays
Heap
Queue
sliding-window
Improve Article
Report Issue