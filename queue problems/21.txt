Detect cycle in an undirected graph using BFS

Difficulty Level : Medium
Last Updated : 15 Dec, 2022
Read
Discuss
Courses
Practice
Video
Given an undirected graph, how to check if there is a cycle in the graph? For example, the following graph has a cycle of 1-0-2-1. 

cycleGraph

Recommended: Please solve it on “PRACTICE” first, before moving on to the solution.
We have discussed cycle detection for the directed graph. We have also discussed a union-find algorithm for cycle detection in undirected graphs.. The time complexity of the union-find algorithm is O(ELogV). Like directed graphs, we can use DFS to detect a cycle in an undirected graph in O(V+E) time. We have discussed DFS based solution for cycle detection in an undirected graph. 

In this article, the BFS based solution is discussed. We do a BFS traversal of the given graph. For every visited vertex ‘v’, if there is an adjacent ‘u’ such that u is already visited and u is not a parent of v, then there is a cycle in the graph. If we don’t find such an adjacent for any vertex, we say that there is no cycle. 


We use a parent array to keep track of the parent vertex for a vertex so that we do not consider the visited parent as a cycle.

Implementation:

C++
Java
Python3
# Python3 program to detect cycle in
# an undirected graph using BFS.
from collections import deque
 
def addEdge(adj: list, u, v):
    adj[u].append(v)
    adj[v].append(u)
 
def isCyclicConnected(adj: list, s, V,
                      visited: list):
 
    # Set parent vertex for every vertex as -1.
    parent = [-1] * V
 
    # Create a queue for BFS
    q = deque()
 
    # Mark the current node as
    # visited and enqueue it
    visited[s] = True
    q.append(s)
 
    while q != []:
 
        # Dequeue a vertex from queue and print it
        u = q.pop()
 
        # Get all adjacent vertices of the dequeued
        # vertex u. If a adjacent has not been visited,
        # then mark it visited and enqueue it. We also
        # mark parent so that parent is not considered
        # for cycle.
        for v in adj[u]:
            if not visited[v]:
                visited[v] = True
                q.append(v)
                parent[v] = u
            elif parent[u] != v:
                return True
 
    return False
 
def isCyclicDisconnected(adj: list, V):
 
    # Mark all the vertices as not visited
    visited = [False] * V
 
    for i in range(V):
        if not visited[i] and \
               isCyclicConnected(adj, i, V, visited):
            return True
    return False
 
# Driver Code
if __name__ == "__main__":
    V = 4
    adj = [[] for i in range(V)]
    addEdge(adj, 0, 1)
    addEdge(adj, 1, 2)
    addEdge(adj, 2, 0)
    addEdge(adj, 2, 3)
 
    if isCyclicDisconnected(adj, V):
        print("Yes")
    else:
        print("No")
 
# This code is contributed by
# sanjeev2552
C#
Javascript
Output


Yes
Time Complexity: The program does a simple BFS Traversal of the graph and the graph is represented using an adjacency list. So the time complexity is O(V+E)
Space Complexity: O(V) for visited vector.





Like
53
Next
Detect cycle in an undirected graph
Related Articles
1.
Detect Cycle in a Directed Graph using BFS
2.
Detect cycle in an undirected graph
3.
Detect cycle in the graph using degrees of nodes of graph
4.
Detect Cycle in a directed graph using colors
5.
Detect cycle in Directed Graph using Topological Sort
6.
Detect a negative cycle in a Graph using Shortest Path Faster Algorithm
7.
Find minimum weight cycle in an undirected graph
8.
Check if there is a cycle with odd weight sum in an undirected graph
9.
Shortest cycle in an undirected unweighted graph
10.
Minimum labelled node to be removed from undirected Graph such that there is no cycle
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
kartik
@kartik
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
mayukh Sengupta
princiraj1992
sanjeev2552
TanmayChakraborty
shubhanshuarya007
sauravraj4
itsok
hardikkoriintern
factworx4i2
Article Tags :
BFS
graph-connectivity
graph-cycle
Graph
Practice Tags :
BFS
Graph
Improve Article
Report Issue