Print Right View of a Binary Tree

Difficulty Level : Medium
Last Updated : 28 Sep, 2022
Read
Discuss(110+)
Courses
Practice
Video
Given a Binary Tree, print the Right view of it. 

The right view of a Binary Tree is a set of nodes visible when the tree is visited from the Right side.

Examples: 

Input:
          1
       /     \
     2        3
   /   \       /  \
  4     5   6    7
                 \
                   8
Output: Right view of the tree is 1 3 7 8

Input:
          1
       /     
     8        
   / 
  7
Output: Right view of the tree is 1 8 7

Recommended Practice
Right View of Binary Tree
Try It!
Right View of a Binary Tree using Recursion:
The idea is to use recursion and keep track of the maximum level also. And traverse the tree in a manner that the right subtree is visited before the left subtree.

Follow the steps below to solve the problem:



Perform Postorder traversal to get the rightmost node first
Maintain a variable name max_level which will store till which it prints the right view
While traversing the tree in a postorder manner if the current level is greater than max_level then print the current node and update max_level by the current level
Below is the implementation of the above approach:

C++
C
Java
Python
# Python program to print right view of Binary Tree
 
# A binary tree node
 
 
class Node:
    # A constructor to create a new Binary tree Node
    def __init__(self, item):
        self.data = item
        self.left = None
        self.right = None
 
# Recursive function to print right view of Binary Tree
# used max_level as reference list ..only max_level[0]
# is helpful to us
 
 
def rightViewUtil(root, level, max_level):
 
    # Base Case
    if root is None:
        return
 
    # If this is the last node of its level
    if (max_level[0] < level):
        print "%d   " % (root.data),
        max_level[0] = level
 
    # Recur for right subtree first, then left subtree
    rightViewUtil(root.right, level+1, max_level)
    rightViewUtil(root.left, level+1, max_level)
 
 
def rightView(root):
    max_level = [0]
    rightViewUtil(root, 1, max_level)
 
 
# Driver program to test above function
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
root.right.left = Node(6)
root.right.right = Node(7)
root.right.left.right = Node(8)
 
rightView(root)
 
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)
C#
Javascript
Output
1    3    7    8    
Right view of Binary Tree using Queue
Time Complexity: O(N), Traversing the Tree having N nodes
Auxiliary Space: O(N), Function Call stack space in the worst case.

Right View of a Binary Tree using Level Order Traversal:
The idea is to use Level Order Traversal as the last node every level gives the right view of the binary tree.

Follow the steps below to solve the problem:

Perform level order traversal on the tree
At every level print the last node of that level
Below is the implementation of above approach:

C++
Java
Python3
# Python3 program to print right
# view of Binary Tree
from collections import deque
 
# A binary tree node
 
 
class Node:
 
    # A constructor to create a new
    # Binary tree Node
    def __init__(self, val):
        self.data = val
        self.left = None
        self.right = None
 
# Function to print Right view of
# binary tree
 
 
def rightView(root):
 
    if root is None:
        return
 
    q = deque()
    q.append(root)
 
    while q:
 
        # Get number of nodes for each level
        n = len(q)
 
        # Traverse all the nodes of the
        # current level
 
        while n > 0:
            n -= 1
 
            # Get the front node in the queue
            node = q.popleft()
 
            # Print the last node of each level
            if n == 0:
                print(node.data, end=" ")
 
            # If left child is not null push it
            # into the queue
            if node.left:
                q.append(node.left)
 
            # If right child is not null push
            # it into the queue
            if node.right:
                q.append(node.right)
 
# Driver code
 
 
# Let's construct the tree as
# shown in example
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
root.right.left = Node(6)
root.right.right = Node(7)
root.right.left.right = Node(8)
 
rightView(root)
 
# This code is contributed by Pulkit Pansari
C#
Javascript
Output
1 3 7 8 
Time Complexity: O(N), where N is the number of nodes in the binary tree.
Auxiliary Space: O(N) since using auxiliary space for queue

This article is contributed by Biswajit Rajak. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above 





Like
59
Previous
Print Left View of a Binary Tree
Next
Right view of Binary Tree using Queue
Related Articles
1.
Print Bottom-Right View of a Binary Tree
2.
Right view of Binary Tree using Queue
3.
Sum of nodes in the right view of the given binary tree
4.
Convert left-right representation of a binary tree to down-right
5.
Print nodes in top view of Binary Tree | Set 2
6.
Print nodes in the Top View of Binary Tree | Set 3
7.
Iterative Method To Print Left View of a Binary Tree
8.
Print Left View of a Binary Tree
9.
Print Nodes in Top View of Binary Tree
10.
Left and Right view of a Generic Tree
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
shrikanth13
SHUBHAMSINGH10
dsnehasish74
mukesh07
pansaripulkit13
divyeshrabadiya07
rajakbiswajit409
chauhanankur94
jana_sayantan
polymatir3j
ishank0106
Article Tags :
Accolite
Adobe
Amazon
MakeMyTrip
Snapdeal
tree-view
Tree
Practice Tags :
Accolite
Adobe
Amazon
MakeMyTrip
Snapdeal
Tree
Improve Article
Report Issue