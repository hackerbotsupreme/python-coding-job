Introduction and Array Implementation of Queue

Difficulty Level : Easy
Last Updated : 10 Dec, 2022
Read
Discuss(60)
Courses
Practice
Video
Similar to Stack, Queue is a linear data structure that follows a particular order in which the operations are performed for storing data. The order is First In First Out (FIFO). One can imagine a queue as a line of people waiting to receive something in sequential order which starts from the beginning of the line. It is an ordered list in which insertions are done at one end which is known as the rear and deletions are done from the other end known as the front. A good example of a queue is any queue of consumers for a resource where the consumer that came first is served first. 
The difference between stacks and queues is in removing. In a stack we remove the item the most recently added; in a queue, we remove the item the least recently added.

Recommended Problem
Implement Queue using array
Arrays
Queue
+1 more
Amazon
Goldman Sachs
Solve Problem
Submission count: 85.9K

Queue Data structure

Basic Operations on Queue: 
enqueue(): Inserts an element at the end of the queue i.e. at the rear end.
dequeue(): This operation removes and returns an element that is at the front end of the queue.
front(): This operation returns the element at the front end without removing it.
rear(): This operation returns the element at the rear end without removing it.
isEmpty(): This operation indicates whether the queue is empty or not.
isFull(): This operation indicates whether the queue is full or not.
size(): This operation returns the size of the queue i.e. the total number of elements it contains.  
Types of Queues: 
Simple Queue: Simple queue also known as a linear queue is the most basic version of a queue. Here, insertion of an element i.e. the Enqueue operation takes place at the rear end and removal of an element i.e. the Dequeue operation takes place at the front end. Here problem is that if we pop some item from front and then rear reach to the capacity of the queue and although there are empty spaces before front means the stack is not full but as per condition in isFull() function, it will show that the stack is full then. To solve this problem we use circular queue.
Circular Queue:  In a circular queue, the element of the queue act as a circular ring. The working of a circular queue is similar to the linear queue except for the fact that the last element is connected to the first element. Its advantage is that the memory is utilized in a better way. This is because if there is an empty space i.e. if no element is present at a certain position in the queue, then an element can be easily added at that position using modulo capacity(%n).
Priority Queue: This queue is a special type of queue. Its specialty is that it arranges the elements in a queue based on some priority. The priority can be something where the element with the highest value has the priority so it creates a queue with decreasing order of values. The priority can also be such that the element with the lowest value gets the highest priority so in turn it creates a queue with increasing order of values. In pre-define priority queue, C++ gives priority to highest value whereas Java gives priority to lowest value.
Dequeue: Dequeue is also known as Double Ended Queue. As the name suggests double ended, it means that an element can be inserted or removed from both ends of the queue, unlike the other queues in which it can be done only from one end. Because of this property, it may not obey the First In First Out property. 

 

Applications of Queue: 
Queue is used when things donâ€™t have to be processed immediately, but have to be processed in First In First Out order like Breadth First Search. This property of Queue makes it also useful in following kind of scenarios.

When a resource is shared among multiple consumers. Examples include CPU scheduling, Disk Scheduling. 
 When data is transferred asynchronously (data not necessarily received at same rate as sent) between two processes. Examples include IO Buffers, pipes, file IO, etc. 
 Queue can be used as an essential component in various other data structures.
Array implementation Of Queue:
For implementing queue, we need to keep track of two indices, front and rear. We enqueue an item at the rear and dequeue an item from the front. If we simply increment front and rear indices, then there may be problems, the front may reach the end of the array. The solution to this problem is to increase front and rear in circular manner.

Steps for enqueue:
Check the queue is full or not
If full, print overflow and exit
If queue is not full, increment tail and add the element
Steps for dequeue:
Check queue is empty or not
if empty, print underflow and exit
if not empty, print element at the head and increment head
Below is a program to implement above operation on queue

C++
C
Java
Python3
# Python3 program for array implementation of queue
 
# Class Queue to represent a queue
class Queue:
 
    # __init__ function
    def __init__(self, capacity):
        self.front = self.size = 0
        self.rear = capacity -1
        self.Q = [None]*capacity
        self.capacity = capacity
     
    # Queue is full when size becomes
    # equal to the capacity
    def isFull(self):
        return self.size == self.capacity
     
    # Queue is empty when size is 0
    def isEmpty(self):
        return self.size == 0
 
    # Function to add an item to the queue.
    # It changes rear and size
    def EnQueue(self, item):
        if self.isFull():
            print("Full")
            return
        self.rear = (self.rear + 1) % (self.capacity)
        self.Q[self.rear] = item
        self.size = self.size + 1
        print("% s enqueued to queue"  % str(item))
 
    # Function to remove an item from queue.
    # It changes front and size
    def DeQueue(self):
        if self.isEmpty():
            print("Empty")
            return
         
        print("% s dequeued from queue" % str(self.Q[self.front]))
        self.front = (self.front + 1) % (self.capacity)
        self.size = self.size -1
         
    # Function to get front of queue
    def que_front(self):
        if self.isEmpty():
            print("Queue is empty")
 
        print("Front item is", self.Q[self.front])
         
    # Function to get rear of queue
    def que_rear(self):
        if self.isEmpty():
            print("Queue is empty")
        print("Rear item is",  self.Q[self.rear])
 
 
# Driver Code
if __name__ == '__main__':
 
    queue = Queue(30)
    queue.EnQueue(10)
    queue.EnQueue(20)
    queue.EnQueue(30)
    queue.EnQueue(40)
    queue.DeQueue()
    queue.que_front()
    queue.que_rear()
C#
Javascript
Output
10 enqueued to queue
20 enqueued to queue
30 enqueued to queue
40 enqueued to queue
10 dequeued from queue
Front item is 20
Rear item is 40
Complexity Analysis:  
Time Complexity
Operations  	Complexity
Enqueue(insertion) 	O(1)
Deque(deletion)   	O(1)
Front(Get front)   	O(1)
Rear(Get Rear)	O(1)
IsFull(Check queue is full or not)	O(1)
IsEmpty(Check queue is empty or not)	O(1)
                           

Auxiliary Space: 
O(N) where N is the size of the array for storing elements.
Advantages of Array Implementation:  
Easy to implement.
A large amount of data can be managed efficiently with ease.
Operations such as insertion and deletion can be performed with ease as it follows the first in first out rule.
Disadvantages of Array Implementation:  
Static Data Structure, fixed size.
If the queue has a large number of enqueue and dequeue operations, at some point (in case of linear increment of front and rear indexes) we may not be able to insert elements in the queue even if the queue is empty (this problem is avoided by using circular queue).
Maximum size of a queue must be defined prior.


Like
Next
Array implementation of queue (Simple)
Related Articles
1.
Should we declare as Queue or Priority Queue while using Priority Queue in Java?
2.
Introduction and Array Implementation of Circular Queue
3.
What is Priority Queue | Introduction to Priority Queue
4.
Array implementation of queue (Simple)
5.
Difference between PriorityQueue and Queue Implementation in Java
6.
Stack and Queue in Python using queue Module
7.
Difference between Circular Queue and Priority Queue
8.
Difference Between Linear Queue and Circular Queue
9.
Difference between Queue and Deque (Queue vs. Deque)
10.
Circular Linked List Implementation of Circular Queue
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
SoumikMondal
rathbhupendra
Archaic
bidibaaz123
govindtomar94
laroracoding
krishna_97
guptavivek0503
shreyasnaphad
kaustubhrai
garvitpr1hev
susobhanakhuli
Article Tags :
Goldman Sachs
Arrays
Queue
Practice Tags :
Goldman Sachs
Arrays
Queue
Report Issue