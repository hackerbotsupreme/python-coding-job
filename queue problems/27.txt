Check whether a given graph is Bipartite or not

Difficulty Level : Medium
Last Updated : 15 Dec, 2022
Read
Discuss(150+)
Courses
Practice
Video
A Bipartite Graph is a graph whose vertices can be divided into two independent sets, U and V such that every edge (u, v) either connects a vertex from U to V or a vertex from V to U. In other words, for every edge (u, v), either u belongs to U and v to V, or u belongs to V and v to U. We can also say that there is no edge that connects vertices of same set.

Bipartite1

A bipartite graph is possible if the graph coloring is possible using two colors such that vertices in a set are colored with the same color. Note that it is possible to color a cycle graph with even cycle using two colors. For example, see the following graph. 

Bipartite2

It is not possible to color a cycle graph with odd cycle using two colors. 

Bipartite3

Algorithm to check if a graph is Bipartite: 
One approach is to check whether the graph is 2-colorable or not using backtracking algorithm m coloring problem. 
Following is a simple algorithm to find out whether a given graph is Bipartite or not using Breadth First Search (BFS). 
1. Assign RED color to the source vertex (putting into set U). 
2. Color all the neighbors with BLUE color (putting into set V). 
3. Color all neighborâ€™s neighbor with RED color (putting into set U). 
4. This way, assign color to all vertices such that it satisfies all the constraints of m way coloring problem where m = 2. 
5. While assigning colors, if we find a neighbor which is colored with same color as current vertex, then the graph cannot be colored with 2 vertices (or graph is not Bipartite) 



Recommended Problem
Bipartite Graph
DFS
Graph
+3 more
Flipkart
Microsoft
+1 more
Solve Problem
Submission count: 99.6K
C++
Java
Python3
# Python program to find out whether a
# given graph is Bipartite or not
 
class Graph():
 
    def __init__(self, V):
        self.V = V
        self.graph = [[0 for column in range(V)] \
                                for row in range(V)]
 
    # This function returns true if graph G[V][V]
    # is Bipartite, else false
    def isBipartite(self, src):
 
        # Create a color array to store colors
        # assigned to all vertices. Vertex
        # number is used as index in this array.
        # The value '-1' of  colorArr[i] is used to
        # indicate that no color is assigned to
        # vertex 'i'. The value 1 is used to indicate
        # first color is assigned and value 0
        # indicates second color is assigned.
        colorArr = [-1] * self.V
 
        # Assign first color to source
        colorArr[src] = 1
 
        # Create a queue (FIFO) of vertex numbers and
        # enqueue source vertex for BFS traversal
        queue = []
        queue.append(src)
 
        # Run while there are vertices in queue
        # (Similar to BFS)
        while queue:
 
            u = queue.pop()
 
            # Return false if there is a self-loop
            if self.graph[u][u] == 1:
                return False;
 
            for v in range(self.V):
 
                # An edge from u to v exists and destination
                # v is not colored
                if self.graph[u][v] == 1 and colorArr[v] == -1:
 
                    # Assign alternate color to this
                    # adjacent v of u
                    colorArr[v] = 1 - colorArr[u]
                    queue.append(v)
 
                # An edge from u to v exists and destination
                # v is colored with same color as u
                elif self.graph[u][v] == 1 and colorArr[v] == colorArr[u]:
                    return False
 
        # If we reach here, then all adjacent
        # vertices can be colored with alternate
        # color
        return True
 
# Driver program to test above function
g = Graph(4)
g.graph = [[0, 1, 0, 1],
            [1, 0, 1, 0],
            [0, 1, 0, 1],
            [1, 0, 1, 0]
            ]
             
print ("Yes" if g.isBipartite(0) else "No")
 
# This code is contributed by Divyanshu Mehta
C#
Javascript
Output
Yes
Time Complexity : O(V*V) as adjacency matrix is used for graph but can be made O(V+E) by using adjacency list
Auxiliary Space: O(V) due to queue and color vector.

The above algorithm works only if the graph is connected. In above code, we always start with source 0 and assume that vertices are visited from it. One important observation is a graph with no edges is also Bipartite. Note that the Bipartite condition says all edges should be from one set to another.

We can extend the above code to handle cases when a graph is not connected. The idea is repeatedly called above method for all not yet visited vertices. 

C++
Java
Python3
# Python3 program to find out whether a
# given graph is Bipartite or not
 
 
class Graph():
 
    def __init__(self, V):
        self.V = V
        self.graph = [[0 for column in range(V)]
                      for row in range(V)]
 
        self.colorArr = [-1 for i in range(self.V)]
 
    # This function returns true if graph G[V][V]
    # is Bipartite, else false
    def isBipartiteUtil(self, src):
 
        # Create a color array to store colors
        # assigned to all vertices. Vertex
        # number is used as index in this array.
        # The value '-1' of self.colorArr[i] is used
        # to indicate that no color is assigned to
        # vertex 'i'. The value 1 is used to indicate
        # first color is assigned and value 0
        # indicates second color is assigned.
 
        # Assign first color to source
 
        # Create a queue (FIFO) of vertex numbers and
        # enqueue source vertex for BFS traversal
        queue = []
        queue.append(src)
 
        # Run while there are vertices in queue
        # (Similar to BFS)
        while queue:
 
            u = queue.pop()
 
            # Return false if there is a self-loop
            if self.graph[u][u] == 1:
                return False
 
            for v in range(self.V):
 
                # An edge from u to v exists and
                # destination v is not colored
                if (self.graph[u][v] == 1 and
                        self.colorArr[v] == -1):
 
                    # Assign alternate color to
                    # this adjacent v of u
                    self.colorArr[v] = 1 - self.colorArr[u]
                    queue.append(v)
 
                # An edge from u to v exists and destination
                # v is colored with same color as u
                elif (self.graph[u][v] == 1 and
                      self.colorArr[v] == self.colorArr[u]):
                    return False
 
        # If we reach here, then all adjacent
        # vertices can be colored with alternate
        # color
        return True
 
    def isBipartite(self):
        self.colorArr = [-1 for i in range(self.V)]
        for i in range(self.V):
            if self.colorArr[i] == -1:
                if not self.isBipartiteUtil(i):
                    return False
        return True
 
 
# Driver Code
g = Graph(4)
g.graph = [[0, 1, 0, 1],
           [1, 0, 1, 0],
           [0, 1, 0, 1],
           [1, 0, 1, 0]]
 
print ("Yes" if g.isBipartite() else "No")
 
# This code is contributed by Anshuman Sharma
C#
Javascript
Output
Yes
 Time complexity: O(V+E).
Auxiliary Space: O(V), because we have a V-size array.


If Graph is represented using Adjacency List .Time Complexity will be O(V+E).

Works for connected as well as disconnected graph.

C++
Java
Python3
def isBipartite(V, adj):
    # vector to store colour of vertex
    # assigning all to -1 i.e. uncoloured
    # colours are either 0 or 1
    # for understanding take 0 as red and 1 as blue
    col = [-1]*(V)
   
    # queue for BFS storing {vertex , colour}
    q = []
   
    #loop incase graph is not connected
    for i in range(V):
       
        # if not coloured
        if (col[i] == -1):
           
            # colouring with 0 i.e. red
            q.append([i, 0])
            col[i] = 0
           
            while len(q) != 0:
                p = q[0]
                q.pop(0)
               
                # current vertex
                v = p[0]
                 
                # colour of current vertex
                c = p[1]
                   
                # traversing vertexes connected to current vertex
                for j in adj[v]:
                   
                    # if already coloured with parent vertex color
                    # then bipartite graph is not possible
                    if (col[j] == c):
                        return False
                   
                    # if uncoloured
                    if (col[j] == -1):
                       
                        # colouring with opposite color to that of parent
                        if c == 1:
                            col[j] = 0
                        else:
                            col[j] = 1
                        q.append([j, col[j]])
     
    # if all vertexes are coloured such that
    # no two connected vertex have same colours
    return True
 
V, E = 4, 8
 
# adjacency list for storing graph
adj = []
adj.append([1,3])
adj.append([0,2])
adj.append([1,3])
adj.append([0,2])
  
ans = isBipartite(V, adj)
 
# returns 1 if bipartite graph is possible
if (ans):
    print("Yes")
     
# returns 0 if bipartite graph is not possible
else:
    print("No")
     
    # This code is contributed by divyesh072019.
C#
Javascript
Output
Yes
Time Complexity: O(V+E)
Auxiliary Space: O(V)

Exercise: 
1. Can DFS algorithm be used to check the bipartite-ness of a graph? If yes, how? 
Solution :

C++
Java
Python3
# Python3 program to find out whether a given
# graph is Bipartite or not using recursion.
V = 4
 
def colorGraph(G, color, pos, c):
     
    if color[pos] != -1 and color[pos] != c:
        return False
         
    # color this pos as c and all its neighbours and 1-c
    color[pos] = c
    ans = True
    for i in range(0, V):
        if G[pos][i]:
            if color[i] == -1:
                ans &= colorGraph(G, color, i, 1-c)
                 
            if color[i] !=-1 and color[i] != 1-c:
                return False
          
        if not ans:
            return False
      
    return True
  
def isBipartite(G):
     
    color = [-1] * V
         
    #start is vertex 0
    pos = 0
    # two colors 1 and 0
    return colorGraph(G, color, pos, 1)
 
if __name__ == "__main__":
  
    G = [[0, 1, 0, 1],
         [1, 0, 1, 0],
         [0, 1, 0, 1],
         [1, 0, 1, 0]]
      
    if isBipartite(G): print("Yes")
    else: print("No")
 
# This code is contributed by Rituraj Jain
C#
Javascript
Output
Yes
Time Complexity: O(V+E)
Auxiliary Space: O(V)

 
References: 
http://en.wikipedia.org/wiki/Graph_coloring 
http://en.wikipedia.org/wiki/Bipartite_graph
This article is compiled by Aashish Barnwal. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above
 





Like
142
Previous
Transpose graph
Next
Applications, Advantages and Disadvantages of Graph
Related Articles
1.
Check if a given graph is Bipartite using DFS
2.
Divide given Graph into Bipartite sets
3.
Maximize number of edges added to convert given Tree into a Bipartite Graph
4.
Maximum number of edges to be added to a tree so that it stays a Bipartite graph
5.
Maximum number of edges in Bipartite graph
6.
Maximum Bipartite Matching
7.
Minimum Bipartite Groups
8.
Check whether an undirected graph contains cycle or not
9.
Check whether given degrees of vertices represent a Graph or Tree
10.
Check whether the structure of given Graph is same as the game of Rock-Paper-Scissor
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
Mudit Verma
anshumansharma
rituraj_jain
danielagfavero
Rajput-Ji
29AjayKumar
aanchaltiwari
dhawangupta08
devendrakolhe5
adityapande88
rrrtnx
rdtank
avanitrachhadiya2155
patel2127
kalrap615
surindertarika1234
anikakapoor
divyesh072019
decode2207
rs1686740
amartyaghoshgfg
simmytarika5
kchandramani5265
vinayedula
factworx4i2
Article Tags :
BFS
DFS
Graph Coloring
Samsung
Graph
Practice Tags :
Samsung
BFS
DFS
Graph