Find if there is a path between two vertices in a directed graph

Difficulty Level : Easy
Last Updated : 27 Jan, 2023
Read
Discuss(50+)
Courses
Practice
Video
Given a Directed Graph and two vertices in it, check whether there is a path from the first given vertex to second. 
Example: 

Consider the following Graph:


Input : (u, v) = (1, 3)
Output: Yes
Explanation: There is a path from 1 to 3, 1 -> 2 -> 3

Input : (u, v) = (3, 6)
Output: No
Explanation: There is no path from 3 to 6
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Approach: Either Breadth First Search (BFS) or Depth First Search (DFS) can be used to find path between two vertices. Take the first vertex as a source in BFS (or DFS), follow the standard BFS (or DFS). If the second vertex is found in our traversal, then return true else return false.

BFS Algorithm: 

The implementation below is using BFS.
Create a queue and a visited array initially filled with 0, of size V where V is a number of vertices.
Insert the starting node in the queue, i.e. push u in the queue and mark u as visited.
Run a loop until the queue is not empty.
Dequeue the front element of the queue. Iterate all its adjacent elements. If any of the adjacent elements is the destination return true. Push all the adjacent and unvisited vertices in the queue and mark them as visited.
Return false as the destination is not reached in BFS.
Implementation: C++, Java, and Python codes that use BFS for finding the reachability of the second vertex from the first vertex. 

C++
Java
Python3
# program to check if there is exist a path between two vertices
# of a graph
  
from collections import defaultdict
   
#This class represents a directed graph using adjacency list representation
class Graph:
   
    def __init__(self,vertices):
        self.V= vertices #No. of vertices
        self.graph = defaultdict(list) # default dictionary to store graph
   
    # function to add an edge to graph
    def addEdge(self,u,v):
        self.graph[u].append(v)
       
     # Use BFS to check path between s and d
    def isReachable(self, s, d):
        # Mark all the vertices as not visited
        visited =[False]*(self.V)
   
        # Create a queue for BFS
        queue=[]
   
        # Mark the source node as visited and enqueue it
        queue.append(s)
        visited[s] = True
   
        while queue:
  
            #Dequeue a vertex from queue 
            n = queue.pop(0)
              
            # If this adjacent node is the destination node,
            # then return true
            if n == d:
                   return True
  
            #  Else, continue to do BFS
            for i in self.graph[n]:
                if visited[i] == False:
                    queue.append(i)
                    visited[i] = True
         # If BFS is complete without visited d
        return False
   
# Create a graph given in the above diagram
g = Graph(4)
g.addEdge(0, 1)
g.addEdge(0, 2)
g.addEdge(1, 2)
g.addEdge(2, 0)
g.addEdge(2, 3)
g.addEdge(3, 3)
  
u =1; v = 3
  
if g.isReachable(u, v):
    print("There is a path from %d to %d" % (u,v))
else :
    print("There is no path from %d to %d" % (u,v))
  
u = 3; v = 1
if g.isReachable(u, v) :
    print("There is a path from %d to %d" % (u,v))
else :
    print("There is no path from %d to %d" % (u,v))
  
#This code is contributed by Neelam Yadav
C#
Javascript
Output
 There is a path from 1 to 3
 There is no path from 3 to 1
Complexity Analysis:  

Time Complexity: O(V+E) where V is number of vertices in the graph and E is number of edges in the graph.
Space Complexity: O(V). 
There can be atmost V elements in the queue. So the space needed is O(V).
DFS Algorithm:



if start==end return 1 since we have to reached our destination.
Mark start as visited.
Traverse directly connected vertices of start and recur the function dfs for every such unexplored vertex.
return 0 if we do not reach our destination.
Implementation:

C++14
Python3
from typing import List, Tuple
  
def dfs(start: int, end: int, visited: List[bool], V: int) -> bool:
    if start == end:
        return True
    visited[start] = True
    for x in adj[start]:
        if not visited[x]:
            if dfs(x, end, visited, V):
                return True
    return False
  
if __name__ == '__main__':
    V = 4
    members = [2, 5, 7, 9]
  
    E = 4
    connections = [ (2, 9), (7, 2), (7, 9), (9, 5) ]
  
    member_to_index = {member: i for i, member in enumerate(members)}
  
    adj = [[] for _ in range(V)]
    for a, b in connections:
        a = member_to_index[a]
        b = member_to_index[b]
        adj[a].append(b)
  
    sender = member_to_index[7]
    receiver = member_to_index[9]
  
    visited = [False] * V
    if dfs(sender, receiver, visited, V):
        print("1")
    else:
        print("0")
JavaScript
Output
1
Complexity Analysis:  

Time Complexity: O(V+E) where V is number of vertices in the graph and E is number of edges in the graph.
Space Complexity: O(V). 
There can be atmost V elements in the stack. So the space needed is O(V).

Trade-offs between BFS and DFS: 

Breadth-First search can be useful to find the shortest path between nodes, and depth-first search may traverse one adjacent node very deeply before ever going into immediate neighbours. 
As an exercise, try an extended version of the problem where the complete path between two vertices is also needed.





Like
46
Previous
Find Shortest distance from a guard in a Bank
Next
Check if a graph is strongly connected | Set 1 (Kosaraju using DFS)
Related Articles
1.
Find if there is a path between two vertices in a directed graph | Set 2
2.
Find if there is a path between two vertices in an undirected graph
3.
Convert the undirected graph into directed graph such that there is no path of length greater than 1
4.
Construct a graph using N vertices whose shortest distance between K pair of vertices is 2
5.
Find K vertices in the graph which are connected to at least one of remaining vertices
6.
Maximize the number of uncolored vertices appearing along the path from root vertex and the colored vertices
7.
Minimum Cost of Simple Path between two nodes in a Directed and Weighted Graph
8.
Pendant Vertices, Non-Pendant Vertices, Pendant Edges and Non-Pendant Edges in Graph
9.
Minimum cost of path between given nodes containing at most K nodes in a directed and weighted graph
10.
Minimum number of edges to be removed from given Graph such that no path exists between given pairs of vertices
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
Shaik Suraz
andrew1234
sanjeev2552
avanitrachhadiya2155
adnanirshad158
amartyaghoshgfg
prophet1999
hardikkoriintern
vikramshirsath177
Article Tags :
BFS
Graph
Practice Tags :
BFS
Graph
Improve Article
Report Issue