Flood Fill Algorithm

Difficulty Level : Medium
Last Updated : 27 Jan, 2023
Read
Discuss
Courses
Practice
Video
Given a 2D screen arr[][] where each arr[i][j] is an integer representing the color of that pixel, also given the location of a pixel (X, Y) and a color C, the task is to replace the color of the given pixel and all the adjacent same-colored pixels with the given color.

Example: 

Input: arr[][] = { 
{1, 1, 1, 1, 1, 1, 1, 1}, 
{1, 1, 1, 1, 1, 1, 0, 0}, 
{1, 0, 0, 1, 1, 0, 1, 1}, 
{1, 2, 2, 2, 2, 0, 1, 0}, 
{1, 1, 1, 2, 2, 0, 1, 0}, 
{1, 1, 1, 2, 2, 2, 2, 0}, 
{1, 1, 1, 1, 1, 2, 1, 1}, 
{1, 1, 1, 1, 1, 2, 2, 1}} 
X = 4, Y = 4, C = 3 
Output: 
1 1 1 1 1 1 1 1 
1 1 1 1 1 1 0 0 
1 0 0 1 1 0 1 1 
1 3 3 3 3 0 1 0 
1 1 1 3 3 0 1 0 
1 1 1 3 3 3 3 0 
1 1 1 1 1 3 1 1 
1 1 1 1 1 3 3 1 
Explanation: 
The values in the given 2D screen indicate colors of the pixels. X and Y are coordinates of the brush, C is the color that should replace the previous color on screen[X][Y] and all surrounding pixels with the same color. Hence all the 2 are replaced with 3. 

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
BFS Approach: The idea is to use BFS traversal to replace the color with the new color. 


Create an empty queue lets say Q.
Push the starting location of the pixel as given in the input and apply replacement color to it.
Iterate until Q is not empty and pop the front node (pixel position).
Check the pixels adjacent to the current pixel and push into the queue if valid (had not been colored with replacement color and have the same color as the old color).
Below is the implementation of the above approach:

C++
Java
Python3
# Python3 implementation of the approach
 
# Function that returns true if
# the given pixel is valid
def isValid(screen, m, n, x, y, prevC, newC):
    if x<0 or x>= m\
       or y<0 or y>= n or\
       screen[x][y]!= prevC\
       or screen[x][y]== newC:
        return False
    return True
 
 
# FloodFill function
def floodFill(screen, 
            m, n, x, 
            y, prevC, newC):
    queue = []
     
    # Append the position of starting
    # pixel of the component
    queue.append([x, y])
 
    # Color the pixel with the new color
    screen[x][y] = newC
 
    # While the queue is not empty i.e. the
    # whole component having prevC color
    # is not colored with newC color
    while queue:
         
        # Dequeue the front node
        currPixel = queue.pop()
         
        posX = currPixel[0]
        posY = currPixel[1]
         
        # Check if the adjacent
        # pixels are valid
        if isValid(screen, m, n, 
                posX + 1, posY, 
                        prevC, newC):
             
            # Color with newC
            # if valid and enqueue
            screen[posX + 1][posY] = newC
            queue.append([posX + 1, posY])
         
        if isValid(screen, m, n, 
                    posX-1, posY, 
                        prevC, newC):
            screen[posX-1][posY]= newC
            queue.append([posX-1, posY])
         
        if isValid(screen, m, n, 
                posX, posY + 1, 
                        prevC, newC):
            screen[posX][posY + 1]= newC
            queue.append([posX, posY + 1])
         
        if isValid(screen, m, n, 
                    posX, posY-1, 
                        prevC, newC):
            screen[posX][posY-1]= newC
            queue.append([posX, posY-1])
 
 
 
# Driver code
screen =[
[1, 1, 1, 1, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1, 0, 0],
[1, 0, 0, 1, 1, 0, 1, 1],
[1, 2, 2, 2, 2, 0, 1, 0],
[1, 1, 1, 2, 2, 0, 1, 0],
[1, 1, 1, 2, 2, 2, 2, 0],
[1, 1, 1, 1, 1, 2, 1, 1],
[1, 1, 1, 1, 1, 2, 2, 1],
    ]
     
# Row of the display
m = len(screen)
 
# Column of the display
n = len(screen[0])
 
# Co-ordinate provided by the user
x = 4
y = 4
 
# Current color at that co-ordinate
prevC = screen[x][y]
 
# New color that has to be filled
newC = 3
 
floodFill(screen, m, n, x, y, prevC, newC)
 
 
# Printing the updated screen
for i in range(m):
    for j in range(n):
        print(screen[i][j], end =' ')
    print()
C#
Javascript
Output
1 1 1 1 1 1 1 1 
1 1 1 1 1 1 0 0 
1 0 0 1 1 0 1 1 
1 3 3 3 3 0 1 0 
1 1 1 3 3 0 1 0 
1 1 1 3 3 3 3 0 
1 1 1 1 1 3 1 1 
1 1 1 1 1 3 3 1 
Time Complexity: O(N*M)
Auxiliary Space: O(N*M)



An Approach using DFS:

Change the color of source row and source column with given color
Do dfs in four direction
Below is the implementation of the above approach:

C++
Python3
from typing import List, Tuple
 
def flood_fill(screen: List[List[int]], sr: int, sc: int, row: int, col: int, source: int, color: int) -> None:
    # Condition for checking out of bounds
    if sr < 0 or sr >= row or sc < 0 or sc >= col:
        return
 
    if screen[sr][sc] != source:
        return
 
    screen[sr][sc] = color
    flood_fill(screen, sr - 1, sc, row, col, source, color) # left
    flood_fill(screen, sr + 1, sc, row, col, source, color) # right
    flood_fill(screen, sr, sc + 1, row, col, source, color) # top
    flood_fill(screen, sr, sc - 1, row, col, source, color) # bottom
 
if __name__ == "__main__":
    screen = [
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0],
        [1, 0, 0, 1, 1, 0, 1, 1],
        [1, 2, 2, 2, 2, 0, 1, 0],
        [1, 1, 1, 2, 2, 0, 1, 0],
        [1, 1, 1, 2, 2, 2, 2, 0],
        [1, 1, 1, 1, 1, 2, 1, 1],
        [1, 1, 1, 1, 1, 2, 2, 1]
    ]
 
    # Row of the display
    m = 8
 
    # Column of the display
    n = 8
 
    # Coordinate provided by the user
    x = 4
    y = 4
 
    # Current color at that coordinate
    prevC = screen[x][y]
 
    # New color that has to be filled
    newC = 3
 
    flood_fill(screen, x, y, m, n, prevC, newC)
 
    # Printing the updated screen
    for i in range(m):
        for j in range(n):
            print(screen[i][j], end=" ")
        print()
Javascript
Output
1 1 1 1 1 1 1 1 
1 1 1 1 1 1 0 0 
1 0 0 1 1 0 1 1 
1 3 3 3 3 0 1 0 
1 1 1 3 3 0 1 0 
1 1 1 3 3 3 3 0 
1 1 1 1 1 3 1 1 
1 1 1 1 1 3 3 1 
Time Complexity: O(m*n)
Auxiliary Space: O(m + n), due to recursive call stack.





Like
20
Next
Flood fill Algorithm - how to implement fill() in paint?
Related Articles
1.
Flood fill Algorithm - how to implement fill() in paint?
2.
Java Applet | Implementing Flood Fill algorithm
3.
Fill missing entries of a magic square
4.
Ways to fill N positions using M colors such that there are exactly K pairs of adjacent different colors
5.
Find a way to fill matrix with 1's and 0's in blank positions
6.
Minimum time required to fill the entire matrix with 1's
7.
Minimum time required to fill given N slots
8.
Queries to count minimum flips required to fill a binary submatrix with 0s only
9.
Fill an empty 2D Matrix with integers from 1 to N*N filled diagonally
10.
Minimize water to fill all tanks connected by given circuit
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
Archana choudhary
@Archana choudhary
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
sweetyty
divyesh072019
divyeshrabadiya07
mukesh07
suresh07
sanskar84
hkdass001
vikramshirsath177
Article Tags :
BFS
Google
Algorithms
Graph
Matrix
Recursion
Practice Tags :
Google
Algorithms
BFS
Graph
Matrix
Recursion
Improve Article
Report Issue