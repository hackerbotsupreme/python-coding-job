Islands in a graph using BFS

Difficulty Level : Medium
Last Updated : 15 Dec, 2022
Read
Discuss
Courses
Practice
Video
Given a boolean 2D matrix, find the number of islands. A group of connected 1s forms an island. For example, the below matrix contains 5 islands

Example:  

Input : mat[][] = {{1, 1, 0, 0, 0},
                   {0, 1, 0, 0, 1},
                   {1, 0, 0, 1, 1},
                   {0, 0, 0, 0, 0},
                   {1, 0, 1, 0, 1} 
Output : 5
What is an island? 
A group of connected 1s forms an island. For example, the below matrix contains 5 islands 

                        {1,  1, 0, 0, 0},
                        {0, 1, 0, 0, 1},
                        {1, 0, 0, 1, 1},
                        {0, 0, 0, 0, 0},
                        {1, 0, 1, 0, 1}
This is a variation of the standard problem: connected component. A connected component of an undirected graph is a subgraph in which every two vertices are connected to each other by a path(s), and which is connected to no other vertices outside the subgraph. 

For example, the graph shown below has three connected components. 
 



 



Recommended: Please solve it on “PRACTICE” first, before moving on to the solution.
A graph where all vertices are connected with each other has exactly one connected component, consisting of the whole graph. Such graph with only one connected component is called as Strongly Connected Graph.
We have discussed a DFS solution for islands is already discussed. This problem can also solved by applying BFS() on each component. In each BFS() call, a component or a sub-graph is visited. We will call BFS on the next un-visited component. The number of calls to BFS() gives the number of connected components. BFS can also be used.

Recommended: Please solve it on “PRACTICE” first, before moving on to the solution.
A cell in 2D matrix can be connected to 8 neighbours. So, unlike standard BFS(), where we process all adjacent vertices, we process 8 neighbours only. We keep track of the visited 1s so that they are not visited again. 

C++
Java
Python3
# A BFS based solution to count number of
# islands in a graph.
from collections import deque
 
# A function to check if a given cell
# (u, v) can be included in DFS
def isSafe(mat, i, j, vis):
     
    return ((i >= 0) and (i < 5) and 
            (j >= 0) and (j < 5) and
          (mat[i][j] and (not vis[i][j])))
 
def BFS(mat, vis, si, sj):
     
    # These arrays are used to get row and
    # column numbers of 8 neighbours of
    # a given cell
    row = [-1, -1, -1, 0, 0, 1, 1, 1]
    col = [-1, 0, 1, -1, 1, -1, 0, 1]
 
    # Simple BFS first step, we enqueue
    # source and mark it as visited
    q = deque()
    q.append([si, sj])
    vis[si][sj] = True
 
    # Next step of BFS. We take out
    # items one by one from queue and
    # enqueue their univisited adjacent
    while (len(q) > 0):
        temp = q.popleft()
 
        i = temp[0]
        j = temp[1]
 
        # Go through all 8 adjacent
        for k in range(8):
            if (isSafe(mat, i + row[k], j + col[k], vis)):
                vis[i + row[k]][j + col[k]] = True
                q.append([i + row[k], j + col[k]])
 
# This function returns number islands (connected
# components) in a graph. It simply works as
# BFS for disconnected graph and returns count
# of BFS calls.
def countIslands(mat):
      
    # Mark all cells as not visited
    vis = [[False for i in range(5)]
                  for i in range(5)]
    # memset(vis, 0, sizeof(vis));
 
    # 5all BFS for every unvisited vertex
    # Whenever we see an univisted vertex,
    # we increment res (number of islands)
    # also.
    res = 0
 
    for i in range(5):
        for j in range(5):
            if (mat[i][j] and not vis[i][j]):
                BFS(mat, vis, i, j)
                res += 1
 
    return res
 
# Driver code
if __name__ == '__main__':
     
    mat = [ [ 1, 1, 0, 0, 0 ],
            [ 0, 1, 0, 0, 1 ],
            [ 1, 0, 0, 1, 1 ],
            [ 0, 0, 0, 0, 0 ],
            [ 1, 0, 1, 0, 1 ]]
 
    print (countIslands(mat))
 
# This code is contributed by mohit kumar 29
C#
Javascript
Output: 
5
 

Time Complexity: O(ROW * COL) where ROW is the number of ROWS and COL is the number of COLUMNS in the matrix. 
Auxiliary Space: O(ROW * COL ) because of the visited array. 





Like
31
Previous
Find the number of islands using DFS
Next
Connected Components in an Undirected Graph
Related Articles
1.
Check if a given directed graph is strongly connected | Set 2 (Kosaraju using BFS)
2.
Detect cycle in an undirected graph using BFS
3.
Detect Cycle in a Directed Graph using BFS
4.
Traversal of a Graph in lexicographical order using BFS
5.
0-1 BFS (Shortest Path in a Binary Weight Graph)
6.
Print the lexicographically smallest BFS of the graph starting from 1
7.
When to use DFS or BFS to solve a Graph problem?
8.
Breadth First Search or BFS for a Graph
9.
BFS for Disconnected Graph
10.
Find the number of Islands using Disjoint Set
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
kartik
@kartik
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
princiraj1992
29AjayKumar
mohit kumar 29
patel2127
pk1409
factworx4i2
Article Tags :
BFS
Graph
Practice Tags :
BFS
Graph
Improve Article
Report Issue