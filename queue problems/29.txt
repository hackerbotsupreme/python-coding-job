Level with maximum number of nodes

Difficulty Level : Easy
Last Updated : 27 Jan, 2023
Read
Discuss
Courses
Practice
Video
Find the level in a binary tree that has the maximum number of nodes. The root is at level 0.

Examples: 

Input: 


Output : 2
Explanation:


Input:


Output:1
Explanation


 
Recommended Problem
Maximum Node Level
Tree
Data Structures
VMWare
Amazon
Solve Problem
Submission count: 18.5K
Approach: It is known that in level order traversal of binary tree with queue, at any time our queue contains all elements of a particular level. So find level with maximum number of nodes in queue. 
BFS traversal is an algorithm for traversing or searching tree or graphs . It starts at the tree root , and explores all of the neighbor nodes at the present depth prior to moving on to the nodes at the next depth level. 
So at any point the queue of BFS will contain elements of adjacent layers. So this makes the algorithm perfect for this problem.



Algorithm: 

Create the tree, a queue to store the nodes and insert the root in the queue. Create variables level=0,count =0 and level_no=-1
The implementation will be slightly different, all the elements of same level will be removed in a single iteration.
Run a loop while size of queue is greater than 0. Get the size of queue (size) and store it. If size is greater than count then update count = size and level_no = level.
Now run a loop size times, and pop one node from the queue and insert its childrens (if present).
Increment level.
Implementation: 

C++
Java
Python3
# Python3 implementation to find the
# level having Maximum number of Nodes
 
# Importing Queue
from queue import Queue
 
# Helper class that allocates a new
# node with the given data and None
# left and right pointers.
class newNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 
# function to find the level
# having Maximum number of Nodes
def maxNodeLevel(root):
    if (root == None):
        return -1
 
    q = Queue()
    q.put(root)
 
    # Current level
    level = 0
 
    # Maximum Nodes at same level
    Max = -999999999999
 
    # Level having Maximum Nodes
    level_no = 0
 
    while (1):
         
        # Count Nodes in a level
        NodeCount = q.qsize()
 
        if (NodeCount == 0):
            break
 
        # If it is Maximum till now
        # Update level_no to current level
        if (NodeCount > Max):
            Max = NodeCount
            level_no = level
 
        # Pop complete current level
        while (NodeCount > 0):
            Node = q.queue[0]
            q.get()
            if (Node.left != None):
                q.put(Node.left)
            if (Node.right != None):
                q.put(Node.right)
            NodeCount -= 1
 
        # Increment for next level
        level += 1
 
    return level_no
 
# Driver Code
if __name__ == '__main__':
     
    # binary tree formation
    root = newNode(2)     #     2    
    root.left     = newNode(1)     #     / \
    root.right     = newNode(3)     #     1     3    
    root.left.left = newNode(4)     # / \ \
    root.left.right = newNode(6)     # 4     6 8
    root.right.right = newNode(8) #     /    
    root.left.right.left = newNode(5)#     5    
 
    print("Level having Maximum number of Nodes : ",
                                 maxNodeLevel(root))
 
# This code is contributed by Pranchalk
C#
Javascript
Output
Level having maximum number of Nodes : 2
Time Complexity: O(n), In BFS traversal every node is visited only once, So Time Complexity is O(n).
Auxiliary Space: O(n), The space is required to store the nodes in a queue.

An approach using DFS:

Iterate over the tree and for every nodes in the tree, count the frequency of nodes at particular height or depth.

Create a map for counting the frequency of nodes at a particular height or depth.
Iterate over the tree
Increment the count of the number of nodes at a particular depth for every node.
Iterate over the map and find the level that has the maximum number of nodes.
Below is the implementation of the above approach:

C++
Java
Python3
# Python implementation to find the level
# having maximum number of Nodes
 
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 
def dfs(root, unmap, depth):
    if root is None:
        return
    # Initialize the count of nodes at depth in map to 0
    unmap[depth] = unmap.get(depth, 0) + 1
    dfs(root.left, unmap, depth + 1)
    dfs(root.right, unmap, depth + 1)
 
 
def maxNodeLevel(root):
    unmap = {}
    dfs(root, unmap, 0)
    maxx = float('-inf')
    result = None
    for k, v in unmap.items():
        if v > maxx:
            result = k
            maxx = v
        elif v == maxx:
            result = min(result, k)
    return result
 
# Driver program to test above
if __name__ == "__main__":
    # binary tree formation
    root = Node(2)                       #   2
    root.left = Node(1)                  #  / \
    root.right = Node(3)                 # 1   3
    root.left.left = Node(4)            # / \  \
    root.left.right = Node(6)          # 4   6  8
    root.right.right = Node(8)            # /
    root.left.right.left = Node(5)       # 5
 
    print("Level having maximum number of Nodes:", maxNodeLevel(root))
Javascript
Output
Level having maximum number of Nodes : 2
Time Complexity: O(n), where n is the number of nodes in the given tree.
Auxiliary Space: O(h), where h is the height of the tree, this space is due to the recursion call stack.

This article is contributed by Ayush Jauhari. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 





Like
8
Next
Averages of Levels in Binary Tree
Related Articles
1.
Connect Nodes at same Level (Level Order Traversal)
2.
Count nodes from all lower levels smaller than minimum valued node of current level for every level in a Binary Tree
3.
Difference between sums of odd level and even level nodes in an N-ary Tree
4.
Print nodes of a Binary Search Tree in Top Level Order and Reversed Bottom Level Order alternately
5.
Calculate sum of all nodes present in a level for each level of a Tree
6.
Difference between sums of odd level and even level nodes of a Binary Tree
7.
Print the nodes corresponding to the level value for each level of a Binary Tree
8.
Modify a Binary Tree by adding a level of nodes with given value at a specified level
9.
Level with maximum number of nodes using DFS in a N-ary tree
10.
Queries to find the maximum Xor value between X and the nodes of a given level of a perfect binary tree
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
prerna saini
shrikanth13
PranchalKatiyar
andrew1234
famously
hardikkoriintern
hkdass001
vikramshirsath177
yashagarwal2852002
Article Tags :
tree-level-order
Tree
Practice Tags :
Tree
Improve Article
Report Issue