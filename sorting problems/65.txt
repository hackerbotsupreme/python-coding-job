Print array of strings in sorted order without copying one string into another

Difficulty Level : Easy
Last Updated : 12 Jul, 2022
Read
Discuss
Courses
Practice
Video
Given an array of n strings. The task is to print the strings in sorted order. The approach should be such that no string should be copied to another string during the sorting process.

Examples:

Input : {"geeks", "for", "geeks", "quiz")
Output : for geeks geeks quiz

Input : {"ball", "pen", "apple", "kite"}
Output : apple ball kite pen
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Approach: It has the following steps: 

Maintain another array indexed_arr which stores/maintain the index of each string.
We can apply any sorting technique to this indexed_arr.
An Illustration:  


--> str[] = {"world", "hello"}
--> corresponding index array will be
    indexed_arr = {0, 1}
--> Now, how the strings are compared and 
    accordingly values in indexed_arr are changed.
--> Comparison process:
    if (str[index[0]].compare(str[index[1]] > 0
        temp = index[0]
        index[0] = index[1]
        index[1] = temp

// after sorting values of
// indexed_arr = {1, 0}
--> for i=0 to 1
        print str[index[i]]

This is how the strings are compared and their 
corresponding indexes in the indexed_arr
are being manipulated/swapped so that after the sorting process
is completed, the order of indexes in the indexed_arr
gives us the sorted order of the strings.
Implementation:

C++
Java
Python 3
# Python 3 implementation to print array
# of strings in sorted order without
# copying one string into another
 
# function to print strings in sorted order
def printInSortedOrder(arr, n):
    index = [0] * n
     
    # Initially the index of the strings
    # are assigned to the 'index[]'
    for i in range(n):
        index[i] = i
     
    # selection sort technique is applied
    for i in range(n - 1):
        min = i
        for j in range(i + 1, n):
             
            # with the help of 'index[]'
            # strings are being compared
            if (arr[index[min]] > arr[index[j]]):
                min = j
         
        # index of the smallest string is placed
        # at the ith index of 'index[]'
        if (min != i):
            index[min], index[i] = index[i], index[min]
     
    # printing strings in sorted order
    for i in range(n):
        print(arr[index[i]], end = " ")
 
# Driver Code
if __name__ == "__main__":
     
    arr = ["geeks", "quiz", "geeks", "for"]
    n = 4
    printInSortedOrder(arr, n)
 
# This code is contributed by ita_c
C#
Javascript
Output
for geeks geeks quiz 
Time Complexity: O(n2).
Auxiliary Space: O(n).



The approach can have its usage when we have to minimize the number of disc writes as in the case of an array of structures. The structure values are compared, but their values are not being swapped, instead, their index is maintained in another array, which is manipulated to keep the indexes in an order which represents the sorted array of structures.





Like
4
Previous
Ropes Data Structure (Fast String Concatenation)
Next
Sort the given string using character search
Related Articles
1.
Check whether two strings can be made equal by copying their characters with the adjacent ones
2.
Sort an array of strings in ascending order with each string sorted in descending order
3.
Sort the array of strings according to alphabetical order defined by another string
4.
Count of strings that become equal to one of the two strings after one removal
5.
Print elements of an array according to the order defined by another array | set 2
6.
Check if it is possible to convert one string into another with given constraints
7.
Check if a queue can be sorted into another queue using a stack
8.
Merge K sorted Doubly Linked List in Sorted Order
9.
Sort an array of strings having characters at odd and even indices sorted in decreasing and increasing order respectively
10.
Print all repeating adjacent pairs in sorted order from an array
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
29AjayKumar
ukasp
Akanksha_Rai
avanitrachhadiya2155
anandkumarshivam2266
hardikkoriintern
Article Tags :
Sorting
Strings
Practice Tags :
Sorting
Strings