Sort even-placed elements in increasing and odd-placed in decreasing order

Difficulty Level : Easy
Last Updated : 26 Dec, 2022
Read
Discuss
Courses
Practice
Video
We are given an array of n distinct numbers. The task is to sort all even-placed numbers in increasing and odd-placed numbers in decreasing order. The modified array should contain all sorted even-placed numbers followed by reverse sorted odd-placed numbers.

Note that the first element is considered as even placed because of its index 0. 

Examples:  

Input:  arr[] = {0, 1, 2, 3, 4, 5, 6, 7}
Output: arr[] = {0, 2, 4, 6, 7, 5, 3, 1}
Even-place elements : 0, 2, 4, 6
Odd-place elements : 1, 3, 5, 7
Even-place elements in increasing order : 
0, 2, 4, 6
Odd-Place elements in decreasing order : 
7, 5, 3, 1

Input: arr[] = {3, 1, 2, 4, 5, 9, 13, 14, 12}
Output: {2, 3, 5, 12, 13, 14, 9, 4, 1}
Even-place elements : 3, 2, 5, 13, 12
Odd-place elements : 1, 4, 9, 14
Even-place elements in increasing order : 
2, 3, 5, 12, 13
Odd-Place elements in decreasing order : 
14, 9, 4, 1 
Recommended Problem
Bitonic Generator Sort
Arrays
Sorting
+3 more
Zoho
Solve Problem
Submission count: 5.8K
The idea is simple. We create two auxiliary arrays evenArr[] and oddArr[] respectively. We traverse input array and put all even-placed elements in evenArr[] and odd placed elements in oddArr[]. Then we sort evenArr[] in ascending and oddArr[] in descending order. Finally, copy evenArr[] and oddArr[] to get the required result.


Implementation:

C++
Java
Python3
# Python3 program to separately sort
# even-placed and odd placed numbers
# and place them together in sorted array.
def bitonicGenerator(arr, n):
     
    # create evenArr[] and oddArr[]
    evenArr = []
    oddArr = []
 
    # Put elements in oddArr[] and evenArr[]
    # as per their position
    for i in range(n):
        if ((i % 2) == 0):
            evenArr.append(arr[i])
        else:
            oddArr.append(arr[i])
 
    # sort evenArr[] in ascending order
    # sort oddArr[] in descending order
    evenArr = sorted(evenArr)
    oddArr = sorted(oddArr)
    oddArr = oddArr[::-1]
 
    i = 0
    for j in range(len(evenArr)):
        arr[i] = evenArr[j]
        i += 1
    for j in range(len(oddArr)):
        arr[i] = oddArr[j]
        i += 1
 
# Driver Code
arr = [1, 5, 8, 9, 6, 7, 3, 4, 2, 0]
n = len(arr)
bitonicGenerator(arr, n)
for i in arr:
    print(i, end = " ")
 
# This code is contributed by Mohit Kumar
C#
Javascript
Output
1 2 3 6 8 9 7 5 4 0 
Time Complexity: O(n Log n) 
Auxiliary Space: O(n)



The above problem can also be solved without the use of Auxiliary space. The idea is to swap the first half odd index positions with the second half even index positions and then sort the first half array in increasing order and the second half array in decreasing order. Thanks to SWARUPANANDA DHUA for suggesting this.

Implementation:

C++
Java
Python3
# Python3 Program to sort even-placed elements in increasing and
# odd-placed in decreasing order with constant space complexity
def bitonicGenerator(arr, n):
 
    # first odd index
    i = 1
 
    # last index
    j = n - 1
     
    # if last index is odd
    if (j % 2 != 0):
         
        # decrement j to even index
        j = j - 1
         
    # swapping till half of array
    while (i < j) :
        arr[j], arr[i] = arr[i], arr[j]
        i = i + 2
        j = j - 2
         
    arr_f = []
    arr_s = []
     
    for i in range(int((n + 1) / 2)) :
        arr_f.append(arr[i])
     
    i = int((n + 1) / 2)
    while( i < n ) :
        arr_s.append(arr[i])
        i = i + 1
     
    # Sort first half in increasing
    arr_f.sort()
 
    # Sort second half in decreasing
    arr_s.sort(reverse = True)
     
    for i in arr_s:
        arr_f.append(i)
     
    return arr_f
 
# Driver Program
arr = [ 1, 5, 8, 9, 6, 7, 3, 4, 2, 0]
n = len(arr)
arr = bitonicGenerator(arr, n)
print(arr)
 
# This code is contributed by Arnab Kundu
C#
Javascript
Output
1 2 3 6 8 9 7 5 4 0 
Time Complexity: O(n Log n) 
Auxiliary Space: O(1)

Another approach:
Another efficient approach to solve the problem in O(1) Auxiliary space is by Using negative multiplication.

The steps involved are as follows:

 Multiply all the elements at even placed index by -1.
Sort the whole array. In this way, we can get all even placed index in the starting as they are negative numbers now.
Now revert the sign of these elements.
After this reverse the first half of the array which contains an even placed number to make it in increasing order.
And then reverse the rest half of the array to make odd placed numbers in decreasing order.
Note: This method is only applicable if all the elements in the array are non-negative.

An illustrative example of the above approach:

Let given array: arr[] = {0, 1, 2, 3, 4, 5, 6, 7}
Array after multiplying by -1 to even placed elements: arr[] = {0, 1, -2, 3, -4, 5, -6, 7}
Array after sorting: arr[] = {-6, -4, -2, 0, 1, 3, 5, 7}
Array after reverting negative values: arr[] = {6, 4, 2, 0, 1, 3, 5, 7}
After reversing the first half of array: arr[] = {0, 2, 4, 6, 1, 3, 5, 7}
After reversing the second half of array: arr[] = {0, 2, 4, 6, 7, 5, 3, 1}

Below is the code for the above approach:

C++
Java
Python3
class GFG :
    @staticmethod
    def reverse( a,  l,  r) :
        while (l <= r) :
            temp = a[l]
            a[l] = a[r]
            a[r] = temp
            l += 1
            r -= 1
    @staticmethod
    def bitonicGenerator( arr,  n) :
       
        # Making all even placed index
        # element negative
        i = 0
        while (i < n) :
            if (i % 2 == 0) :
                arr[i] = -1 * arr[i]
            i += 1
             
        # Sorting the whole array
        arr.sort()
         
        # Finding the middle value of
        # the array
        mid = int((n - 1) / 2)
         
        # Reverting the changed sign
        i = 0
        while (i <= mid) :
            arr[i] = -1 * arr[i]
            i += 1
             
        # Reverse first half of array
        GFG.reverse(arr, 0, mid)
         
        # Reverse second half of array
        GFG.reverse(arr, mid + 1, n - 1)
         
    # Driver Code
    @staticmethod
    def main( args) :
        arr = [1, 5, 8, 9, 6, 7, 3, 4, 2, 0]
        n = len(arr)
        GFG.bitonicGenerator(arr, n)
        i = 0
        while (i < n) :
            print(str(arr[i]) + " ", end ="")
            i += 1
     
 
if __name__=="__main__":
    GFG.main([])
     
    # This code is contributed by aadityaburujwale.
C#
Javascript
Output
1 2 3 6 8 9 7 5 4 0 
Time Complexity: O(n*log(n)) 
Auxiliary Space: O(1)

This article is contributed by Shivam Pradhan (anuj_charm). If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 





Like
8
Previous
Sort all even numbers in ascending order and then sort all odd numbers in descending order
Next
Permute two arrays such that sum of every pair is greater or equal to K
Related Articles
1.
Sort an array of strings having characters at odd and even indices sorted in decreasing and increasing order respectively
2.
Print array elements in alternatively increasing and decreasing order
3.
Count subarrays with elements in alternate increasing-decreasing order or vice-versa
4.
Divide array into increasing and decreasing subsequence without changing the order
5.
Minimum sum possible by assigning every increasing/decreasing consecutive pair with values in that order
6.
Sort elements of an array in increasing order of absolute difference of adjacent elements
7.
Find indices having at least K non-increasing elements before and K non-decreasing elements after them
8.
Minimize moves to sort Array in non decreasing order by breaking elements in two parts
9.
Sort a K-Increasing-Decreasing Array
10.
Sort all even numbers in ascending order and then sort all odd numbers in descending order
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
princiraj1992
29AjayKumar
Rajput-Ji
mohit kumar 29
andrew1234
unknown2108
rag2127
pushpeshrajdx01
hardikkoriintern
aditya942003patil
aadityapburujwale
sourabhdalal0001
hkdass001
Article Tags :
STL
Zoho
Arrays
Sorting
Practice Tags :
Zoho
Arrays
Sorting
STL
Improve Article
Report Issue