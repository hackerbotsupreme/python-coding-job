Permute two arrays such that sum of every pair is greater or equal to K

Difficulty Level : Easy
Last Updated : 16 Nov, 2022
Read
Discuss
Courses
Practice
Video
Given two arrays of equal size n and an integer k. The task is to permute both arrays such that sum of their corresponding element is greater than or equal to k i.e a[i] + b[i] >= k. The task is to print “Yes” if any such permutation exists, otherwise print “No”.

Examples : 

Input : a[] = {2, 1, 3}, 
        b[] = { 7, 8, 9 }, 
        k = 10. 
Output : Yes
Permutation  a[] = { 1, 2, 3 } and b[] = { 9, 8, 7 } 
satisfied the condition a[i] + b[i] >= K.

Input : a[] = {1, 2, 2, 1}, 
        b[] = { 3, 3, 3, 4 }, 
        k = 5. 
Output : No
Recommended Problem
Permutations in array
Arrays
Sorting
+2 more
Solve Problem
Submission count: 11.7K
The idea is to sort one array in ascending order and another array in descending order and if any index does not satisfy the condition a[i] + b[i] >= K then print “No”, else print “Yes”.

If the condition fails on sorted arrays, then there exists no permutation of arrays that can satisfy the inequality. Proof,
Assume asort[] be sorted a[] in ascending order and bsort[] be sorted b[] in descending order. 


Let new permutation b[] is created by swapping any two indices i, j of bsort[], 

Case 1: i < j and element at b[i] is now bsort[j]. 
Now, asort[i] + bsort[j] < K, because bsort[i] > bsort[j] as b[] is sorted in decreasing order and we know asort[i] + bsort[i] < k.
Case 2: i > j and element at b[i] is now bsort[j]. 
Now, asort[j] + bsort[i] < k, because asort[i] > asort[j] as a[] is sorted in increasing order and we know asort[i] + bsort[i] < k.
Below is the implementation is this approach: 

C++
C
Java
Python3
# Python program to check
# whether permutation of two
# arrays satisfy the condition
# a[i] + b[i] >= k.
 
# Check whether any
# permutation exists which
# satisfy the condition.
def isPossible(a,b,n,k):
 
    # Sort the array a[]
    # in decreasing order.
    a.sort(reverse=True)
  
    # Sort the array b[]
    # in increasing order.
    b.sort()
  
    # Checking condition
    # on each index.
    for i in range(n):
        if (a[i] + b[i] < k):
            return False
  
    return True
 
 
# Driver code
 
a = [ 2, 1, 3]
b = [7, 8, 9]
k = 10
n =len(a)
  
if(isPossible(a, b, n, k)):
    print("Yes")
else:
    print("No")
 
# This code is contributed
# by Anant Agarwal.
C#
PHP
Javascript
Output


Yes
Time Complexity: O(n log n).
Auxiliary Space: O(1)
This approach is contributed by Anuj Chauhan. 

Method 2:
In the above case, we were just sorting the elements and checking the statement for n time (making pairs of ith index) resulting in time complexity of O(n log n).

As we can see we only need to check that is there any pair whose sum is greater than K. To solve it we have to just find the maximum pair sum. 

Follow the steps below to implement the above idea:

We will first find the max element from the first array and then the max element from the second array.
Check if the sum of both max elements is greater than K
If true, return true 
otherwise false.
Below is the implementation of the above approach:

C++
#include<bits/stdc++.h>
using namespace std;
 
bool isPossible(long long arr1[] , long long arr2[] , int n , long long K){
    //FINDING THE MAX ELEMENT
 
    long long a = *max_element(arr1 , arr1+n); // *max_element is STL function used to find the max element from the array.
    long long b = *max_element(arr2 , arr2+n);
 
    long long ans = a+b;
 
    // CHECKING THE CONDITION
    return ans >= K;
}
 
int main(){
    long long arr1[] = {2,1,3};
    long long arr2[] = {7,8,9};
 
    long long k = 5;
 
    int n = sizeof(arr1)/sizeof(arr1[0]);
 
    if (isPossible(arr1 , arr2 , n , k))
    {
        cout<<"Yes"<<endl;
    }
    else
    {
        cout<<"No"<<endl;
    }
}
 
// This code is contributed by Divyansh Garg (dishugarg1511)
Java
Output
Yes
Time Complexity: O(n)
Auxiliary Space: O(1)





Like
24
Previous
Sort even-placed elements in increasing and odd-placed in decreasing order
Next
Choose k array elements such that difference of maximum and minimum is minimized
Related Articles
1.
Number of indices pair such that element pair sum from first Array is greater than second Array
2.
Find sub-arrays from given two arrays such that they have equal sum
3.
Partition array into two subarrays with every element in the right subarray strictly greater than every element in left subarray
4.
Permute the elements of an array following given order
5.
Maximum difference between frequency of two elements such that element having greater frequency is also greater
6.
Count of distinct index pair (i, j) such that element sum of First Array is greater
7.
Length of longest subsequence such that prefix sum at every element remains greater than zero
8.
Pair formation such that maximum pair sum is minimized
9.
Minimum deletions to be done in given array such that every pair sum is a power of 2
10.
Maximum pair sum such that their digit sum are equal and divisible by K
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
vt_m
shubham_singh
decode2207
hardikkoriintern
adityakumar129
dishugarg1511
user_7gr9iodclfx
Article Tags :
Arrays
Sorting
Practice Tags :
Arrays
Sorting