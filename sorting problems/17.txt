Strand Sort

Difficulty Level : Medium
Read
Discuss
Courses
Practice
Video
Strand sort is a recursive sorting algorithm that sorts items of a list into increasing order. It has O(nÂ²) worst time complexity which occurs when the input list is reverse sorted. It has a best case time complexity of O(n) which occurs when the input is a list that is already sorted.

Given a list of items, sort them in increasing order. 

Examples:

Input: ip[] = {10, 5, 30, 40, 2, 4, 9}
Output: op[] = {2, 4, 5, 9, 10, 30, 40}

Input: ip[] = {1, 10, 7}
Output: op[] = {1, 7, 10}

 
Illustrations:

Let, input[] = {10, 5, 30, 40, 2, 4, 9}



Initialize: output[] = {}, sublist[] = {}

Move first item of input to sublist.
sublist[] = {10}

Traverse remaining items of input and if current element is greater than last item of sublist, move this item from input to sublist. 
Now, sublist[] = {10, 30, 40}, input[] = {5, 2, 4, 9}

Merge sublist into output.
op = {10, 30, 40}

Next recursive call: Move first item of input to sublist. sublist[] = {5}

Traverse remaining items of input and move elements greater than last inserted.
input[] = {2, 4}
sublist[] = {5, 9}


Merge sublist into op.
output = {5, 9, 10, 30, 40}

Last Recursive Call:

{2, 4} are first moved to sublist and then merged into output.
output = {2, 4, 5, 9, 10, 30, 40}

Below are simple steps used in the algorithm:

Let ip[] be input list and op[] be output list.
Create an empty sublist and move first item of ip[] to it.
Traverse remaining items of ip. For every item x, check if x is greater than last inserted item to sublist. If yes, remove x from ip and add at the end of sublist. If no, ignore x (Keep it it in ip)
Merge sublist into op (output list)
Recur for remaining items in ip and current items in op.
Below is the implementation of above algorithm in C++ and Javascript. The C++ implementation uses list in C++ STL. 

CPP
// CPP program to implement Strand Sort
#include <bits/stdc++.h>
using namespace std;
  
// A recursive function to implement Strand
// sort.
// ip is input list of items (unsorted).
// op is output list of items (sorted)
void strandSort(list<int> &ip, list<int> &op)
{
    // Base case : input is empty
    if (ip.empty())
        return;
  
    // Create a sorted sublist with
    // first item of input list as
    // first item of the sublist
    list<int> sublist;
    sublist.push_back(ip.front());
    ip.pop_front();
       
    // Traverse remaining items of ip list
    for (auto it = ip.begin(); it != ip.end(); ) {
  
        // If current item of input list
        // is greater than last added item
        // to sublist, move current item
        // to sublist as sorted order is
        // maintained.
        if (*it > sublist.back()) {
            sublist.push_back(*it);
  
            // erase() on list removes an
            // item and returns iterator to
            // next of removed item.
            it = ip.erase(it);
        }
  
        // Otherwise ignore current element
        else
            it++;
    }
  
    // Merge current sublist into output
    op.merge(sublist);
  
    // Recur for remaining items in
    // input and current items in op.
    strandSort(ip, op);
}
  
// Driver code
int main(void)
{
    list<int> ip{10, 5, 30, 40, 2, 4, 9};
  
    // To store sorted output list
    list<int> op;
  
    // Sorting the list
    strandSort(ip, op);
  
    // Printing the sorted list
    for (auto x : op)
        cout << x << " ";
    return 0;
}
Javascript
Output:
2 4 5 9 10 30 40
Time complexity: O(N2)
Auxiliary Space: O(N)

Check out DSA Self Paced Course
 

More Sorting Algorithms : 

  
Practice Problems on Sorting

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
3
Previous
Heap Sort for decreasing order using min heap
Next
Sort the linked list in the order of elements appearing in the array
Related Articles
1.
Comparison among Bubble Sort, Selection Sort and Insertion Sort
2.
Why Quick Sort preferred for Arrays and Merge Sort for Linked Lists?
3.
Bucket Sort To Sort an Array with Negative Numbers
4.
Sort all even numbers in ascending order and then sort all odd numbers in descending order
5.
Program to sort an array of strings using Selection Sort
6.
C/C++ Program for Odd-Even Sort / Brick Sort
7.
Java Program for Odd-Even Sort / Brick Sort
8.
Insertion sort to sort even and odd positioned elements in different orders
9.
Odd Even Transposition Sort / Brick Sort using pthreads
10.
Sort an Array which contain 1 to N values in O(N) using Cycle Sort
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
kartik
@kartik
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
kashishkumar2
satwiksuman
Article Tags :
cpp-list
STL
Sorting
Practice Tags :
Sorting
STL
Improve Article
Report Issue