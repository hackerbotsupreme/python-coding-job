TimSort

Difficulty Level : Medium
Last Updated : 19 Jul, 2022
Read
Discuss
Courses
Practice
Video
TimSort is a sorting algorithm based on Insertion Sort and Merge Sort.

Used in Java’s Arrays.sort() as well as Python’s sorted() and sort().
First sort small pieces using Insertion Sort, then merges the pieces using a merge of merge sort.
We divide the Array into blocks known as Run. We sort those runs using insertion sort one by one and then merge those runs using the combine function used in merge sort. If the size of the Array is less than run, then Array gets sorted just by using Insertion Sort. The size of the run may vary from 32 to 64 depending upon the size of the array. Note that the merge function performs well when size subarrays are powers of 2. The idea is based on the fact that insertion sort performs well for small arrays.

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Details of the below implementation:

We consider the size of the run as 32 and the input array is divided into sub-array.
We one-by-one sort pieces of size equal to run with a simple insertion sort.
After sorting individual pieces, we merge them one by one with the merge sort. We double the size of merged subarrays after every iteration.
C++
Java
Python3
# Python3 program to perform basic timSort
MIN_MERGE = 32
 
 
def calcMinRun(n):
    """Returns the minimum length of a
    run from 23 - 64 so that
    the len(array)/minrun is less than or
    equal to a power of 2.
 
    e.g. 1=>1, ..., 63=>63, 64=>32, 65=>33,
    ..., 127=>64, 128=>32, ...
    """
    r = 0
    while n >= MIN_MERGE:
        r |= n & 1
        n >>= 1
    return n + r
 
 
# This function sorts array from left index to
# to right index which is of size atmost RUN
def insertionSort(arr, left, right):
    for i in range(left + 1, right + 1):
        j = i
        while j > left and arr[j] < arr[j - 1]:
            arr[j], arr[j - 1] = arr[j - 1], arr[j]
            j -= 1
 
 
# Merge function merges the sorted runs
def merge(arr, l, m, r):
 
    # original array is broken in two parts
    # left and right array
    len1, len2 = m - l + 1, r - m
    left, right = [], []
    for i in range(0, len1):
        left.append(arr[l + i])
    for i in range(0, len2):
        right.append(arr[m + 1 + i])
 
    i, j, k = 0, 0, l
 
    # after comparing, we merge those two array
    # in larger sub array
    while i < len1 and j < len2:
        if left[i] <= right[j]:
            arr[k] = left[i]
            i += 1
 
        else:
            arr[k] = right[j]
            j += 1
 
        k += 1
 
    # Copy remaining elements of left, if any
    while i < len1:
        arr[k] = left[i]
        k += 1
        i += 1
 
    # Copy remaining element of right, if any
    while j < len2:
        arr[k] = right[j]
        k += 1
        j += 1
 
 
# Iterative Timsort function to sort the
# array[0...n-1] (similar to merge sort)
def timSort(arr):
    n = len(arr)
    minRun = calcMinRun(n)
 
    # Sort individual subarrays of size RUN
    for start in range(0, n, minRun):
        end = min(start + minRun - 1, n - 1)
        insertionSort(arr, start, end)
 
    # Start merging from size RUN (or 32). It will merge
    # to form size 64, then 128, 256 and so on ....
    size = minRun
    while size < n:
 
        # Pick starting point of left sub array. We
        # are going to merge arr[left..left+size-1]
        # and arr[left+size, left+2*size-1]
        # After every merge, we increase left by 2*size
        for left in range(0, n, 2 * size):
 
            # Find ending point of left sub array
            # mid+1 is starting point of right sub array
            mid = min(n - 1, left + size - 1)
            right = min((left + 2 * size - 1), (n - 1))
 
            # Merge sub array arr[left.....mid] &
            # arr[mid+1....right]
            if mid < right:
                merge(arr, left, mid, right)
 
        size = 2 * size
 
 
# Driver program to test above function
if __name__ == "__main__":
 
    arr = [-2, 7, 15, -14, 0, 15, 0,
           7, -7, -4, -13, 5, 8, -14, 12]
 
    print("Given Array is")
    print(arr)
 
    # Function Call
    timSort(arr)
 
    print("After Sorting Array is")
    print(arr)
    
C#
Javascript
Output:

Given Array is
-2, 7, 15, -14, 0, 15, 0, 7, -7, -4, -13, 5, 8, -14, 12
After Sorting Array is
-14  -14  -13  -7  -4  -2  0  0  5  7  7  8  12  15  15
Complexity Analysis:



Case

Complexity

Best Case

O(n)

Average Case

O(n*log(n))

Worst Case

O(n*log(n))

Space

O(n)

Stable

YES

In-Place Sorting	NO, as it requires extra space
Complexity Comparison with Merge and Quick Sort:

Algorithm

Time Complexity

 

Best

Average

Worst

Quick Sort

Ω(n*log(n))

θ(n*log(n))

O(n^2)

Merge Sort

Ω(n*log(n))

θ(n*log(n))

O(n*log(n))

Time Sort

Ω(n)

θ(n*log(n))

O(n*log(n))

References : 
https://svn.python.org/projects/python/trunk/Objects/listsort.txt 
https://en.wikipedia.org/wiki/Timsort#Minimum_size_.28minrun.29 
This article is contributed by Aditya Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.
Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above.





Like
21
Previous
Check if it is possible to sort an array with conditional swapping of adjacent allowed
Next
Sort an array after applying the given equation
Related Articles
1.
Sorting with Tapes : Balanced Merge
2.
Burst Sort Algorithm
3.
C++ Program to Merge Two Sorted Arrays
4.
C++ Program for Bubble Sort Algorithm
5.
Minimum operations required to Sort the Array using following operations
6.
C++ Program To Sort String of Characters
7.
Parallel Count Sort
8.
C++ Program For Selection Sort
9.
C++ Program For Insertion Sort
10.
C++ Program For Row Wise Sorting in 2D Array
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
rituraj_jain
DrRoot_
29AjayKumar
KarampistisDimitris
tjrdnjs33936
nespamujtetu
rag2127
guptavivek0503
simranarora5sos
Article Tags :
Insertion Sort
Merge Sort
Sorting
Practice Tags :
Merge Sort
Sorting