Counting Sort

Difficulty Level : Easy
Last Updated : 27 Jan, 2023
Read
Discuss(210+)
Courses
Practice
Video
Counting sort is a sorting technique based on keys between a specific range. It works by counting the number of objects having distinct key values (a kind of hashing). Then do some arithmetic operations to calculate the position of each object in the output sequence. 

Characteristics of counting sort:
Counting sort makes assumptions about the data, for example, it assumes that values are going to be in the range of 0 to 10 or 10 â€“ 99, etc, Some other assumption counting sort makes is input data will be all real numbers.
Like other algorithms this sorting algorithm is not a comparison-based algorithm, it hashes the value in a temporary count array and uses them for sorting.
It uses a temporary array making it a non-In Place algorithm.
Recommended Problem
Counting Sort
Sorting
Algorithms
Microsoft
Goldman Sachs
+1 more
Solve Problem
Submission count: 31.1K
Example:

For simplicity, consider the data in the range of 0 to 9. 
Input data: {1, 4, 1, 2, 7, 5, 2}
Take a count array to store the count of each unique object.
Follow the below illustration for a better understanding of the counting sort algorithm

Illustration:
scene00721

Now, store the count of each unique element in the count array
If any element repeats itself, simply increase its count.
scene00865

Here, the count of each unique element in the count array is as shown below:
Index:  0  1  2  3  4  5  6  7  8  9
Count: 0  2  2  0   1  1  0  1  0  0
scene01153

Modify the count array such that each element at each index stores the sum of previous counts.
Index:   0  1  2  3  4  5  6  7  8  9
Count:  0  2  4  4  5  6  6  7  7  7
The modified count array indicates the position of each object in the output sequence.
Find the index of each element of the original array in the count array. This gives the cumulative count.
scene01297



scene01369

Rotate the array clockwise for one time.
Index:  0 1 2 3 4 5 6 7 8 9 
Count: 0 0 2 4 4 5 6 6 7 7
  scene02881

  Output each object from the input sequence followed by increasing its count by 1.
  Process the input data: {1, 4, 1, 2, 7, 5, 2}. The position of 1 is 0.
  Put data 1 at index 0 in output. Increase count by 1 to place next data 1 at an index 1 greater than this index.
scene02521

After placing each element in its correct position, decrease its count by one.
Below is the implementation of the above algorithm:

C++
C
Java
Python3
# Python3 program for counting sort
 
# The main function that sort the given string arr[] in
# alphabetical order
 
 
def countSort(arr):
 
    # The output character array that will have sorted arr
    output = [0 for i in range(len(arr))]
 
    # Create a count array to store count of individual
    # characters and initialize count array as 0
    count = [0 for i in range(256)]
 
    # For storing the resulting answer since the
    # string is immutable
    ans = ["" for _ in arr]
 
    # Store count of each character
    for i in arr:
        count[ord(i)] += 1
 
    # Change count[i] so that count[i] now contains actual
    # position of this character in output array
    for i in range(256):
        count[i] += count[i-1]
 
    # Build the output character array
    for i in range(len(arr)):
        output[count[ord(arr[i])]-1] = arr[i]
        count[ord(arr[i])] -= 1
 
    # Copy the output array to arr, so that arr now
    # contains sorted characters
    for i in range(len(arr)):
        ans[i] = output[i]
    return ans
 
 
# Driver code
if __name__ == '__main__':
    arr = "geeksforgeeks"
    ans = countSort(arr)
    print("Sorted character array is % s" % ("".join(ans)))
 
# This code is contributed by Nikhil Kumar Singh
C#
PHP
Javascript
Output
Sorted character array is eeeefggkkorss
Time Complexity: O(N + K) where N is the number of elements in the input array and K is the range of input. 
Auxiliary Space: O(N + K)

Counting Sort for an Array with negative elements:
To solve the problem follow the below idea:

The problem with the previous counting sort was that we could not sort the elements if we have negative numbers in them. Because there are no negative array indices. 

So what we do is, find the minimum element and we will store the count of that minimum element at the zero index

Below is the implementation of the above approach:

C++
Java
Python3
# Python3 program for counting sort
# which takes negative numbers as well
 
# The function that sorts the given arr[]
 
 
def count_sort(arr):
    max_element = int(max(arr))
    min_element = int(min(arr))
    range_of_elements = max_element - min_element + 1
    # Create a count array to store count of individual
    # elements and initialize count array as 0
    count_arr = [0 for _ in range(range_of_elements)]
    output_arr = [0 for _ in range(len(arr))]
 
    # Store count of each character
    for i in range(0, len(arr)):
        count_arr[arr[i]-min_element] += 1
 
    # Change count_arr[i] so that count_arr[i] now contains actual
    # position of this element in output array
    for i in range(1, len(count_arr)):
        count_arr[i] += count_arr[i-1]
 
    # Build the output character array
    for i in range(len(arr)-1, -1, -1):
        output_arr[count_arr[arr[i] - min_element] - 1] = arr[i]
        count_arr[arr[i] - min_element] -= 1
 
    # Copy the output array to arr, so that arr now
    # contains sorted characters
    for i in range(0, len(arr)):
        arr[i] = output_arr[i]
 
    return arr
 
 
# Driver code
if __name__ == '__main__':
    arr = [-5, -10, 0, -3, 8, 5, -1, 10]
    ans = count_sort(arr)
    print(str(ans))
C#
Javascript
Output
-10 -5 -3 -1 0 5 8 10 
Time complexity: O(N), where N is the total number of elements
Auxiliary Space: O(N)

Another Approach for counting sort for positive numbers
In this approach, we are going to do the same thing as explained above but we will be implementing using the map data structure of C++.

C++
Python3
def countingSort(vec, n):
    #for (int i = 0; i<n; cin>> vec[i], i++)
    count=dict();
     
    # Here we are initializing every element of count to 0
    # from 1 to n
    for i in range(0,n):
        count[i] = 0;
         
    # Here we are storing count of every element
    for i in range(0,n):
        if vec[i] in count.keys():
            count[vec[i]] += 1;
        else:
            count[vec[i]] = 1;
 
         
    sortedArr = [];
    i = 0;
    while (n > 0):
        # Here we are checking if the count[element] = 0
        # then incrementing for the next Element
        if (count[i] == 0) :
            i += 1;
         
        # Here we are inserting the element into the
        # sortedArr decrementing count[element] and n by 1
        else:
            sortedArr.append(i);
            count[i] -= 1;
            n = n - 1;
         
    return sortedArr;
 
 
def printArr(vec, n):
    print("Sorted Array: ");
    for i in range(0,n):
        print(vec[i], " ");
 
vec1 = [ 6, 0, 7, 8, 7, 2, 0 ];
sortedArr1 = countingSort(vec1, len(vec1));
printArr(sortedArr1, len(sortedArr1));
 
vec2 = [ 4, 8, 1, 0, 1, 1, 0, 0 ];
sortedArr2 = countingSort(vec2, len(vec2));
printArr(sortedArr2, len(sortedArr2));
 
# This code is contributed by ritaagarwal.
C#
Javascript
Output
Sorted Array: 0 0 2 6 7 7 8 
Sorted Array: 0 0 0 1 1 1 4 8 
Time complexity: O(N), where N is the total number of elements
Auxiliary Space: O(N)

Important points:
Counting sort is efficient if the range of input data is not significantly greater than the number of objects to be sorted. Consider the situation where the input sequence is between the range 1 to 10K and the data is 10, 5, 10K, 5K. 
It is not a comparison-based sorting. Its running time complexity is O(n) with space proportional to the range of data. 
Counting sorting is able to achieve this because we are making assumptions about the data we are sorting.
It is often used as a sub-routine to another sorting algorithm like the radix sort. 
Counting sort uses partial hashing to count the occurrence of the data object in O(1).
The counting sort can be extended to work for negative inputs also.
Counting sort is not a stable algorithm. But it can be made stable with some code changes.
Exercise: 
Modify the above code to sort the input data in the range from M to N. 
Modify the code to make the counting sort stable.
Thoughts on parallelizing the counting sort algorithm. 
Related Articles:
Quiz on Counting Sort
Coding Practice for Sorting
Other Sorting Algorithms on GeeksforGeeks/GeeksQuiz 
Selection Sort, Bubble Sort, Insertion Sort, Merge Sort, Heap Sort, QuickSort, Radix Sort, Counting Sort, Bucket Sort, ShellSort, Comb Sort, PigeonHole Sorting

This article is contributed by Aashish Barnwal. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.





Like
171
Previous
Iterative HeapSort
Next
Radix Sort
Related Articles
1.
C Program for Counting Sort
2.
Java Program for Counting Sort
3.
Median and Mode using Counting Sort
4.
Sort an array of 0s, 1s and 2s (Simple Counting)
5.
Implementing Counting Sort using map in C++
6.
Find duplicates in an Array with values 1 to N using counting sort
7.
Counting Sort Visualization using JavaScript
8.
Kth smallest or largest element in unsorted Array using Counting Sort
9.
Comparison among Bubble Sort, Selection Sort and Insertion Sort
10.
Counting Inversions using Ordered Set and GNU C++ PBDS
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
Mithun Kumar
spattk
krikti
sagarudasi2
princiraj1992
rathbhupendra
soumyadip saha 1
rutvik_56
sam_2200
amit143katiyar
shikhasingrajput
me190003045
surinderdawra388
surindertarika1234
samrat230599
abhijitjadhav1998
kashishkumar2
noviced3vq6
janardansthox
princekumaras
sagartomar9927
ishankhandelwals
ratiagrawal
Article Tags :
counting-sort
Samsung
Snapdeal
Algorithms
Practice Tags :
Samsung
Snapdeal
Algorithms
Improve Article
Report Issue