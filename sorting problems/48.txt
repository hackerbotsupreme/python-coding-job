Find a permutation that causes worst case of Merge Sort

Difficulty Level : Hard
Last Updated : 18 Jan, 2022
Read
Discuss
Courses
Practice
Video
Given a set of elements, find which permutation of these elements would result in worst case of Merge Sort.
Asymptotically, merge sort always takes O(n Log n) time, but the cases that require more comparisons generally take more time in practice. We basically need to find a permutation of input elements that would lead to maximum number of comparisons when sorted using a typical Merge Sort algorithm.

Example: 

Consider the below set of elements 
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 
 13, 14, 15, 16}

Below permutation of the set causes 153
comparisons.
{1, 9, 5, 13, 3, 11, 7, 15, 2, 10, 6, 
 14, 4, 12, 8, 16}

And an already sorted permutation causes
30 comparisons. 

See this for a program that counts 
comparisons and shows above results.
Now how to get worst case input for merge sort for an input set?

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Lets us try to build the array in bottom up manner
Let the sorted array be {1,2,3,4,5,6,7,8}.

In order to generate the worst case of merge sort, the merge operation that resulted in above sorted array should result in maximum comparisons. In order to do so, the left and right sub-array involved in merge operation should store alternate elements of sorted array. i.e. left sub-array should be {1,3,5,7} and right sub-array should be {2,4,6,8}. Now every element of array will be compared at-least once and that will result in maximum comparisons. We apply the same logic for left and right sub-array as well. For array {1,3,5,7}, the worst case will be when its left and right sub-array are {1,5} and {3,7} respectively and for array {2,4,6,8} the worst case will occur for {2,4} and {6,8}.

Complete Algorithm –
GenerateWorstCase(arr[]) 

Create two auxiliary arrays left and right and store alternate array elements in them.
Call GenerateWorstCase for left subarray: GenerateWorstCase (left)
Call GenerateWorstCase for right subarray: GenerateWorstCase (right)
Copy all elements of left and right subarrays back to original array.
Below is the implementation of the idea

C++
C
Java
C#
Javascript
Python3
# Python program to generate Worst Case of Merge Sort
 
# Function to join left and right subarray
def join(arr, left, right, l, m, r):
    i = 0;
    for i in range(m-l+1):
        arr[i] = left[i];
        i+=1;
 
    for j in range(r-m):
        arr[i + j] = right[j];
 
 
# Function to store alternate elements in left
# and right subarray
def split(arr, left, right, l, m, r):
    for i in range(m-l+1):
        left[i] = arr[i * 2];
 
    for i in range(r-m):
        right[i] = arr[i * 2 + 1];
 
 
# Function to generate Worst Case of Merge Sort
def generateWorstCase(arr, l, r):
    if (l < r):
        m = l + (r - l) // 2;
 
        # create two auxiliary arrays
        left = [0 for i in range(m - l + 1)];
        right = [0 for i in range(r-m)];
 
        # Store alternate array elements in left
        # and right subarray
        split(arr, left, right, l, m, r);
 
        # Recurse first and second halves
        generateWorstCase(left, l, m);
        generateWorstCase(right, m + 1, r);
 
        # join left and right subarray
        join(arr, left, right, l, m, r);
 
 
# driver program
if __name__ == '__main__':
    # sorted array
    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];
    n = len(arr);
    print("Sorted array is");
    print(arr);
 
    # generate Worst Case of Merge Sort
    generateWorstCase(arr, 0, n - 1);
 
    print("\nInput array that will result in \n" + "worst case of merge sort is ");
 
    print(arr);
 
 
    # This code contributed by shikhasingrajput
Output: 

Sorted array is 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 

Input array that will result in worst 
case of merge sort is 
1 9 5 13 3 11 7 15 2 10 6 14 4 12 8 16 
References – Stack Overflow
This article is contributed by Aditya Goel. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above
 



Like
Previous
Sort an almost sorted array where only two elements are swapped
Next
Sort Vector of Pairs in ascending order in C++
Related Articles
1.
Can QuickSort be implemented in O(nLogn) worst case time complexity?
2.
When does the worst case of Quicksort occur?
3.
QuickSort Tail Call Optimization (Reducing worst case space to Log n )
4.
Merge Sort with O(1) extra space merge and O(n lg n) time [Unsigned Integers Only]
5.
Why Quick Sort preferred for Arrays and Merge Sort for Linked Lists?
6.
Merge Sort vs. Insertion Sort
7.
Sorting by combining Insertion Sort and Merge Sort algorithms
8.
Quick Sort vs Merge Sort
9.
Merge operations using STL in C++ | merge(), includes(), set_union(), set_intersection(), set_difference(), ., inplace_merge,
10.
Check if permutation of one string can break permutation of another
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
Smitha Dinesh Semwal
nidhi_biet
mayanktyagi1709
vaibhavrabadiya117
anikakapoor
shikhasingrajput
Article Tags :
Merge Sort
Sorting
Practice Tags :
Merge Sort
Sorting