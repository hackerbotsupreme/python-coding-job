K-th smallest element after removing some integers from natural numbers

Difficulty Level : Medium
Last Updated : 12 Jun, 2022
Read
Discuss
Courses
Practice
Video
Given an array arr[] of size ‘n’ and a positive integer k. Consider series of natural numbers and remove arr[0], arr[1], arr[2], …, arr[p] from it. Now the task is to find k-th smallest number in the remaining set of natural numbers. If no such number exists print “-1”.

Examples :  

Input : arr[] = { 1 } and k = 1.
Output: 2
Natural numbers are {1, 2, 3, 4, .... }
After removing {1}, we get {2, 3, 4, ...}.
Now, K-th smallest element = 2.

Input : arr[] = {1, 3}, k = 4.
Output : 6
First 5 Natural number {1, 2, 3, 4, 5, 6,  .. }
After removing {1, 3}, we get {2, 4, 5, 6, ... }.
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Method 1 (Simple): 
Make an auxiliary array b[] for presence/absence of natural numbers and initialize all with 0. Make all the integer equal to 1 which are present in array arr[] i.e b[arr[i]] = 1. Now, run a loop and decrement k whenever unmarked cell is encountered. When the value of k is 0, we get the answer.

Below is implementation of this approach:  

C++
Java
Python3
# Python program to find the K-th smallest element
# after removing some integers from natural number.
MAX = 1000000
 
 
# Return the K-th smallest element.
def ksmallest(arr, n, k):
     
    # Making an array, and mark all number as unmarked.
    b = [0]*MAX;
 
    # Marking the number present in the given array.
    for i in range(n):
        b[arr[i]] = 1;
 
    for j in range(1, MAX):
        # If j is unmarked, reduce k by 1.
        if (b[j] != 1):
            k-= 1;
 
        # If k is 0 return j.
        if (k is not 1):
            return j;
             
# Driven Program
k = 1;
arr = [ 1 ];
n = len(arr);
print(ksmallest(arr, n, k));
 
# This code contributed by Rajput-Ji
C#
PHP
Javascript
Output : 
 

2
Time Complexity: O(MAX)

Auxiliary Space: O(MAX)



Method 2 (Efficient): 
First, sort the array arr[]. Observe, there will be arr[0] – 1 numbers between 0 and arr[0], similarly, arr[1] – arr[0] – 1 numbers between arr[0] and arr[1] and so on. So, if k lies between arr[i] – arr[i+1] – 1, then return K-th smallest element in the range. Else reduce k by arr[i] – arr[i+1] – 1 i.e., k = k – (arr[i] – arr[i+1] – 1).

Algorithm to solve the problem: 

1. Sort the array arr[].
2. For i = 1 to k. Find c = arr[i+1] - arr[i] -1.
  a) if k - c <= 0, return arr[i-1] + k.
  b) else k = k - c.
Below is implementation of this approach: 

C++
Java
Python3
# Python3 program to find the Kth
# smallest element after
# removing some integer from
# first n natural number.
 
# Return the K-th
# smallest element.
def ksmallest(arr, n, k):
 
    arr.sort();
 
    # Checking if k lies
    # before 1st element
    if (k < arr[0]):
        return k;
 
    # If k is the first
    # element of array arr[].
    if (k == arr[0]):
        return arr[0] + 1;
 
    # If k is more
    # than last element
    if (k > arr[n - 1]):
        return k + n;
 
    # If first element
    # of array is 1.
    if (arr[0] == 1):
        k-= 1;
 
    # Reducing k by numbers
    # before arr[0].
    else:
        k -= (arr[0] - 1);
 
    # Finding k'th smallest element
    # after removing array elements.
    for i in range(1, n):
        # Finding count of element between
        # i-th and (i-1)-th element.
        c = arr[i] - arr[i - 1] - 1;
        if (k <= c):
            return arr[i - 1] + k;
        else:
            k -= c;
 
    return arr[n - 1] + k;
 
# Driver Code
k = 1;
arr =[ 1 ];
n = len(arr);
print(ksmallest(arr, n, k));
 
# This code is contributed by mits
C#
PHP
Javascript
Output : 

2
Time Complexity: O(nlog(n))
Auxiliary Space: O(1)
More efficient method : K-th smallest element after removing given integers from natural numbers | Set 2
This article is contributed by Anuj Chauhan. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
 





Like
8
Previous
Sorting 2D Vector in C++ | Set 2 (In descending order by row and column)
Next
Sorting Big Integers
Related Articles
1.
Find sum of Kth largest Euclidean distance after removing ith coordinate one at a time
2.
Average of remaining elements after removing K largest and K smallest elements from array
3.
Sort array of strings after sorting each string after removing characters whose frequencies are not a powers of 2
4.
Kth Smallest Element of a Matrix of given dimensions filled with product of indices
5.
Kth smallest element from an array of intervals
6.
Print X array elements closest to the Kth smallest element in the array
7.
Kth smallest or largest element in unsorted Array using Counting Sort
8.
Remaining array element after repeated removal of the smallest element from pairs with absolute difference of 2 or 0
9.
Find Kth largest element from right of every element in the array
10.
Find the kth smallest number with sum of digits as m
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
jit_t
29AjayKumar
princiraj1992
Rajput-Ji
Mithun Kumar
susmitakundugoaldanga
divyesh072019
pushpeshrajdx01
Article Tags :
Sorting
Practice Tags :
Sorting
Improve Article
Report Issue