Euclidean algorithms (Basic and Extended)

Difficulty Level : Medium
Last Updated : 01 Sep, 2022
Read
Discuss(30)
Courses
Practice
Video
The Euclidean algorithm is a way to find the greatest common divisor of two positive integers. GCD of two numbers is the largest number that divides both of them. A simple way to find GCD is to factorize both numbers and multiply common prime factors.
 

GCD

Basic Euclidean Algorithm for GCD: 
The algorithm is based on the below facts. 

If we subtract a smaller number from a larger one (we reduce a larger number), GCD doesn’t change. So if we keep subtracting repeatedly the larger of two, we end up with GCD.
Now instead of subtraction, if we divide the smaller number, the algorithm stops when we find the remainder 0.
Below is a recursive function to evaluate gcd using Euclid’s algorithm:

C
CPP
Java
Python3
# Python3 program to demonstrate Basic Euclidean Algorithm
 
 
# Function to return gcd of a and b
def gcd(a, b):
    if a == 0:
        return b
 
    return gcd(b % a, a)
 
# Driver code
if __name__ == "__main__":
  a = 10
  b = 15
  print("gcd(", a, ",", b, ") = ", gcd(a, b))
 
  a = 35
  b = 10
  print("gcd(", a, ",", b, ") = ", gcd(a, b))
 
  a = 31
  b = 2
  print("gcd(", a, ",", b, ") = ", gcd(a, b))
 
# Code Contributed By Mohit Gupta_OMG <(0_o)>
C#
PHP
Javascript
Output
GCD(10, 15) = 5
GCD(35, 10) = 5
GCD(31, 2) = 1
Time Complexity: O(Log min(a, b))
Auxiliary Space: O(Log (min(a,b))

Extended Euclidean Algorithm: 
 Extended Euclidean algorithm also finds integer coefficients x and y such that: ax + by = gcd(a, b) 

Examples:  

Input: a = 30, b = 20
Output: gcd = 10, x = 1, y = -1
(Note that 30*1 + 20*(-1) = 10)

Input: a = 35, b = 15
Output: gcd = 5, x = 1, y = -2
(Note that 35*1 + 15*(-2) = 5)

The extended Euclidean algorithm updates the results of gcd(a, b) using the results calculated by the recursive call gcd(b%a, a). Let values of x and y calculated by the recursive call be x1 and y1. x and y are updated using the below expressions. 

ax + by = gcd(a, b)
gcd(a, b) = gcd(b%a, a)
gcd(b%a, a) = (b%a)x1 + ay1
ax + by = (b%a)x1 + ay1
ax + by = (b – [b/a] * a)x1 + ay1
ax + by = a(y1 – [b/a] * x1) + bx1

Comparing LHS and RHS,
x = y1 – ⌊b/a⌋ * x1
 y = x1


Recommended Problem
Extended Euclidean Algorithm
Mathematical
Algorithms
Solve Problem
Submission count: 854
Below is an implementation of the above approach:

C++
C
Java
Python3
# Python program to demonstrate working of extended
# Euclidean Algorithm
 
# function for extended Euclidean Algorithm
 
 
def gcdExtended(a, b):
 
    # Base Case
    if a == 0:
        return b, 0, 1
 
    gcd, x1, y1 = gcdExtended(b % a, a)
 
    # Update x and y using results of recursive
    # call
    x = y1 - (b//a) * x1
    y = x1
 
    return gcd, x, y
 
 
# Driver code
a, b = 35, 15
g, x, y = gcdExtended(a, b)
print("gcd(", a, ",", b, ") = ", g)
C#
PHP
Javascript
Output : 

gcd(35, 15) = 5
Time Complexity: O(log N)
Auxiliary Space: O(log N)

How does Extended Algorithm Work? 
As seen above, x and y are results for inputs a and b,

a.x + b.y = gcd                      —-(1)  

And x1 and y1 are results for inputs b%a and a

(b%a).x1 + a.y1 = gcd   

When we put b%a = (b – (⌊b/a⌋).a) in above, 
we get following. Note that ⌊b/a⌋ is floor(b/a)

(b – (⌊b/a⌋).a).x1 + a.y1  = gcd

Above equation can also be written as below

b.x1 + a.(y1 – (⌊b/a⌋).x1) = gcd      —(2)

After comparing coefficients of ‘a’ and ‘b’ in (1) and 
(2), we get following, 
x = y1 – ⌊b/a⌋ * x1
y = x1

How is Extended Algorithm Useful? 
The extended Euclidean algorithm is particularly useful when a and b are coprime (or gcd is 1). Since x is the modular multiplicative inverse of “a modulo b”, and y is the modular multiplicative inverse of “b modulo a”. In particular, the computation of the modular multiplicative inverse is an essential step in RSA public-key encryption method.

This article is contributed by Ankur. Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above



Like
Previous
GCD of more than two (or array) numbers
Next
GCD, LCM and Distributive Property
Related Articles
1.
C Program for Basic Euclidean algorithms
2.
Java Program for Basic Euclidean algorithms
3.
Pairs with same Manhattan and Euclidean distance
4.
Find HCF of two numbers without using recursion or Euclidean algorithm
5.
Find sum of Kth largest Euclidean distance after removing ith coordinate one at a time
6.
Minimum Sum of Euclidean Distances to all given Points
7.
Calculate the Square of Euclidean Distance Traveled based on given conditions
8.
Time Complexity of Euclidean Algorithm
9.
C program to find the Euclidean distance between two points
10.
Extended Midy's theorem
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
jit_t
Nimit Garg
NamanJain31
TusharSabhani
Zifengli127
rahulas1505
ramsan1994
aashish1995
_saurabh_jaiswal
jeelranpariya
rishavnitro
nkhlsinha0
arunkumar2020
impiyushchaudhary001
janardansthox
Article Tags :
GCD-LCM
Mathematical
Practice Tags :
Mathematical
Report Issue