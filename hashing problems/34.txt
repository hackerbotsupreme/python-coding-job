Find subarray with given sum | Set 2 (Handles Negative Numbers)

Difficulty Level : Medium
Last Updated : 20 Sep, 2022
Read
Discuss(100+)
Courses
Practice
Video
Given an unsorted array of integers, find a subarray that adds to a given number. If there is more than one subarray with the sum of the given number, print any of them.

Examples:  

Input: arr[] = {1, 4, 20, 3, 10, 5}, sum = 33
Output: Sum found between indexes 2 and 4
Explanation: Sum of elements between indices
2 and 4 is 20 + 3 + 10 = 33

Input: arr[] = {10, 2, -2, -20, 10}, sum = -10
Output: Sum found between indexes 0 to 3
Explanation: Sum of elements between indices
0 and 3 is 10 + 2 – 2 – 20 = -10

Input: arr[] = {-10, 0, 2, -2, -20, 10}, sum = 20
Output: No subarray with given sum exists
Explanation: There is no subarray with the given sum

Recommended Problem
Subarray range with given sum
Arrays
Hash
+1 more
Solve Problem
Submission count: 20.6K
Note: We have discussed a solution that does not handle negative integers here. In this post, negative integers are also handled.

Naive Approach: To solve the problem follow the below idea:



A simple solution is to consider all subarrays one by one and check the sum of every subarray. The following program implements the simple solution. Run two loops: the outer loop picks a starting point I and the inner loop tries all subarrays starting from i.

Follow the given steps to solve the problem:

Traverse the array from start to end.
From every index start another loop from i to the end of the array to get all subarrays starting from i, and keep a variable sum to calculate the sum. For every index in the inner loop update sum = sum + array[j]If the sum is equal to the given sum then print the subarray.
For every index in the inner loop update sum = sum + array[j]
If the sum is equal to the given sum then print the subarray.
Below is the implementation of the above approach:

C++
Java
Python3
# Python3 program to print subarray
# with sum as given sum
 
 
# Returns true if the there is a subarray
# of arr[] with sum equal to 'sum' otherwise
# returns false. Also, prints the result */
def subArraySum(arr, n, sum):
 
    # Pick a starting point
    for i in range(n):
        curr_sum = 0
        # try all subarrays starting with 'i'
        for j in range(i, n):
            curr_sum += arr[j]
            if (curr_sum == sum):
                print("Sum found between indexes", i, "and", j)
                return
 
    print("No subarray found")
 
 
# Driver Code
if __name__ == "__main__":
    arr = [15, 2, 4, 8, 9, 5, 10, 23]
    n = len(arr)
    sum = 23
 
    # Function Call
    subArraySum(arr, n, sum)
 
 
# This code is contributed by phasing17
C#
Javascript
Output
Sum found between indexes 1 and 4
Time Complexity: O(N2)
Auxiliary Space: O(1)

Find subarray with given sum using Hash-Map:
To solve the problem follow the below idea:

The idea is to store the sum of elements of every prefix of the array in a hashmap, i.e, every index stores the sum of elements up to that index hashmap. So to check if there is a subarray with a sum equal to s, check for every index i, and sum up to that index as x. If there is a prefix with a sum equal to (x – s), then the subarray with the given sum is found

Follow the given steps to solve the problem:

Create a Hashmap (hm) to store a key-value pair, i.e, key = prefix sum and value = its index, and a variable to store the current sum (sum = 0) and the sum of the subarray as s
Traverse through the array from start to end.
For every element update the sum, i.e sum = sum + array[i]
If the sum is equal to s then print that the subarray with the given sum is from 0 to i
If there is any key in the HashMap which is equal to sum – s then print that the subarray with the given sum is from hm[sum – s] to i
Put the sum and index in the hashmap as a key-value pair.
Dry-run of the above approach: 



Below is the implementation of the above approach:

C++
Java
Python3
# Python3 program to print subarray with sum as given sum
 
# Function to print subarray with sum as given sum
 
 
def subArraySum(arr, n, Sum):
 
    # create an empty map
    Map = {}
 
    # Maintains sum of elements so far
    curr_sum = 0
 
    for i in range(0, n):
 
        # add current element to curr_sum
        curr_sum = curr_sum + arr[i]
 
        # if curr_sum is equal to target sum
        # we found a subarray starting from index 0
        # and ending at index i
        if curr_sum == Sum:
 
            print("Sum found between indexes 0 to", i)
            return
 
        # If curr_sum - sum already exists in map
        # we have found a subarray with target sum
        if (curr_sum - Sum) in Map:
 
            print("Sum found between indexes",
                  Map[curr_sum - Sum] + 1, "to", i)
 
            return
 
        Map[curr_sum] = i
 
    # If we reach here, then no subarray exists
    print("No subarray with given sum exists")
 
 
# Driver code
if __name__ == "__main__":
 
    arr = [10, 2, -2, -20, 10]
    n = len(arr)
    Sum = -10
 
    # Function call
    subArraySum(arr, n, Sum)
 
# This code is contributed by Rituraj Jain
C#
Javascript
Output
Sum found between indexes 0 to 3
Time complexity: O(N). If hashing is performed with the help of an array, then this is the time complexity. In case the elements cannot be hashed in an array a hash map can also be used as shown in the above code.
Auxiliary space: O(N). As a HashMap is needed, this takes linear space.

Related Article: Find subarray with given sum with negatives allowed in constant space

This article is contributed by Aditya Goel. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
 





Like
165
Previous
Find if there is a subarray with 0 sum
Next
Implementing our Own Hash Table with Separate Chaining in Java
Related Articles
1.
Check if array elements are consecutive in O(n) time and O(1) space (Handles Both Positive and negative numbers)
2.
Find Subarray with given sum | Set 1 (Non-negative Numbers)
3.
First subarray with negative sum from the given Array
4.
Largest sum contiguous subarray having only non-negative elements
5.
Maximum sum of array after removing a positive or negative subarray
6.
Find ratio of zeroes, positive numbers and negative numbers in the Array
7.
First subarray having sum at least half the maximum sum of any subarray of size K
8.
Find minimum subarray sum for each index i in subarray [i, N-1]
9.
Minimum cost to convert all elements of a K-size subarray to 0 from given Ternary Array with subarray sum as cost
10.
Longest Subarray of non-negative Integers
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
Sravan Reddy
shrikanth13
rituraj_jain
ManasChhabra2
nidhi_biet
umang-jain
andrew1234
avijitmondal1998
manikarora059
khushboogoyal499
prasanna1995
code_hunt
surindertarika1234
phasing17
codewithshinchan
janardansthox
Article Tags :
cpp-unordered_map
prefix-sum
STL
subarray
subarray-sum
Arrays
Hash
Practice Tags :
Arrays
Hash
prefix-sum
STL