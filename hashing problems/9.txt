
Union and Intersection of two Linked List using Hashing

Difficulty Level : Basic
Last Updated : 27 Jan, 2023
Read
Discuss
Courses
Practice
Video
Given two Linked Lists, create union and intersection lists that contain union and intersection of the elements present in the given lists. Order of elements in output lists doesn’t matter. Examples:

Input:
   List1: 10 -> 15 -> 4 -> 20
   List2: 8 -> 4 -> 2 -> 10
Output:
   Intersection List: 4 -> 10
   Union List: 2 -> 8 -> 20 -> 4 -> 15 -> 10
Explanation: In this two lists 4 and 10 nodes 
are common. The union lists contains 
all the nodes of both the lists.

Input:
   List1: 1 -> 2 -> 3 -> 4
   List2: 3 -> 4 -> 8 -> 10
Output:
   Intersection List: 3 -> 4
   Union List: 1 -> 2 -> 3 -> 4 -> 8 -> 10
Explanation: In this two lists 4 and 3 nodes 
are common. The union lists contains 
all the nodes of both the lists.
Recommended Problem
Intersection of Two Linked Lists
Linked List
Hash
+3 more
VMWare
Flipkart
+8 more
Solve Problem
Submission count: 45K
We have already discussed Method-1 and Method-2 of this question. In this post, its Method-3 (Using Hashing) is discussed with a Time Complexity of O(m+n) i.e. better than both methods discussed earlier.

Implementation:
1- Start traversing both the lists.
   a) Store the current element of both lists
      with its occurrence in the map.
2- For Union: Store all the elements of the map 
   in the resultant list.
3- For Intersection: Store all the elements only 
   with an occurrence of 2 as 2 denotes that 
   they are present in both the lists.
Below is the C++ implementation of the above steps. 

CPP
Java
Python3
# Python code for finding union and intersection of linkedList
 
 
class linkedList:
    def __init__(self):
        self.head = None
        self.tail = None
 
    def insert(self, data):
        if self.head is None:
            self.head = Node(data)
            self.tail = self.head
        else:
            self.tail.next = Node(data)
            self.tail = self.tail.next
 
 
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
 
# return the head of new list containing the intersection of 2 linkedList
 
 
def findIntersection(head1, head2):
    # creating a map
    hashmap = {}
 
    # traversing on first list
    while(head1 != None):
        data = head1.data
        if(data not in hashmap.keys()):
            hashmap[data] = 1
        head1 = head1.next
 
    # making a new linkedList
    ans = linkedList()
    while(head2 != None):
        data = head2.data
        if(data in hashmap.keys()):
            # adding data to new list
            ans.insert(data)
        head2 = head2.next
    return ans.head
 
# return the head of new list containing the union of 2 linkedList
 
 
def union(head1, head2):
    # creating a map
    hashmap = {}
 
    # traversing on first list
    while(head1 != None):
        data = head1.data
        if(data not in hashmap.keys()):
            hashmap[data] = 1
        head1 = head1.next
 
    while(head2 != None):
        data = head2.data
        if(data not in hashmap.keys()):
            hashmap[data] = 1
        head2 = head2.next
 
    # making a new linkedList
    ans = linkedList()
 
    # traverse on hashmap
    for key, value in hashmap.items():
        ans.insert(key)
 
    return ans.head
 
 
def printList(head):
    while head:
        print(head.data, end=' ')
        head = head.next
    print()
 
 
if __name__ == '__main__':
 
    # first list
    ll1 = linkedList()
    ll1.insert(1)
    ll1.insert(2)
    ll1.insert(3)
    ll1.insert(4)
    ll1.insert(5)
 
    # second list
    ll2 = linkedList()
    ll2.insert(1)
    ll2.insert(3)
    ll2.insert(5)
    ll2.insert(6)
 
    print("First list is ")
    printList(ll1.head)
 
    print("Second list is ")
    printList(ll2.head)
 
    print("Intersection list is")
    printList(findIntersection(ll1.head, ll2.head))
 
    print("Union list is ")
    printList(union(ll1.head, ll2.head))
 
 
# This code is contributed by Arpit Jain
Javascript
Output:

First list is 
5 4 3 2 1 
Second list is 
6 5 3 1 
Intersection list is 
3 5 1 
Union list is 
3 4 6 5 2 1 
We can also handle the case of duplicates by maintaining separate Hash for both the lists. Complexity Analysis:

Time Complexity: O(m+n). Here ‘m’ and ‘n’ are number of elements present in first and second lists respectively. Reason: For Union: Traverse both the lists, store the elements in Hash-map and update the respective count. For Intersection: Check if count of an element in hash-map is ‘2’.
Auxiliary Space: O(m+n). Use of Hash-map data structure for storing values.
This article is contributed by Sahil Chhabra. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.





Like
24
Previous
Load Factor and Rehashing
Next
Minimum operation to make all elements equal in array
Related Articles
1.
Union and Intersection of two Linked List using Merge Sort
2.
Union and Intersection of two Linked Lists
3.
C++ Program For Union And Intersection Of Two Linked Lists
4.
Java Program For Union And Intersection Of Two Linked Lists
5.
C Program For Union And Intersection Of Two Linked Lists
6.
Find Union and Intersection of two unsorted arrays
7.
Union and Intersection of two Graphs
8.
Get the Intersection point of two Linked List by counting nodes
9.
Intersection point of two Linked List by marking visited nodes
10.
Find intersection point of two Linked Lists without finding the length
Article Contributed By :