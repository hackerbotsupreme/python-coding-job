Count quadruples from four sorted arrays whose sum is equal to a given value x

Difficulty Level : Easy
Last Updated : 27 Sep, 2022
Read
Discuss
Courses
Practice
Video
Given four sorted arrays each of size n of distinct elements. Given a value x. The problem is to count all quadruples(group of four numbers) from all the four arrays whose sum is equal to x.
Note: The quadruple has an element from each of the four arrays.

Examples: 

Input : arr1 = {1, 4, 5, 6},
        arr2 = {2, 3, 7, 8},
        arr3 = {1, 4, 6, 10},
        arr4 = {2, 4, 7, 8} 
        n = 4, x = 30
Output : 4
The quadruples are:
(4, 8, 10, 8), (5, 7, 10, 8),
(5, 8, 10, 7), (6, 7, 10, 7)

Input : For the same above given fours arrays
        x = 25
Output : 14
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Method 1 (Naive Approach): 

Using four nested loops generate all quadruples and check whether elements in the quadruple sum up to x or not. 

C++
Java
Python3
# A Python3 implementation to count
# quadruples from four sorted arrays
# whose sum is equal to a given value x
 
# function to count all quadruples
# from four sorted arrays whose sum
# is equal to a given value x
def countquadruples(arr1, arr2,
                     arr3, arr4, n, x):
    count = 0
 
    # generate all possible
    # quadruples from the four
    # sorted arrays
    for i in range(n):
        for j in range(n):
            for k in range(n):
                for l in range(n):
 
                    # check whether elements of
                    # quadruple sum up to x or not
                    if (arr1[i] + arr2[j] +
                        arr3[k] + arr4[l] == x):
                        count += 1
                         
    # required count of quadruples
    return count
 
# Driver Code
arr1 = [1, 4, 5, 6]
arr2 = [2, 3, 7, 8]
arr3 = [1, 4, 6, 10]
arr4 = [2, 4, 7, 8 ]
n = len(arr1)
x = 30
print("Count = ", countquadruples(arr1, arr2,
                                   arr3, arr4, n, x))
 
# This code is contributed
# by Shrikant13
C#
PHP
Javascript
Output:  

Count = 4
Time Complexity: O(n4) 
Auxiliary Space: O(1)
 

Method 2 (Binary Search): Generate all triplets from the 1st three arrays. For each triplet so generated, find the sum of elements in the triplet. Let it be T. Now, search the value (x – T) in the 4th array. If the value found in the 4th array, then increment count. This process is repeated for all the triplets generated from the 1st three arrays. 



C++
Java
Python3
# Python implementation to count quadruples from
# four sorted arrays whose sum is equal to a
# given value x
 
# find the 'value' in the given array 'arr[]'
# binary search technique is applied
def isPresent(arr,low,high,value):
    while(low<=high):
        mid=(low+high)//2
        # 'value' found
        if(arr[mid]==value):
            return True
        elif(arr[mid]>value):
            high=mid-1
        else:
            low=mid+1
    # 'value' not found
    return False
 
# function to count all quadruples from four
# sorted arrays whose sum is equal to a given value x
 
def countQuadruples(arr1,arr2,arr3,arr4,n,x):
    count=0
     
    #generate all triplets from the 1st three arrays
    for i in range(n):
        for j in range(n):
            for k in range(n):
                # calculate the sum of elements in
                # the triplet so generated
                T=arr1[i]+arr2[j]+arr3[k]
                 
                # check if 'x-T' is present in 4th
                # array or not
                if(isPresent(arr4,0,n-1,x-T)):
                    # increment count
                    count=count+1
    # required count of quadruples
    return count
     
# Driver program to test above
 
# four sorted arrays each of size 'n'
arr1=[1, 4, 5, 6]
arr2=[2, 3, 7, 8]
arr3=[1, 4, 6, 10]
arr4=[2, 4, 7, 8]
 
n=len(arr1)
x=30
print("Count = {}".format(countQuadruples(arr1,arr2,arr3,arr4,n,x)))
 
# This code is contributed by Pushpesh Raj.
C#
PHP
Javascript
Output:  

Count = 4
Time Complexity: O(n3logn) 
Auxiliary Space: O(1)
 

Method 3 (Use of two pointers): Generate all pairs from the 1st two arrays. For each pair so generated, find the sum of elements in the pair. Let it be p_sum. For each p_sum, count pairs from the 3rd and 4th sorted array with sum equal to (x – p_sum). Accumulate these count in the total_count of quadruples. 

C++
Java
Python3
# Python3 implementation to
# count quadruples from four
# sorted arrays whose sum is
# equal to a given value x
# count pairs from the two
# sorted array whose sum
# is equal to the given 'value'
def countPairs(arr1, arr2,
               n, value):
   
     count = 0
     l = 0
     r = n - 1
     
     # traverse 'arr1[]' from
     # left to right
     # traverse 'arr2[]' from
     # right to left
     while (l < n and r >= 0):
          sum = arr1[l] + arr2[r]
           
          # if the 'sum' is equal
          # to 'value', then
          # increment 'l', decrement
          # 'r' and increment 'count'
          if (sum == value):
               l += 1
               r -= 1
               count += 1
               
               # if the 'sum' is greater
               # than 'value', then decrement r
          elif (sum > value):
               r -= 1
               
          # else increment l
          else:
               l += 1
               
     # required count of pairs
     # print(count)
     return count
 
# function to count all quadruples
# from four sorted arrays whose sum
# is equal to a given value x
def countQuadruples(arr1, arr2,
                    arr3, arr4,
                    n, x):
     count = 0
     
     # generate all pairs from
     # arr1[] and arr2[]
     for i in range(0, n):
          for j in range(0, n):
             
               # calculate the sum of
               # elements in the pair
               # so generated
               p_sum = arr1[i] + arr2[j]
                 
               # count pairs in the 3rd
               # and 4th array having
               # value 'x-p_sum' and then
               # accumulate it to 'count
               count += int(countPairs(arr3, arr4,
                                       n, x - p_sum))
     # required count of quadruples
     return count
 
# Driver code
arr1 = [1, 4, 5, 6]
arr2 = [2, 3, 7, 8]
arr3 = [1, 4, 6, 10]
arr4 = [2, 4, 7, 8]
n = len(arr1)
x = 30
print("Count = ", countQuadruples(arr1, arr2,
                                  arr3, arr4,
                                  n, x))
 
# This code is contributed by Stream_Cipher
C#
Javascript
Output:  

Count = 4
Time Complexity: O(n3) 
Auxiliary Space: O(1)
 

Method 4 Efficient Approach(Hashing): Create a hash table where (key, value) tuples are represented as (sum, frequency) tuples. Here the sum are obtained from the pairs of 1st and 2nd array and their frequency count is maintained in the hash table. Hash table is implemented using unordered_map in C++. Now, generate all pairs from the 3rd and 4th array. For each pair so generated, find the sum of elements in the pair. Let it be p_sum. For each p_sum, check whether (x – p_sum) exists in the hash table or not. If it exists, then add the frequency of (x – p_sum) to the count of quadruples.  

C++
Java
Python3
# Python implementation to count quadruples from
# four sorted arrays whose sum is equal to a
# given value x
 
# function to count all quadruples from four sorted
# arrays whose sum is equal to a given value x
def countQuadruples(arr1, arr2, arr3, arr4, n, x):
    count = 0
     
    # unordered_map 'um' implemented as hash table
    # for <sum, frequency> tuples  
    m = {}
     
    # count frequency of each sum obtained from the
    # pairs of arr1[] and arr2[] and store them in 'um'
    for i in range(n):
        for j in range(n):
            if (arr1[i] + arr2[j]) in m:
                m[arr1[i] + arr2[j]] += 1
            else:
                m[arr1[i] + arr2[j]] = 1
     
    # generate pair from arr3[] and arr4[]
    for k in range(n):
        for l in range(n):
             
            # calculate the sum of elements in
            # the pair so generated
            p_sum = arr3[k] + arr4[l]
             
            # if 'x-p_sum' is present in 'um' then
            # add frequency of 'x-p_sum' to 'count'
            if (x - p_sum) in m:
                count += m[x - p_sum]
     
    # required count of quadruples
    return count
 
# Driver program to test above
 
# four sorted arrays each of size 'n'
arr1 = [1, 4, 5, 6]
arr2 = [2, 3, 7, 8 ]
arr3 = [1, 4, 6, 10]
arr4 = [2, 4, 7, 8 ]
 
n = len(arr1)
x = 30
print("Count =", countQuadruples(arr1, arr2, arr3, arr4, n, x))
 
# This code is contributed by avanitrachhadiya2155
C#
Javascript
Output:  

Count = 4
Time Complexity: O(n2) 
Auxiliary Space: O(n2) 

This article is contributed by Ayush Jauhari. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 
count pairs in the 3rd and 4th sorted array with sum equal to (x – p_sum)
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
 





Like
13
Previous
Maximum product of subsequence of size k
Next
OLA Interview Experience | Set 11 ( For Internship)
Related Articles
1.
Count all Quadruples from four arrays such that their XOR equals to 'x'
2.
Count pairs from two sorted arrays whose sum is equal to a given value x
3.
Count of quadruples with product of a pair equal to the product of the remaining pair
4.
Count quadruples of given type from given array
5.
Maximize sum of second minimums in all quadruples of a given array
6.
Count triplets in a sorted doubly linked list whose product is equal to a given value x
7.
Count quadruples (i, j, k, l) in an array such that i < j < k < l and arr[i] = arr[k] and arr[j] = arr[l]
8.
Find the Number of Maximum Product Quadruples
9.
Number of quadruples where the first three terms are in AP and last three terms are in GP
10.
Find four elements that sum to a given value | Set 1 (n^3 solution)
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
shrikanth13
princiraj1992
ukasp
Akanksha_Rai
Rajput-Ji
29AjayKumar
Stream_Cipher
avanitrachhadiya2155
rag2127
decode2207
ab2127
unknown2108
pushpeshrajdx01
simmytarika5
Article Tags :
Binary Search
Hash
Searching
Sorting
Practice Tags :
Binary Search
Hash
Searching
Sorting