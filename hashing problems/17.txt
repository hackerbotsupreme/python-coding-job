Check if two arrays are equal or not

Difficulty Level : Easy
Last Updated : 27 Jan, 2023
Read
Discuss(50+)
Courses
Practice
Video
Given two arrays, arr1 and arr2 of equal length N, the task is to find if the given arrays are equal or not. 

Two arrays are said to be equal if:

both of them contain the same set of elements, 
arrangements (or permutations) of elements might/might not be same.
If there are repetitions, then counts of repeated elements must also be the same for two arrays to be equal.
Examples: 

Input: arr1[] = {1, 2, 5, 4, 0}, arr2[] = {2, 4, 5, 0, 1}
Output: Yes

Input: arr1[] = {1, 2, 5, 4, 0, 2, 1}, arr2[] = {2, 4, 5, 0, 1, 1, 2} 
Output: Yes

 Input: arr1[] = {1, 7, 1}, arr2[] = {7, 7, 1}
Output: No

Recommended Problem
Check if two arrays are equal or not
Arrays
Hash
+3 more
Goldman Sachs
Solve Problem
Submission count: 2.1L
Check if two arrays are equal or not using Sorting
Follow the steps below to solve the problem using this approach:



Sort both the arrays
Then linearly compare elements of both the arrays
If all are equal then return true, else return false
 
Complete Interview Preparation - GFG 

Below is the implementation of the above approach:

C++
Java
Python3
# Python3 program to find given
# two array are equal or not
 
# Returns true if arr1[0..n-1] and
# arr2[0..m-1] contain same elements.
 
 
def areEqual(arr1, arr2, N, M):
 
    # If lengths of array are not
    # equal means array are not equal
    if (N != M):
        return False
 
    # Sort both arrays
    arr1.sort()
    arr2.sort()
 
    # Linearly compare elements
    for i in range(0, N):
        if (arr1[i] != arr2[i]):
            return False
 
    # If all elements were same.
    return True
 
 
# Driver Code
if __name__ == "__main__":
    arr1 = [3, 5, 2, 5, 2]
    arr2 = [2, 3, 5, 5, 2]
    n = len(arr1)
    m = len(arr2)
 
    if (areEqual(arr1, arr2, n, m)):
        print("Yes")
    else:
        print("No")
C#
PHP
Javascript
Output
Yes
Time Complexity: O(N*log(N)) 
Auxiliary Space: O(1)

Check if two arrays are equal or not using Hashing
Store count of all elements of arr1[] in a hash table. Then traverse arr2[] and check if the count of every element in arr2[] matches with the count of elements of arr1[].

Follow the steps mentioned below to implement the approach:


First check if length of arr1 is not equal to the length of arr2 then return false
Then traverse over first array and store the count of every element in the hash map
Then traverse over second array and decrease the count of its elements in the hash map. If that element is not present or the count of that element is 
zero in the hash map, then return false, else decrease the count of that element
Return true at the end, as both the arrays are equal by now
Below is the implementation of the above approach:

C++
Java
Python3
# Python3 program for the above approach
 
# Returns true if arr1[0..N-1] and
# arr2[0..M-1] contain same elements.
 
 
def is_arr_equal(arr1, arr2):
        # Check if the length of arrays are
    # equal or not: A Easy Logic Check
    if len(arr1) != len(arr2):
        return False
 
    # Create a dict named count to
    # store counts of each element
    count = {}
    # Store the elements of arr1
    # and their counts in the dictionary
    for i in arr1:
        if i in count:
                # Element already in dict, simply increment its count
            count[i] += 1
        else:
                # Element found for first time, initialize it with value 1.
            count[i] = 1
 
    # Traverse through arr2 and compare
    # the elements and its count with
    # the elements of arr1
    for i in arr2:
        # Return false if the element
        # is not in count or if any element
        # appears more no. of times than in arr1
        if i not in count or count[i] == 0:
            return False
        else:
                # If element is found, decrement
                # its value in the dictionary
            count[i] -= 1
    # Return true if both arr1 and
    # arr2 are equal
    return True
 
 
# Driver Code
if __name__ == "__main__":
    arr1 = [3, 5, 2, 5, 2]
    arr2 = [2, 3, 5, 5, 2]
 
    if is_arr_equal(arr1, arr2):
        print("Yes")
    else:
        print("No")
C#
Javascript
Output
Yes
Time Complexity: O(N) 
Auxiliary Space: O(N)

Check if two arrays are equal or not using Map
Initialise a map say unmap
Insert all elements of array A into map
Remove all elements of array B from map
Check if the size of unmap becomes zero
If zero, return true
Otherwise, return false
Below is the implementation of the above approach:

C++
Java
Python3
# Python program to find Non-overlapping sum
from collections import Counter
 
# function for calculating
# Non-overlapping sum of two array
def isEqual(A, B):
    # Use Counter to count the frequency of elements
    unmap = Counter(A)
     
    # Remove all elements of B from map
    for i in B:
        unmap[i] -= 1
        if unmap[i] == 0:
            del unmap[i]
     
    # Check if size of unmap becomes zero
    # If zero, return true
    # Otherwise, return false
    if len(unmap) == 0:
        return True
    return False
 
# Driver code
A = [5, 4, 9, 2, 3]
B = [5, 4, 9, 2, 3]
 
# function call
#rint(isEqual(A, B))
print(1 if isEqual(A, B) else 0)
Output
1
Time Complexity: O(n)
Auxiliary Space: O(n)

Check if two arrays are equal or not using Counter Class
We can use the Counter class from the collections module to count the number of occurrences of each element in the arrays and then compare the resulting dictionaries.

Steps:

Use the Counter class to count the number of occurrences of each element in a and b.
Use the == operator to compare the resulting Counter objects.
Return the result of the comparison.
Import the Counter class from the collections module.
Below is the implementation of the above approach:

Python3
from collections import Counter
 
def arrays_equal(a, b):
    return Counter(a) == Counter(b)
 
a = [3, 2, 1, 3, 2, 1]
b = [1, 2, 3, 1, 2, 3]
c = [4, 5, 6, 4, 5, 6]
 
print(arrays_equal(a, b))  # True
print(arrays_equal(a, c))  # False
 
# This code is contributed by Susobhan Akhuli
C++
Output
True
False
Time Complexity: O(N) [To count the number of occurrences of each element in the arrays]
Auxiliary Space: O(1)





Like
68
Previous
Non-overlapping sum of two sets
Next
Count items common to both the lists but with different prices
Related Articles
1.
Check if two arrays can be made equal by swapping pairs of one of the arrays
2.
Find sub-arrays from given two arrays such that they have equal sum
3.
Minimize sum of product of same-indexed elements of two arrays by reversing a subarray of one of the two arrays
4.
Minimum sum of two elements from two arrays such that indexes are not same
5.
Check if the sequence of elements in given two Arrays is same or not
6.
Check if two arrays can be made equal by reversing subarrays multiple times
7.
Check if two arrays can be made equal by reversing any subarray once
8.
Check if given two Arrays are equal (using Map)
9.
Check if the count of inversions of two given types on an Array are equal or not
10.
Check whether two strings can be made equal by reversing substring of equal length from both strings
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
vt_m
Shivi_Aggarwal
imrohan
princiraj1992
karthikaravindt88
anupriyanishad
sayantanbose2001
vaiibhav
chinmoy1997pal
sravankumar_171fa07058
avijitmondal1998
anikaseth98
devadarsh7
sscheto
pushpeshrajdx01
NithinS1
hardikkoriintern
anujk2901
sagartomar9927
janardansthox
garvitpr1hev
hkdass001
karandeep1234
susobhanakhuli
Article Tags :
Goldman Sachs
Arrays
Hash
Sorting
Practice Tags :
Goldman Sachs
Arrays
Hash
Sorting
Improve Article
Report Issue