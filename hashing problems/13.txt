Most frequent element in an array

Difficulty Level : Easy
Last Updated : 11 Jan, 2023
Read
Discuss
Courses
Practice
Video
Given an array, find the most frequent element in it. If there are multiple elements that appear a maximum number of times, print any one of them.

Examples: 

Input : arr[] = {1, 3, 2, 1, 4, 1}
Output : 1
Explanation: 1 appears three times in array which is maximum frequency.

Input : arr[] = {10, 20, 10, 20, 30, 20, 20}
Output : 20

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
A simple solution is to run two loops. The outer loop picks all elements one by one. The inner loop finds the frequency of the picked element and compares it with the maximum so far. 

Implementation:

C++
Java
Python3
# Python3 program to find the most
# frequent element in an array.
def mostFrequent(arr, n):
  maxcount = 0;
  element_having_max_freq = 0;
  for i in range(0, n):
    count = 0
    for j in range(0, n):
      if(arr[i] == arr[j]):
        count += 1
    if(count > maxcount):
      maxcount = count
      element_having_max_freq = arr[i]
    
  return element_having_max_freq;
  
# Driver Code
arr = [40,50,30,40,50,30,30]
n = len(arr)
print(mostFrequent(arr, n))
  
# This code is contributed by Arpit Jain
C#
Javascript
Output


30
The time complexity of this solution is O(n2) since 2 loops are running from i=0 to i=n we can improve its time complexity by taking a visited  array and skipping numbers for which we already calculated the frequency.
Auxiliary space: O(1) as it is using constant space for variables

A better solution is to do the sorting. We first sort the array, then linearly traverse the array. 

Implementation: 

C++
C
Java
Python3
# Python3 program to find the most
# frequent element in an array.
  
  
def mostFrequent(arr, n):
  
    # Sort the array
    arr.sort()
  
    # find the max frequency using
    # linear traversal
    max_count = 1
    res = arr[0]
    curr_count = 1
  
    for i in range(1, n):
        if (arr[i] == arr[i - 1]):
            curr_count += 1
        else:
            curr_count = 1
  
         # If last element is most frequent
        if (curr_count > max_count):
            max_count = curr_count
            res = arr[i - 1]
  
    return res
  
  
# Driver Code
arr = [40,50,30,40,50,30,30]
n = len(arr)
print(mostFrequent(arr, n))
  
# This code is contributed by Smitha Dinesh Semwal.
C#
PHP
Javascript
Output
30
Time Complexity: O(nlog(n)) 
Auxiliary Space: O(1)

An efficient solution is to use hashing. We create a hash table and store elements and their frequency counts as key-value pairs. Finally, we traverse the hash table and print the key with the maximum value.  

C++
Java
Python3
# Python3 program to find the most 
# frequent element in an array.
import math as mt
  
def mostFrequent(arr, n):
  
    # Insert all elements in Hash.
    Hash = dict()
    for i in range(n):
        if arr[i] in Hash.keys():
            Hash[arr[i]] += 1
        else:
            Hash[arr[i]] = 1
  
    # find the max frequency
    max_count = 0
    res = -1
    for i in Hash: 
        if (max_count < Hash[i]): 
            res = i
            max_count = Hash[i]
          
    return res
  
# Driver Code
arr = [ 40,50,30,40,50,30,30] 
n = len(arr)
print(mostFrequent(arr, n))
  
# This code is contributed 
# by Mohit kumar 29
C#
Javascript
Output
30
Time Complexity: O(n) 
Auxiliary Space: O(n)

An efficient solution to this problem can be to solve this problem by Mooreâ€™s voting Algorithm.

NOTE: THE ABOVE VOTING ALGORITHM ONLY WORKS WHEN THE MAXIMUM OCCURRING ELEMENT IS MORE THAN (SIZEOFARRAY/2) TIMES;

In this method, we will find the maximum occurred integer by counting the votes a number has.

C++
Java
Python3
def maxFreq(arr, n):
      
    # Using moore's voting algorithm
    res = 0
    count = 1
      
    for i in range(1, n):
        if (arr[i] == arr[res]):
            count += 1
        else:
            count -= 1
          
        if (count == 0):
            res = i
            count = 1
          
    return arr[res]
  
# Driver code
arr = [ 40, 50, 30, 40, 50, 30, 30 ]
n = len(arr)
freq =  maxFreq(arr, n)
count = 0
  
for i in range (n):
        if(arr[i] == freq):
            count += 1
          
print("Element ", maxFreq(arr , n), 
      " occurs ", count, " times")
  
# This code is contributed by shivanisinghss2110
C#
Javascript
Output
Element 30 occurs 3 times
Time Complexity: O(n)
Auxiliary Space: O(1)





Like
71
Previous
Maximum distance between two occurrences of same element in array
Next
First element occurring k times in an array
Related Articles
1.
Minimum distance between any most frequent and least frequent element of an array
2.
Generate an array consisting of most frequent greater elements present on the right side of each array element
3.
Most frequent element in Array after replacing given index by K for Q queries
4.
Remove an occurrence of most frequent array element exactly K times
5.
Find the most frequent element K positions apart from X in given Array
6.
Find given occurrences of Mth most frequent element of Array
7.
Smallest subarray with all occurrences of a most frequent element
8.
Count of subarrays with X as the most frequent element, for each value of X from 1 to N
9.
Queries to insert, delete one occurrence of a number and print the least and most frequent element
10.
Find the most frequent digit without using array/string
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
kartik
@kartik
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
vt_m
nitin mittal
dipesh_jain
manishshaw1
mohit kumar 29
code_hunt
rutvik_56
ashishskkumar321
jayadeepbose
rdtank
saurabh1990aror
noboruwatanabe
shivanisinghss2110
adityakumar129
kalaiabster
avtarkumar719
111arpit1
codewithmini
abhijeet19403
hardikkoriintern
noviced3vq6
ajaymakvana
Article Tags :
Hash
Searching
Sorting
Practice Tags :
Hash
Searching
Sorting
Improve Article
Report Issue