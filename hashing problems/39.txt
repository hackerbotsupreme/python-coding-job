orting using trivial hash function

Difficulty Level : Hard
Last Updated : 23 Dec, 2022
Read
Discuss
Courses
Practice
Video
We have read about various sorting algorithms such as heap sort, bubble sort, merge sort and others. 
Here we will see how can we sort N elements using a hash array. But this algorithm has a limitation. We can sort only those N elements, where the value of elements is not large (typically not above 10^6).

Examples:  

Input :  9 4 3 5 8 
Output : 3 4 5 8 9

Explanation of sorting using hash:

Step 1: Create a hash array of size(max_element), since that is the maximum we will need 
Step 2: Traverse through all the elements and keep a count of number of occurrence of a particular element. 
Step 3: After keeping a count of occurrence of all elements in the hash table, simply iterate from 0 to max_element in the hash array 
Step 4: While iterating in the hash array, if we find the value stored at any hash position is more than 0, which indicated that the element is present at least once in the original list of elements. 
Step 5: Hash[i] has the count of the number of times an element is present in the list, so when its >0, we print those number of times the element. 
 
If you want to store the elements, use another array to store them in a sorted way. 
If we want to sort it in descending order, we simply traverse from max to 0 and repeat the same procedure.
Below is the implementation of the above approach: 

C++
Java
Python3
# Python3 program to sort an array
# using hash function
 
 
def sortUsingHash(a, n):
 
    # find the maximum element
    Max = max(a)
 
    # create a hash function upto
    # the max size
    Hash = [0] * (Max + 1)
 
    # traverse through all the elements
    # and keep a count
    for i in range(0, n):
        Hash[a[i]] += 1
 
    # Traverse upto all elements and check
    # if it is present or not. If it is
    # present, then print the element the
    # number of times it's present. Once we
    # have printed n times, that means we
    # have printed n elements so break out
    # of the loop
    for i in range(0, Max + 1):
 
        # if present
        if Hash[i] != 0:
 
            # print the element that number
            # of times it's present
            for j in range(0, Hash[i]):
                print(i, end=" ")
 
 
# Driver Code
if __name__ == "__main__":
 
    a = [9, 4, 3, 2, 5, 2, 1, 0, 4,
         3, 5, 10, 15, 12, 18, 20, 19]
    n = len(a)
 
    sortUsingHash(a, n)
 
# This code is contributed by Rituraj Jain
C#
Javascript
Output
0 1 2 2 3 3 4 4 5 5 9 10 12 15 18 19 20 
Time Complexity: O(max*n), where max is maximum element and n is the length of given array
Auxiliary Space: O(max)
 



How to handle negative numbers? 

In case the array has negative numbers and positive numbers, we keep two hash arrays to keep a track of positive and negative elements.

Explanation of sorting using hashing if the array has negative and positive numbers: 

Step 1: Create two hash arrays, one for positive and the other for negative 
Step 2: the positive hash array will have a size of max and the negative array will have a size of min 
Step 3: traverse from min to 0 in the negative hash array, and print the elements in the same way we did for positives. 
Step 4: Traverse from 0 to max for positive elements and print them in the same manner as explained above. 
Below is the implementation of the above approach: 

C++
Java
Python3
# Python3 program to sort an array using hash
# function with negative values allowed.
 
 
def sortUsingHash(a, n):
 
    # find the maximum element
    Max = max(a)
    Min = abs(min(a))
 
    # create a hash function upto the max size
    hashpos = [0] * (Max + 1)
    hashneg = [0] * (Min + 1)
 
    # traverse through all the elements and
    # keep a count
    for i in range(0, n):
        if a[i] >= 0:
            hashpos[a[i]] += 1
        else:
            hashneg[abs(a[i])] += 1
 
    # Traverse up to all negative elements
    # and check if it is present or not.
    # If it is present, then print the
    # element the number of times it's present.
    # Once we have printed n times, that means
    # we have printed n elements so break out
    # of the loop
    for i in range(Min, 0, -1):
        if hashneg[i] != 0:
 
            # print the element that number of times
            # it's present. Print the negative element
            for j in range(0, hashneg[i]):
                print((-1) * i, end=" ")
 
    # Traverse upto all elements and check if
    # it is present or not. If it is present,
    # then print the element the number of
    # times it's present once we have printed
    # n times, that means we have printed n
    # elements, so break out of the loop
    for i in range(0, Max + 1):
 
        # if present
        if hashpos[i] != 0:
 
            # print the element that number
            # of times it's present
            for j in range(0, hashpos[i]):
                print(i, end=" ")
 
 
# Driver Code
if __name__ == "__main__":
 
    a = [-1, -2, -3, -4, -5, -6,
         8, 7, 5, 4, 3, 2, 1, 0]
 
    n = len(a)
    sortUsingHash(a, n)
 
# This code is contributed by Rituraj Jain
C#
Javascript
Output
-6 -5 -4 -3 -2 -1 0 1 2 3 4 5 7 8 
Complexity: 
This sort function can have complexity O(max_element). So performance depends on that set of data provided.

Limitations: 

Can only sort array elements of limited range (typically from -10^6 to +10^6) 
Auxiliary space in worst cases is O(max_element) + O(min_element)
Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
5
Previous
Maximize elements using another array
Next
Smallest subarray with k distinct numbers
Related Articles
1.
Index Mapping (or Trivial Hashing) with negatives allowed
2.
What are Hash Functions and How to choose a good Hash Function?
3.
Hash Functions and list/types of Hash functions
4.
Sorting objects using In-Place sorting algorithm
5.
Know Your Sorting Algorithm | Set 1 (Sorting Weapons used by Programming Languages)
6.
Count Distinct Strings present in an array using Polynomial rolling hash function
7.
String hashing using Polynomial rolling hash function
8.
Classify strings from an array using Custom Hash Function
9.
Hash Function for String data in C#
10.
Cryptographic Hash Function in Java
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
Striver
@Striver
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
rituraj_jain
Rajput-Ji
princiraj1992
Akanksha_Rai
29AjayKumar
RishabhPrabhu
ankita_saini
sweetyty
hardikkoriintern
hkdass001
Article Tags :
limited-range-elements
Hash
Sorting
Technical Scripter
Practice Tags :
Hash
Sorting
Improve Article
Report Issue