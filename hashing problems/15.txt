How to check if two given sets are disjoint?

Difficulty Level : Easy
Last Updated : 23 Dec, 2022
Read
Discuss(20+)
Courses
Practice
Video
Given two sets represented by two arrays, how to check if the given two sets are disjoint or not? It may be assumed that the given arrays have no duplicates.

Input: set1[] = {12, 34, 11, 9, 3}
       set2[] = {2, 1, 3, 5}
Output: Not Disjoint
3 is common in two sets.

Input: set1[] = {12, 34, 11, 9, 3}
       set2[] = {7, 2, 1, 5}
Output: Yes, Disjoint
There is no common element in two sets.
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
There are plenty of methods to solve this problem, itâ€™s a good test to check how many solutions you can guess.

Method 1 (Simple): Iterate through every element of the first set and search it in another set, if any element is found, return false. If no element is found, return true. The time complexity of this method is O(mn).

Following is the implementation of the above idea.

C++
Java
Python
# A Simple python 3 program to check
# if two sets are disjoint
 
# Returns true if set1[] and set2[] are disjoint, else false
def areDisjoint(set1, set2, m, n):
    # Take every element of set1[] and search it in set2
    for i in range(0, m):
        for j in range(0, n):
            if (set1[i] == set2[j]):
                return False
 
    # If no element of set1 is present in set2
    return True
 
 
# Driver program
set1 = [12, 34, 11, 9, 3]
set2 = [7, 2, 1, 5]
m = len(set1)
n = len(set2)
print("yes") if areDisjoint(set1, set2, m, n) else(" No")
 
# This code ia contributed by Smitha Dinesh Semwal
C#
PHP
Javascript
Output
Yes
Time Complexity: O(m*n)
Auxiliary Space: O(1),As constant extra space is used.

Method 2 (Use Sorting and Merging) :



Sort first and second sets. 
Use merge like the process to compare elements.
Following is the implementation of the above idea.

C++
Java
Python3
# A Simple Python 3 program to check
# if two sets are disjoint
 
# Returns true if set1[] and set2[]
# are disjoint, else false
def areDisjoint(set1, set2, m, n):
    # Sort the given two sets
    set1.sort()
    set2.sort()
 
    # Check for same elements 
    # using merge like process
    i = 0; j = 0
    while (i < m and j < n):
         
        if (set1[i] < set2[j]):
            i += 1
        elif (set2[j] < set1[i]):
            j += 1
        else: # if set1[i] == set2[j]
            return False
    return True
 
 
# Driver Code
set1 = [12, 34, 11, 9, 3]
set2 = [7, 2, 1, 5]
m = len(set1)
n = len(set2)
 
print("Yes") if areDisjoint(set1, set2, m, n) else print("No")
 
# This code is contributed by Smitha Dinesh Semwal
C#
Javascript
Output
Yes
Time Complexity: O(m*log m + n*log n), The above solution first sorts both sets and then takes O(m+n) time to find the intersection. If we are given that the input sets are sorted, then this method is best among all.
Auxiliary Space: O(1), As constant extra space is used.

Method 3 (Use Sorting and Binary Search):
This is similar to method 1. Instead of a linear search, we use Binary Search. 

Sort first set.
Iterate through every element of the second set, and use binary search to search every element in the first set. If an element is found return it.
The time complexity of this method is O(mLogm + nLogm)

Method 4 (Use Binary Search Tree):

Create a self-balancing binary search tree (Red Black, AVL, Splay, etc) of all elements in the first set. 
Iterate through all elements of the second set and search every element in the above constructed Binary Search Tree. If the element is found, return false. 
If all elements are absent, return true.
The time complexity of this method is O(m*log m + n*log m). 

Method 5 (Use Hashing):

Create an empty hash table. 
Iterate through the first set and store every element in the hash table. 
Iterate through the second set and check if any element is present in the hash table. If present, then returns false, else ignore the element. 
If all elements of the second set are not present in the hash table, return true.
The following is the implementation of this method.  

C++
Java
Python3
# Python3 program to
# check if two sets are
# distinct or not
# This function prints
# all distinct elements
def areDisjoint(set1, set2,
                n1, n2):
   
  # Creates an empty hashset
  myset = set([])
   
  # Traverse the first set
  # and store its elements in hash
  for i in range (n1):
    myset.add(set1[i])
     
  # Traverse the second set
  # and check if any element of it
  # is already in hash or not.
  for i in range (n2):
    if (set2[i] in myset):
      return False
  return True
 
# Driver method to test above method
if __name__ == "__main__":
   
  set1 = [10, 5, 3, 4, 6]
  set2 = [8, 7, 9, 3]
 
  n1 = len(set1)
  n2 = len(set2)
   
  if (areDisjoint(set1, set2,
                  n1, n2)):
    print ("Yes")
  else:
    print("No")
 
# This code is contributed by Chitranayal
C#
Javascript
Output
No
Time Complexity: O(m+n) under the assumption that hash set operations like add() and contains() work in O(1) time.
Auxiliary Space: O(n), The extra space is used to store the elements in the set.





Like
12
Previous
First element occurring k times in an array
Next
Non-overlapping sum of two sets
Related Articles
1.
Make two sets disjoint by removing minimum elements
2.
Distribute given arrays into K sets such that total sum of maximum and minimum elements of all sets is maximum
3.
Number of K's such that the given array can be divided into two sets satisfying the given conditions
4.
Queries to update Subarrays of a given Array using Disjoint Set
5.
Count all disjoint pairs having absolute difference at least K from a given array
6.
Count of ways to select exactly K non-disjoint ranges from given N ranges
7.
Maximal Disjoint Intervals
8.
Maximum subsequence sum obtained by concatenating disjoint subarrays whose lengths are prime
9.
Number of connected components of a graph ( using Disjoint Set Union )
10.
Count maximum number of disjoint pairs having one element not less than K times the other
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
shrikanth13
Akanksha_Rai
Rajput-Ji
ukasp
avanitrachhadiya2155
rag2127
ab2127
hardikkoriintern
adityadixit7054
abhijeet19403
hkdass001
Article Tags :
Binary Search
Arrays
Hash
Searching
Sorting
Practice Tags :
Arrays
Binary Search
Hash
Searching
Sorting
Improve Article
Report Issue