Print all subarrays with 0 sum

Difficulty Level : Hard
Last Updated : 19 Jan, 2023
Read
Discuss(40+)
Courses
Practice
Video
Given an array, print all subarrays in the array which has sum 0.

Examples: 

Input:  arr = [6, 3, -1, -3, 4, -2, 2, 4, 6, -12, -7]
Output:  
Subarray found from Index 2 to 4
Subarray found from Index 2 to 6          
Subarray found from Index 5 to 6
Subarray found from Index 6 to 9
Subarray found from Index 0 to 10

Related posts: Find if there is a subarray with 0 sum 

Recommended Problem
Zero Sum Subarrays
Arrays
Hash
+1 more
Amazon
Microsoft
+1 more
Solve Problem
Submission count: 98.6K
A simple solution is to consider all subarrays one by one and check if sum of every subarray is equal to 0 or not. The complexity of this solution would be O(n^2). sandharbnkamble

Below is the implementation of the above approach:

C++
Java
Python3
# User defined pair class
class Pair :
    first = 0
    second = 0
    def __init__(self, a,  b) :
        self.first = a
        self.second = b
class GFG :
    @staticmethod
    def  findSubArrays( arr,  n) :
       
        # Array to store all the start and end
        # indices of subarrays with 0 sum
        out =  []
        i = 0
        while (i < n) :
            prefix = 0
            j = i
            while (j < n) :
                prefix += arr[j]
                if (prefix == 0) :
                    out.append(Pair(i, j))
                j += 1
            i += 1
        return out
       
    # Function to print all subarrays with 0 sum
    @staticmethod
    def print( out) :
        i = 0
        while (i < len(out)) :
            p = out[i]
            print("Subarray found from Index " + str(p.first) + " to " + str(p.second))
            i += 1
             
    # Driver code
    @staticmethod
    def main( args) :
       
        # Given array
        arr = [6, 3, -1, -3, 4, -2, 2, 4, 6, -12, -7]
        n = len(arr)
         
        # Function Call
        out = GFG.findSubArrays(arr, n)
         
        # if we didn't find any subarray with 0 sum,
        # then subarray doesn't exists
        if (len(out) == 0) :
            print("No subarray exists")
        else :
            GFG.print(out)
     
 
if __name__=="__main__":
    GFG.main([])
     
    # This code is contributed by aadityaburujwale.
C#
Javascript
Output


Subarray found from Index 0 to 10
Subarray found from Index 2 to 4
Subarray found from Index 2 to 6
Subarray found from Index 5 to 6
Subarray found from Index 6 to 9
Time Complexity: O(N^2) since we are using 2 loops.
Auxiliary Space: O(1), as constant extra space is required.

A better approach is to use Hashing.

Do following for each element in the array 

Maintain sum of elements encountered so far in a variable (say sum).
If current sum is 0, we found a subarray starting from index 0 and ending at index current index
Check if current sum exists in the hash table or not.
If current sum already exists in the hash table then it indicates that this sum was the sum of some sub-array elements arr[0]…arr[i] and now the same sum is obtained for the current sub-array arr[0]…arr[j] which means that the sum of the sub-array arr[i+1]…arr[j] must be 0.
Insert current sum into the hash table
Below is a dry run of the above approach:



Below is the implementation of the above approach:

C++
Java
Python3
# Python3 program to print all subarrays
# in the array which has sum 0
 
# Function to get all subarrays
# in the array which has sum 0
def findSubArrays(arr,n):
 
    # create a python dict
    hashMap = {}
     
    # create a python list
    # equivalent to ArrayList
    out = []
     
    # tracker for sum of elements
    sum1 = 0
    for i in range(n):
         
        # increment sum by element of array
        sum1 += arr[i]
         
        # if sum is 0, we found a subarray starting
        # from index 0 and ending at index i
        if sum1 == 0:
            out.append((0, i))
        al = []
         
        # If sum already exists in the map
        # there exists at-least one subarray
        # ending at index i with 0 sum
        if sum1 in hashMap:
             
            # map[sum] stores starting index
            # of all subarrays
            al = hashMap.get(sum1)
            for it in range(len(al)):
                out.append((al[it] + 1, i))
        al.append(i)
        hashMap[sum1] = al
    return out
 
# Utility function to print
# all subarrays with sum 0
def printOutput(output):
    for i in output:
        print ("Subarray found from Index " +
                str(i[0]) + " to " + str(i[1]))
 
# Driver Code
if __name__ == '__main__':
    arr = [6, 3, -1, -3, 4, -2,
              2, 4, 6, -12, -7]
    n = len(arr)
    out = findSubArrays(arr, n)
     
    # if we did not find any subarray with 0 sum,
    # then subarray does not exists
    if (len(out) == 0):
        print ("No subarray exists")
    else:
        printOutput (out)
 
# This code is contributed by Vikas Chitturi
C#
Javascript
Output
Subarray found from Index 2 to 4
Subarray found from Index 2 to 6
Subarray found from Index 5 to 6
Subarray found from Index 6 to 9
Subarray found from Index 0 to 10
Time Complexity: O(N)
Auxiliary Space: O(N)

This article is contributed by Aditya Goel. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.





Like
135
Next
Find if there is a subarray with 0 sum
Related Articles
1.
Split array into K subarrays such that sum of maximum of all subarrays is maximized
2.
Split given arrays into subarrays to maximize the sum of maximum and minimum in each subarrays
3.
Print all subarrays with sum in a given range
4.
Differences between number of increasing subarrays and decreasing subarrays in k sized windows
5.
Split given Array in minimum number of subarrays such that rearranging the order of subarrays sorts the array
6.
Check if Array can be split into subarrays such that XOR of length of Longest Decreasing Subsequences of those subarrays is 0
7.
Print indices of pair of array elements required to be removed to split array into 3 equal sum subarrays
8.
Sum of minimum and maximum elements of all subarrays of size k.
9.
Maximum subarray size, such that all subarrays of that size have sum less than k
10.
Sum of all Subarrays | Set 1
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
rachana soma
veerravi
Vikas Chitturi
Rajput-Ji
06vaibhavtyagi
arun211
hardikkoriintern
phasing17
vaibhavbtech23iet
111arpit1
sandharbnkamble
aadityapburujwale
poojaagrawal2
ratiagrawal
Article Tags :
Amazon
Microsoft
subarray
subarray-sum
Arrays
Hash
Practice Tags :
Amazon
Microsoft
Arrays
Hash
Improve Article
Report Issue