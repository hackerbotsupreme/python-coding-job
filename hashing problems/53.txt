Find All Duplicate Subtrees

Difficulty Level : Hard
Last Updated : 15 Jul, 2022
Read
Discuss(20)
Courses
Practice
Video
Given a binary tree, find all duplicate subtrees. For each duplicate subtree, we only need to return the root node of any one of them. Two trees are duplicates if they have the same structure with the same node values.

Examples: 

Input :
       1
      / \
     2   3
    /   / \
   4   2   4
      /
     4

Output : 
   2           
  /    and    4
 4
Explanation: Above Trees are two duplicate subtrees. 
Therefore, you need to return above trees root in the 
form of a list.
Recommended Problem
Duplicate Subtrees
Tree
Data Structures
Solve Problem
Submission count: 31.4K
The idea is to use hashing. We store inorder traversals of subtrees in a hash. Since simple inorder traversal cannot uniquely identify a tree, we use symbols like ‘(‘ and ‘)’ to represent NULL nodes. 

We pass an Unordered Map in C++ as an argument to the helper function which recursively calculates inorder string and increases its count in map. If any string gets repeated, then it will imply duplication of the subtree rooted at that node so push that node in the Final result and return the vector of these nodes.  

Implementation:

C++
Java
Python3
# Python3 program to find averages of
# all levels in a binary tree.
 
# Helper function that allocates a
# new node with the given data and
# None left and right pointers.
class newNode:
    def __init__(self, data):
        self.data = data
        self.left = self.right = None
 
def inorder(node, m):
    if (not node):
        return ""
 
    Str = "("
    Str += inorder(node.left, m)
    Str += str(node.data)
    Str += inorder(node.right, m)
    Str += ")"
 
    # Subtree already present (Note that
    # we use unordered_map instead of
    # unordered_set because we want to print
    # multiple duplicates only once, consider
    # example of 4 in above subtree, it
    # should be printed only once.
    if (Str in m and m[Str] == 1):
        print(node.data, end = " ")
    if Str in m:
        m[Str] += 1
    else:
        m[Str] = 1
 
    return Str
 
# Wrapper over inorder()
def printAllDups(root):
    m = {}
    inorder(root, m)
 
# Driver code
if __name__ == '__main__':
    root = None
    root = newNode(1)
    root.left = newNode(2)
    root.right = newNode(3)
    root.left.left = newNode(4)
    root.right.left = newNode(2)
    root.right.left.left = newNode(4)
    root.right.right = newNode(4)
    printAllDups(root)
 
# This code is contributed by PranchalK
C#
Javascript
Output
4 2 
Time Complexity: O(N^2)  Since string copying takes O(n) extra time.
Auxiliary Space: O(N^2) Since we are hashing a string for each node and length of this string can be of the order N.



If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 





Like
42
Previous
Recaman's sequence
Next
Maximum distinct nodes in a Root to leaf path
Related Articles
1.
Count of duplicate Subtrees in an N-ary Tree
2.
Check if a Binary Tree contains duplicate subtrees of size 2 or more
3.
Calculate number of nodes in all subtrees | Using DFS
4.
Remove all subtrees consisting only of even valued nodes from a Binary Tree
5.
Count of SubTrees with digit sum of all nodes equals to X
6.
Replace each node in given N-ary Tree with sum of all its subtrees
7.
Find largest subtree having identical left and right subtrees
8.
Find Count of Single Valued Subtrees
9.
Number of subtrees having odd count of even numbers
10.
Count Subtrees that sum up to a given value X only using single Recursive Function
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
PranchalKatiyar
princi singh
rohitsingh07052
helloween123
suresh07
neminbshah
ankurk1947
hardikkoriintern
Article Tags :
cpp-unordered_map
Hash
Tree
Practice Tags :
Hash
Tree