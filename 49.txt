Print all possible paths from top left to bottom right of a mXn matrix

Difficulty Level : Medium
Last Updated : 29 Nov, 2022
Read
Discuss(100+)
Courses
Practice
Video
The problem is to print all the possible paths from top left to bottom right of a mXn matrix with the constraints that from each cell you can either move only to right or down.

Examples : 

Input : 1 2 3
        4 5 6
Output : 1 4 5 6
         1 2 5 6
         1 2 3 6

Input : 1 2 
        3 4
Output : 1 2 4
         1 3 4
The algorithm is a simple recursive algorithm, from each cell first print all paths by going down and then print all paths by going right. Do this recursively for each cell encountered.

Following are implementation of the above algorithm. 

C++
Java
Python3
# Python3 program to Print all possible paths from
# top left to bottom right of a mXn matrix
 
'''
/* mat: Pointer to the starting of mXn matrix
i, j: Current position of the robot
     (For the first call use 0, 0)
m, n: Dimensions of given the matrix
pi: Next index to be filed in path array
*path[0..pi-1]: The path traversed by robot till now
                (Array to hold the path need to have
                 space for at least m+n elements) */
'''
def printAllPathsUtil(mat, i, j, m, n, path, pi):
 
    # Reached the bottom of the matrix
    # so we are left with only option to move right
    if (i == m - 1):
        for k in range(j, n):
            path[pi + k - j] = mat[i][k]
 
        for l in range(pi + n - j):
            print(path[l], end = " ")
        print()
        return
 
    # Reached the right corner of the matrix
    # we are left with only the downward movement.
    if (j == n - 1):
 
        for k in range(i, m):
            path[pi + k - i] = mat[k][j]
 
        for l in range(pi + m - i):
            print(path[l], end = " ")
        print()
        return
 
    # Add the current cell
    # to the path being generated
    path[pi] = mat[i][j]
 
    # Print all the paths
    # that are possible after moving down
    printAllPathsUtil(mat, i + 1, j, m, n, path, pi + 1)
 
    # Print all the paths
    # that are possible after moving right
    printAllPathsUtil(mat, i, j + 1, m, n, path, pi + 1)
 
    # Print all the paths
    # that are possible after moving diagonal
    # printAllPathsUtil(mat, i+1, j+1, m, n, path, pi + 1);
 
# The main function that prints all paths
# from top left to bottom right
# in a matrix 'mat' of size mXn
def printAllPaths(mat, m, n):
 
    path = [0 for i in range(m + n)]
    printAllPathsUtil(mat, 0, 0, m, n, path, 0)
 
# Driver Code
mat = [[1, 2, 3],
       [4, 5, 6]]
 
printAllPaths(mat, 2, 3)
 
# This code is contributed by Mohit Kumar
C#
Javascript
Output
1 4 5 6 
1 2 5 6 
1 2 3 6 
Note that in the above code, the last line of printAllPathsUtil() is commented, If we uncomment this line, we get all the paths from the top left to bottom right of a nXm matrix if the diagonal movements are also allowed. And also if moving to some of the cells are not permitted then the same code can be improved by passing the restriction array to the above function and that is left as an exercise.

This article is contributed by Hariprasad NG. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above



C++
Java
Python3
# Python3 program to Print all possible paths from
# top left to bottom right of a mXn matrix
allPaths = []
def findPaths(maze,m,n):
    path = [0 for d in range(m+n-1)]
    findPathsUtil(maze,m,n,0,0,path,0)
     
def findPathsUtil(maze,m,n,i,j,path,index):
    global allPaths
    # if we reach the bottom of maze, we can only move right
    if i==m-1:
        for k in range(j,n):
            #path.append(maze[i][k])
            path[index+k-j] = maze[i][k]
        # if we hit this block, it means one path is completed.
        # Add it to paths list and print
        print(path)
        allPaths.append(path)
        return
    # if we reach to the right most corner, we can only move down
    if j == n-1:
        for k in range(i,m):
            path[index+k-i] = maze[k][j]
          #path.append(maze[j][k])
        # if we hit this block, it means one path is completed.
        # Add it to paths list and print
        print(path)
        allPaths.append(path)
        return
     
    # add current element to the path list
    #path.append(maze[i][j])
    path[index] = maze[i][j]
     
    # move down in y direction and call findPathsUtil recursively
    findPathsUtil(maze, m, n, i+1, j, path, index+1)
     
    # move down in y direction and call findPathsUtil recursively
    findPathsUtil(maze, m, n, i, j+1, path, index+1)
 
if __name__ == '__main__':
    maze = [[1,2,3],
            [4,5,6],
            [7,8,9]]
    findPaths(maze,3,3)
    #print(allPaths)
C#
Javascript
Output
[1, 4, 7, 8, 9]
[1, 4, 5, 8, 9]
[1, 4, 5, 6, 9]
[1, 2, 5, 8, 9]
[1, 2, 5, 6, 9]
[1, 2, 3, 6, 9]
Note all the above approach take some extra time and space for solving the problem ,we can simply use backtracking algorithm to solve problem in optimized manner 

C++
Java
Python3
# code
class Solution:
     
    def __init__(self):
        self.mapping = {}
     
    def printAllPaths(self, M, m, n):
        if not self.mapping.get((m,n)):
            if m == 1 and n == 1:
                return [M[m-1][n-1]]
            else:
                res = []
                if n > 1:
                    a = self.printAllPaths(M, m, n-1)
                    for i in a:
                        if not isinstance(i, list):
                            i = [i]
                        res.append(i+[M[m-1][n-1]])
                if m > 1:
                    b = self.printAllPaths(M, m-1, n)
                    for i in b:
                        if not isinstance(i, list):
                            i = [i]
                        res.append(i+[M[m-1][n-1]])
            self.mapping[(m,n)] = res
        return self.mapping.get((m,n))
 
M = [[1, 2, 3], [4, 5, 6], [7,8,9]]
m, n = len(M), len(M[0])
a = Solution()
res = a.printAllPaths(M, m, n)
for i in res:
    print(i)
C#
Javascript
Output
1 4 7 8 9 
1 4 5 8 9 
1 4 5 6 9 
1 2 5 8 9 
1 2 5 6 9 
1 2 3 6 9 
So by these method you can optimized your code.

TC- O(2^n*m)   , SC â€“ O(n) 

Another Approach (Iterative) :


1. In this approach we will use BFS (breadth first search) to find all possible paths.

2. We will make a queue which contains the following information : 

    a)  Vector that stores the path up to a certain cell.

    b)  coordinates of the cell.

3. We will start from the top-left cell and push cell value and coordinates in the queue.

4. We will keep on exploring right and down cell (if possible) until queue is not empty 

   and push them in the queue by updating the current cell vector.

5. If we reach the last cell then we have got one answer and we will print the answer vector.

C++
Java
Python3
# Python implementation for the above approach
from collections import deque
 
# this structure stores information
# about a particular cell i.e
# path upto that cell and cell's
# coordinates
 
 
class info:
    def __init__(self, path, i, j):
        self.path = path
        self.i = i
        self.j = j
 
 
def printAllPaths(maze):
    n = len(maze)
    m = len(maze[0])
 
    q = deque()
    # pushing top-left cell into the queue
    q.append(info([maze[0][0]], 0, 0))
 
    while len(q) > 0:
        p = q.popleft()
 
        # if we reached the bottom-right cell
        # i.e the destination then print the path
        if p.i == n - 1 and p.j == m - 1:
            for x in p.path:
                print(x, end=" ")
            print()
 
        # if we are in the last row
        # then only right movement is possible
        elif p.i == n-1:
            temp = p.path[:]
            # updating the current path
            temp.append(maze[p.i][p.j+1])
            q.append(info(temp, p.i, p.j+1))
 
        # if we are in the last column
        # then only down movement is possible
        elif p.j == m-1:
            temp = p.path[:]
            # updating the current path
            temp.append(maze[p.i+1][p.j])
            q.append(info(temp, p.i+1, p.j))
 
        # else both right and down movement
        # are possible
        else:  # right movement
            temp = p.path[:]
            # updating the current path
            temp.append(maze[p.i][p.j + 1])
            q.append(info(temp, p.i, p.j + 1))
 
            # down movement
            temp = temp[:-1]
 
            # updating the current path
            temp.append(maze[p.i + 1][p.j])
            q.append(info(temp, p.i + 1, p.j))
 
 
# Driver Code
maze = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
printAllPaths(maze)
 
# This code is contributed by Tapesh(tapeshdua420)
C#
Javascript
Output
1 2 3 6 9 
1 2 5 6 9 
1 2 5 8 9 
1 4 5 6 9 
1 4 5 8 9 
1 4 7 8 9 
  

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
53
Previous
Rat in a Maze with multiple steps or jump allowed
Next
Print all subsets of a given Set or Array
Related Articles
1.
Count all possible paths from top left to bottom right of a mXn matrix
2.
Minimum steps to convert all paths in matrix from top left to bottom right as palindromic paths
3.
Minimum steps to convert all paths in matrix from top left to bottom right as palindromic paths | Set 2
4.
Count of possible paths from top left to bottom right of a M x N matrix by moving right, down or diagonally
5.
Count all possible paths from top left to bottom right of a Matrix without crossing the diagonal
6.
Print all palindromic paths from top left to bottom right in a matrix
7.
Print all paths from top left to bottom right in a matrix with four moves allowed
8.
Minimum steps to convert all top left to bottom right paths in Matrix as palindrome | Set 2
9.
Minimize flips required to make all shortest paths from top-left to bottom-right of a binary matrix equal to S
10.
Minimize count of unique paths from top left to bottom right of a Matrix by placing K 1s
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
ashritkumar
ranjankm
Rajput-Ji
mohit kumar 29
nidhi_biet
divyeshrabadiya07
divyesh072019
avanitrachhadiya2155
satyambsingh93
pawanharwani11
ab2127
kapoorsagar226
varshagumber28
gulshankumarar231
simmytarika5
sweetyty
harneet chugga
kk773572498
visena49
_saurabh_jaiswal
tapeshdua420
hardikkoriintern
phasing17
Article Tags :
combionatrics
Backtracking
Matrix
Practice Tags :
Backtracking
Matrix