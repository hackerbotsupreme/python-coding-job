Printing all solutions in N-Queen Problem

Difficulty Level : Hard
Last Updated : 03 Jan, 2023
Read
Discuss(30+)
Courses
Practice
Video
The N Queen is the problem of placing N chess queens on an N×N chessboard so that no two queens attack each other. For example, the following is a solution for 4 Queen problem.
 



In previous post, we have discussed an approach that prints only one possible solution, so now in this post, the task is to print all solutions in N-Queen Problem. Each solution contains distinct board configurations of the N-queens’ placement, where the solutions are a permutation of [1,2,3..n] in increasing order, here the number in the ith place denotes that the ith-column queen is placed in the row with that number. For the example above solution is written as [[2 4 1 3 ] [3 1 4 2 ]]. The solution discussed here is an extension of the same approach.

Recommended Problem
N-Queen Problem
Backtracking
Algorithms
Accolite
Amazon
+6 more
Solve Problem
Submission count: 58.7K
Backtracking Algorithm 

The idea is to place queens one by one in different columns, starting from the leftmost column. When we place a queen in a column, we check for clashes with already placed queens. In the current column, if we find a row for which there is no clash, we mark this row and column as part of the solution. If we do not find such a row due to clashes then we backtrack and return false.

1) Start in the leftmost column
2) If all queens are placed
    return true
3) Try all rows in the current column.  Do following
   for every tried row.
    a) If the queen can be placed safely in this row
       then mark this [row, column] as part of the 
       solution and recursively check if placing  
       queen here leads to a solution.
    b) If placing queen in [row, column] leads to a
       solution then return true.
    c) If placing queen doesn't lead to a solution 
       then unmark this [row, column] (Backtrack) 
       and go to step (a) to try other rows.
3) If all rows have been tried and nothing worked, 
   return false to trigger backtracking.
A modification is that we can find whether we have a previously placed queen in a column or in left diagonal or in right diagonal in O(1) time. We can observe that 

For all cells in a particular left diagonal , their row + col  = constant.
For all cells in a particular right diagonal, their row – col + n – 1 = constant.
Let say n = 5, then we have a total of 2n-1 left and right diagonals



Let say we placed a queen at (2,0) 

(2,0) have leftDiagonal value = 2. Now we can not place another queen at (1,1) and (0,2) because both of these have same leftDiagonal value as for (2,0). Similar thing can be noticed for right diagonal as well.

Implementation:

C++
Java
Python3
''' Python3 program to solve N Queen Problem using
backtracking '''
 
 
result = []
 
# A utility function to print solution
 
 
''' A utility function to check if a queen can
be placed on board[row][col]. Note that this
function is called when "col" queens are
already placed in columns from 0 to col -1.
So we need to check only left side for
attacking queens '''
 
 
def isSafe(board, row, col):
 
    # Check this row on left side
    for i in range(col):
        if (board[row][i]):
            return False
 
    # Check upper diagonal on left side
    i = row
    j = col
    while i >= 0 and j >= 0:
        if(board[i][j]):
            return False
        i -= 1
        j -= 1
 
    # Check lower diagonal on left side
    i = row
    j = col
    while j >= 0 and i < 4:
        if(board[i][j]):
            return False
        i = i + 1
        j = j - 1
 
    return True
 
 
''' A recursive utility function to solve N
Queen problem '''
 
 
def solveNQUtil(board, col):
    ''' base case: If all queens are placed
    then return true '''
    if (col == 4):
        v = []
        for i in board:
          for j in range(len(i)):
            if i[j] == 1:
              v.append(j+1)
        result.append(v)
        return True
 
    ''' Consider this column and try placing
    this queen in all rows one by one '''
    res = False
    for i in range(4):
 
        ''' Check if queen can be placed on
        board[i][col] '''
        if (isSafe(board, i, col)):
 
            # Place this queen in board[i][col]
            board[i][col] = 1
 
            # Make result true if any placement
            # is possible
            res = solveNQUtil(board, col + 1) or res
 
            ''' If placing queen in board[i][col]
            doesn't lead to a solution, then
            remove queen from board[i][col] '''
            board[i][col] = 0  # BACKTRACK
 
    ''' If queen can not be place in any row in
        this column col then return false '''
    return res
 
 
''' This function solves the N Queen problem using
Backtracking. It mainly uses solveNQUtil() to
solve the problem. It returns false if queens
cannot be placed, otherwise return true and
prints placement of queens in the form of 1s.
Please note that there may be more than one
solutions, this function prints one of the
feasible solutions.'''
 
 
def solveNQ(n):
    result.clear()
    board = [[0 for j in range(n)]
             for i in range(n)]
    solveNQUtil(board, 0)
    result.sort()
    return result
 
 
# Driver Code
n = 4
res = solveNQ(n)
print(res)
 
# This code is contributed by YatinGupta
C#
Javascript
Output
[2 4 1 3 ][3 1 4 2 ]
Efficient Backtracking Approach Using Bit-Masking 

Algorithm: 
There is always only one queen in each row and each column, so idea of backtracking is to start placing queen from the leftmost column of each row and find a column where the queen could be placed without collision with previously placed queens. It is repeated from the first row till the last row. While placing a queen, it is tracked as if it is not making a collision (row-wise, column-wise and diagonally) with queens placed in previous rows. Once it is found that the queen can’t be placed at a particular column index in a row, the algorithm backtracks and change the position of the queen placed in the previous row then moves forward to place the queen in the next row. 

Start with three-bit vector which is used to track safe place for queen placement row-wise, column-wise and diagonally in each iteration.
Three-bit vector will contain information as bellow:
rowmask: set bit index (i) of this bit vector will indicate, the queen can’t be placed at ith column of next row.
ldmask: set bit index (i) of this bit vector will indicate, the queen can’t e placed at ith column of next row. It represents the unsafe column index for next row falls under left diagonal of queens placed in previous rows.
rdmask: set bit index (i) of this bit vector will indicate, the queen can’t be placed at ith column of next row. It represents the unsafe column index for next row falls right diagonal of queens placed in previous rows.
There is a 2-D (NxN) matrix (board), which will have ‘ ‘ character at all indexes in beginning and it gets filled by ‘Q’ row-by-row. Once all rows are filled by ‘Q’, the current solution is pushed into the result list.
Below is the implementation of the above approach: 

C++
Java
Python3
# Python program for above approach
import math
 
result = []
 
# Program to solve N-Queens Problem
 
 
def solveBoard(board, row, rowmask,
               ldmask, rdmask):
 
    n = len(board)
 
    # All_rows_filled is a bit mask
    # having all N bits set
    all_rows_filled = (1 << n) - 1
 
    # If rowmask will have all bits set, means
    # queen has been placed successfully
    # in all rows and board is displayed
    if (rowmask == all_rows_filled):
        v = []
        for i in board:
            for j in range(len(i)):
                if i[j] == 'Q':
                    v.append(j+1)
        result.append(v)
 
    # We extract a bit mask(safe) by rowmask,
    # ldmask and rdmask. all set bits of 'safe'
    # indicates the safe column index for queen
    # placement of this iteration for row index(row).
    safe = all_rows_filled & (~(rowmask |
                                ldmask | rdmask))
 
    while (safe > 0):
 
        # Extracts the right-most set bit
        # (safe column index) where queen
        # can be placed for this row
        p = safe & (-safe)
        col = (int)(math.log(p)/math.log(2))
        board[row][col] = 'Q'
 
        # This is very important:
        # we need to update rowmask, ldmask and rdmask
        # for next row as safe index for queen placement
        # will be decided by these three bit masks.
 
        # We have all three rowmask, ldmask and
        # rdmask as 0 in beginning. Suppose, we are placing
        # queen at 1st column index at 0th row. rowmask, ldmask
        # and rdmask will change for next row as below:
 
        # rowmask's 1st bit will be set by OR operation
        # rowmask = 00000000000000000000000000000010
 
        # ldmask will change by setting 1st
        # bit by OR operation  and left shifting
        # by 1 as it has to block the next column
        # of next row because that will fall on left diagonal.
        # ldmask = 00000000000000000000000000000100
 
        # rdmask will change by setting 1st bit
        # by OR operation and right shifting by 1
        # as it has to block the previous column
        # of next row because that will fall on right diagonal.
        # rdmask = 00000000000000000000000000000001
 
        # these bit masks will keep updated in each
        # iteration for next row
        solveBoard(board, row+1, rowmask | p,
                   (ldmask | p) << 1, (rdmask | p) >> 1)
 
        # Reset right-most set bit to 0 so, next
        # iteration will continue by placing the queen
        # at another safe column index of this row
        safe = safe & (safe-1)
 
        # Backtracking, replace 'Q' by ' '
        board[row][col] = ' '
 
# Program to print board
 
 
def printBoard(board):
    for row in board:
        print("|" + "|".join(row) + "|")
 
# Driver Code
 
 
def main():
 
    n = 4  # board size
    board = []
 
    for i in range(n):
        row = []
        for j in range(n):
            row.append(' ')
        board.append(row)
 
    rowmask = 0
    ldmask = 0
    rdmask = 0
    row = 0
 
    # Function Call
    result.clear()
    solveBoard(board, row, rowmask, ldmask, rdmask)
    result.sort()
    print(result)
 
 
if __name__ == "__main__":
    main()
 
# This code is contributed by Nikhil Vinay
C#
Javascript
Output
[2 4 1 3 ][3 1 4 2 ]
This article is contributed by Sahil Chhabra. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 

Iterative backtracking solution:

In this section of the article, an iterative backtracking solution without recursion is introduced. The code will mainly utilize two nested loops and a stack to keep track of the positions of queens on the board and use this stack to backtrack.

Algorithm:

n: is the number of rows, columns, and queens to be added.

1- Create 2D-array to represent the board with each cell in the array corresponding to a box in the board
2- Create a stack to keep track of the queens' positions where the queen on the top is always the most recently added queen.
3- set counter j = 1 which will be used loop through columns in the coming steps.
4- Create an outer loop through the rows from i = 1 ----> i = n
    5- Create inner loop through columns from j  ----> j = n.
        6- in the inner body of loops check if the current cell is valid to add a queen
        if valid 
            - add the queen to the board
            - add the queen's position to the stack
            - break the inner loop
    7- after finishing or breaking the inner loop 
    a) set j = 1 (so the default is to start looping through the columns from j = 1 in the coming iteration)
    b) check if the size of the stack equals the number of the row to see if a queen was placed in current row
    if no queen was placed:
        8- back track to the last added queen by doing the following:
            a) accessing the position of the last added queen from the top of stack
            b) delete the last added queen from the board
            c) set i (counter for rows of the board) = the row of the last added queen
            d) set j = the column of last added queen + 1
    9- if i == n meaning that all rows are now visited and filled with queens
        a) print solution
        b) do step 8 again to test other solutions until the stack is empty
            
    
            
According to the below Implementation, the solutions will be printed as an n*n matrix of zeros and ones, where the cells = 1 represent the queens. 

Below is the Implementation of the above algorithm

C++
#include <iostream>
#include <stack>
#include <utility>
#include <vector>
 
using namespace std;
using vvi = vector<vector<int> >;
using vi = vector<int>;
void print(vvi board)
{
 
    int count = 0;
    for (auto& row : board) {
        for (auto& el : row)
            if (el == 1)
                count++;
         
    }
    // Not valid solution
    if (count != board.size())
        return;
 
    // Print the matrix
    for (auto& row : board) {
        for (auto& el : row)
            cout << el << " ";
        cout << '\n';
    }
}
bool validate(vvi board, int i, int j)
{
    // validate rows
    for (int c = 1; c <= j; c++)
        if (board[i - 1] == 1)
            return false;
    // validate columns
    for (int r = 1; r <= i; r++)
        if (board[r - 1][j - 1] == 1)
            return false;
    // validate diagonals to right up corner
    int c = j;
    int r = i;
    while (c != 0 and r != 0) {
        if (board[r - 1] == 1)
            return false;
        r--;
        c--;
    }
    // validate diagonals to left up corner
    c = j;
    r = i;
    while (c != board.size() + 1 and r != 0) {
        if (board[r - 1] == 1)
            return false;
        r--;
        c++;
    }
    return true;
}
 
void n_queen(int n)
{
    vvi board(n, vi(n));
    stack<pair<int, int> >
        queens_positions; // stores positions of added
                          // queens
    int j = 1;
    for (int i = 1; i <= board.size(); i++) {
        for (; j <= board.size(); j++) {
            if (validate(board, i,
                         j)) { // check validity of cell
                               // before adding the queen
                board[i - 1][j - 1] = 1;
                queens_positions.push(make_pair(i, j));
                break;
            }
        }
        j = 1;
        if (queens_positions.size()
            != i) { // checks if a queen was placed in the
                    // current row
 
            if (!queens_positions.empty()) {
                pair<int, int> Q_last
                    = queens_positions
                          .top(); // position of last added
                                  // queen
                queens_positions.pop();
 
                // backtracking
                board[Q_last.first - 1][Q_last.second - 1]
                    = 0; // nulling the last added queen
                i = Q_last.first
                    - 1; // going back to the row of the
                         // last added queen
                j = Q_last.second
                    + 1; // going back to the column of the
                         // last added queen + 1
            }
        }
 
        if (i == board.size()) {
            print(board);
            cout << '\n';
            if (!queens_positions.empty()) {
                pair<int, int> Q_last
                    = queens_positions
                          .top(); // position of last added
                                  // queen
                queens_positions.pop();
 
                // backtracking
                board[Q_last.first - 1][Q_last.second - 1]
                    = 0; // nulling the last added queen
                i = Q_last.first
                    - 1; // going back to the row of the
                         // last added queen
                j = Q_last.second
                    + 1; // going back to the column of the
                         // last added queen + 1
            }
        }
    }
}
 
int main() { n_queen(4); }
Output
0 1 0 0 
0 0 0 1 
1 0 0 0 
0 0 1 0 

0 0 1 0 
1 0 0 0 
0 0 0 1 
0 1 0 0 


Like
Previous
Warnsdorff's algorithm for Knight’s tour problem
Next
Print all possible strings that can be made by placing spaces
Related Articles
1.
Printing brackets in Matrix Chain Multiplication Problem
2.
Printing string in plus ‘+’ pattern in the matrix
3.
Rat in a Maze Problem when movement in all possible directions is allowed
4.
8 queen problem
5.
The Celebrity Problem
6.
Word Break Problem using Backtracking
7.
Warnsdorff's algorithm for Knight’s tour problem
8.
Maths behind number of paths in matrix problem
9.
Problem of 8 Neighbours of an element in a 2-D Matrix
10.
Travelling Salesman Problem implementation using BackTracking
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
29AjayKumar
princiraj1992
YatinGupta
nvinay
UtkarshPandey6
moonlight23
anikaseth98
gulshankumarar231
akshaysingh98088
sagartomar9927
ankityadav870401
shruti456rawal
hardikkoriintern
phasing17
youssefahmed3453
harendrakumar123
codearcade
Article Tags :
chessboard-problems
Backtracking
Matrix
Practice Tags :
Backtracking
Matrix