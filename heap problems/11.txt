Fibonacci Heap | Set 1 (Introduction)

Difficulty Level : Medium
Last Updated : 15 Dec, 2022
Read
Discuss
Courses
Practice
Video
Heaps are mainly used for implementing priority queue. We have discussed the below heaps in previous posts. 

Binary Heap 
Binomial Heap 
In terms of Time Complexity, Fibonacci Heap beats both Binary and Binomial Heap. 

Below are amortized time complexities of the Fibonacci Heap. 

1) Find Min:      Θ(1)     [Same as  Binary but not Binomial since binomial has o(log n)]
2) Delete Min:    O(Log n) [Θ(Log n) in both Binary and Binomial]
3) Insert:        Θ(1)     [Θ(Log n) in Binary and Θ(1) in Binomial]
4) Decrease-Key:  Θ(1)     [Θ(Log n) in both Binary and Binomial]
5) Merge:         Θ(1)     [Θ(m Log n) or Θ(m+n) in Binary and
                            Θ(Log n) in Binomial]
Like Binomial Heap, Fibonacci Heap is a collection of trees with min-heap or max-heap properties. In Fibonacci Heap, trees can have any shape even if all trees can be single nodes (This is unlike Binomial Heap where every tree has to be a Binomial Tree). 

Below is an example Fibonacci Heap taken from here. 

FibonacciHeap

Fibonacci Heap maintains a pointer to the minimum value (which is the root of a tree). All tree roots are connected using a circular doubly linked list, so all of them can be accessed using a single ‘min’ pointer. 



The main idea is to execute operations in a “lazy” way. For example merge operation simply links two heaps, insert operation simply adds a new tree with a single node. The operation extract minimum is the most complicated operation. It does delay the work of consolidating trees. This makes delete also complicated as delete first decreases the key to minus infinite, then calls extract minimum. 

Below are some interesting facts about Fibonacci Heap 

The reduced time complexity of Decrease-Key has importance in Dijkstra and Prim algorithms. With Binary Heap, the time complexity of these algorithms is O(VLogV + ELogV). If Fibonacci Heap is used, then time complexity is improved to O(VLogV + E)
Although Fibonacci Heap looks promising time complexity-wise, it has been found slow in practice as hidden constants are high (Source Wiki).
Fibonacci heaps is mainly called so because Fibonacci numbers are used in the running time analysis. Also, every node in Fibonacci Heap has a degree at most O(log n) and the size of a subtree rooted in a node of degree k is at least Fk+2, where Fk is the kth Fibonacci number.
We will soon be discussing Fibonacci Heap operations in detail. 

This article is contributed by Shivam. Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above.

Recommended
Solve DSA problems on GfG Practice.

Solve Problems



Like
45
Previous
Array Representation Of Binary Heap
Next
Leftist Tree / Leftist Heap
Related Articles
1.
Difference between Binary Heap, Binomial Heap and Fibonacci Heap
2.
Heap Sort for decreasing order using min heap
3.
Difference between Min Heap and Max Heap
4.
When building a Heap, is the structure of Heap unique?
5.
Convert Min Heap to Max Heap
6.
Fibonacci Heap - Insertion and Union
7.
Fibonacci Heap - Deletion, Extract min and Decrease key
8.
Check if a M-th fibonacci number divides N-th fibonacci number
9.
Check if sum of Fibonacci elements in an Array is a Fibonacci number or not
10.
Introduction to Heap - Data Structure and Algorithm Tutorials
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
abhinavvce06
hardikkoriintern
aayushkumar17052002
Article Tags :
Fibonacci
Advanced Data Structure
Heap
Practice Tags :
Advanced Data Structure
Fibonacci
Heap
Improve Article
Report Issue