Median of Stream of Running Integers using STL

Difficulty Level : Hard
Last Updated : 15 Jul, 2022
Read
Discuss(50+)
Courses
Practice
Video
Given that integers are being read from a data stream. Find the median of all the elements read so far starting from the first integer till the last integer. This is also called the Median of Running Integers. The data stream can be any source of data, for example, a file, an array of integers, input stream etc.
 

What is Median?

Median can be defined as the element in the data set which separates the higher half of the data sample from the lower half. In other words, we can get the median element as, when the input size is odd, we take the middle element of sorted data. If the input size is even, we pick an average of middle two elements in the sorted stream.
Examples: 
 

Input: 5 10 15 
Output: 5, 7.5, 10 
Explanation: Given the input stream as an array of integers [5,10,15]. Read integers one by one and print the median correspondingly. So, after reading first element 5,median is 5. After reading 10,median is 7.5 After reading 15 ,median is 10.
Input: 1, 2, 3, 4 
Output: 1, 1.5, 2, 2.5 
Explanation: Given the input stream as an array of integers [1, 2, 3, 4]. Read integers one by one and print the median correspondingly. So, after reading first element 1,median is 1. After reading 2,median is 1.5 After reading 3 ,median is 2.After reading 4 ,median is 2.5. 
 


 

Recommended Practice
Find median in a stream
Try It!
Approach: The idea is to use max heap and min heap to store the elements of higher half and lower half. Max heap and min heap can be implemented using priority_queue in C++ STL. Below is the step by step algorithm to solve this problem.
Algorithm: 
 

Create two heaps. One max heap to maintain elements of lower half and one min heap to maintain elements of higher half at any point of time..
Take initial value of median as 0.
For every newly read element, insert it into either max heap or min-heap and calculate the median based on the following conditions: 
If the size of max heap is greater than the size of min-heap and the element is less than the previous median then pop the top element from max heap and insert into min-heap and insert the new element to max heap else insert the new element to min-heap. Calculate the new median as the average of top of elements of both max and min heap.
If the size of max heap is less than the size of min-heap and the element is greater than the previous median then pop the top element from min-heap and insert into the max heap and insert the new element to min heap else insert the new element to the max heap. Calculate the new median as the average of top of elements of both max and min heap.
If the size of both heaps is the same. Then check if the current is less than the previous median or not. If the current element is less than the previous median then insert it to the max heap and a new median will be equal to the top element of max heap. If the current element is greater than the previous median then insert it to min-heap and new median will be equal to the top element of min heap.
Below is the implementation of above approach. 
 

C++
Java
Python3
# python3 program to find med in
# stream of running integers
from heapq import *
  
# function to calculate med of stream
def printMedians(arr, n):
    # max heap to store the smaller half elements
    s = []
    # min heap to store the greater half elements
    g = []
  
    heapify(s)
    heapify(g)
  
    med = arr[0]
    heappush(s, arr[0])
  
    print(med)
  
    # reading elements of stream one by one
    for i in range(1, n):
        x = arr[i]
  
        # case1(left side heap has more elements)
        if len(s) > len(g):
            if x < med:
                heappush(g, heappop(s))
                heappush(s, x)
            else:
                heappush(g, x)
            med = (nlargest(1, s)[0] + nsmallest(1, g)[0])/2
  
        # case2(both heaps are balanced)
        elif len(s) == len(g):
            if x < med:
                heappush(s, x)
                med = nlargest(1, s)[0]
            else:
                heappush(g, x)
                med = nsmallest(1, g)[0]
  
        # case3(right side heap has more elements)
        else:
            if x > med:
                heappush(s, heappop(g))
                heappush(g, x)
            else:
                heappush(s, x)
            med = (nlargest(1, s)[0] + nsmallest(1, g)[0])/2
  
        print(med)
  
# Driver program to test above functions
arr = [5, 15, 10, 20, 3]
printMedians(arr, len(arr))
  
# This code is contributed by cavi4762.
C#
Javascript
Output: 
5
10
10
12.5
10
 

Complexity Analysis: 
 

Time Complexity: O(n Log n). 
Time Complexity to insert element in min heap is log n. So to insert n element is O( n log n).
Auxiliary Space : O(n). 
The Space required to store the elements in Heap is O(n).
 

This article is contributed by Vibhu Garg. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
 



Like
Previous
Median in a stream of integers (running integers)
Next
Minimum product of k integers in an array of positive Integers
Related Articles
1.
Median of Stream of Running Integers using STL | Set 2
2.
Median in a stream of integers (running integers)
3.
Finding Median of unsorted Array in linear time using C++ STL
4.
Median after K additional integers
5.
Minimum product of k integers in an array of positive Integers
6.
Median and Mode using Counting Sort
7.
Randomized Algorithms | Set 3 (1/2 Approximate Median)
8.
Efficiently design Insert, Delete and Median queries on a set
9.
Find median of BST
10.
Program for Mean and median of an unsorted array
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
Kaustav kumar Chanda
Akanksha_Rai
andrew1234
Rajput-Ji
avanitrachhadiya2155
cavi4762
Article Tags :
Adobe
Amazon
Apple
Belzabar
Facebook
featured
Google
Microsoft
Morgan Stanley
Ola Cabs
Oracle
Order-Statistics
SAP Labs
statistical-algorithms
STL
Yahoo
Heap
Practice Tags :
Adobe
Amazon
Apple
Belzabar
Facebook
Google
Microsoft
Morgan Stanley
Ola Cabs
Oracle
SAP Labs
Yahoo
Heap
STL
Report Issue