Find K most occurring elements in the given Array

Difficulty Level : Medium
Last Updated : 03 Dec, 2022
Read
Discuss(30+)
Courses
Practice
Video
Given an array of N numbers and a positive integer K. The problem is to find K numbers with the most occurrences, i.e., the top K numbers having the maximum frequency. If two numbers have the same frequency then the number with a larger value should be given preference. The numbers should be displayed in decreasing order of their frequencies. It is assumed that the array consists of at least K numbers.

Examples: 

Input: arr[] = {3, 1, 4, 4, 5, 2, 6, 1}, K = 2
Output: 4 1
Explanation:
Frequency of 4 = 2, Frequency of 1 = 2
These two have the maximum frequency and 4 is larger than 1.

Input: arr[] = {7, 10, 11, 5, 2, 5, 5, 7, 11, 8, 9}, K = 4
Output: 5 11 7 10
Explanation: 
Frequency of 5 = 3, Frequency of 11 = 2, Frequency of 7 = 2, Frequency of 10 = 1
These four have the maximum frequency and 5 is largest among rest.


Recommended Problem
Top K Frequent Elements in Array - |
Arrays
Hash
+3 more
Amazon
Microsoft
Solve Problem
Submission count: 27.2K
Find K most occurring elements in the given Array using Map
To solve the problem using this approach follow the below idea:

create a Map to store the element-frequency pair. Map is used to perform insertion and updation in constant time. Then sort the element-frequency pair in decreasing order of frequency. This gives the information about each element and the number of times they are present in the array. To get K elements of the array, print the first K elements of the sorted array.

Follow the given steps to solve the problem:



Create a map mp, to store key-value pair, i.e. element-frequency pair.
Traverse the array from start to end.
For every element in the array update mp[array[i]]++
Store the element-frequency pair in a vector and sort the vector in decreasing order of frequency.
Print the first k elements of the sorted array.
Below is the Implementation of the above approach:

C++
Java
Python3
# Python3 implementation to find k numbers
# with most occurrences in the given array
 
# Function to print the k numbers with
# most occurrences
 
 
def pr_N_mostFrequentNumber(arr, N, K):
 
    mp = {}
    for i in range(N):
        if arr[i] in mp:
            mp[arr[i]] += 1
        else:
            mp[arr[i]] = 1
    a = [0] * (len(mp))
    j = 0
    for i in mp:
        a[j] = [i, mp[i]]
        j += 1
    a = sorted(a, key=lambda x: x[0],
               reverse=True)
    a = sorted(a, key=lambda x: x[1],
               reverse=True)
 
    # Display the top k numbers
    print(K, "numbers with most occurrences are:")
    for i in range(K):
        print(a[i][0], end=" ")
 
 
# Driver code
if __name__ == "__main__":
    arr = [3, 1, 4, 4, 5, 2, 6, 1]
    N = 8
    K = 2
 
    # Function call
    pr_N_mostFrequentNumber(arr, N, K)
 
# This code is contributed by
# Shubham Singh(SHUBHAMSINGH10)
C#
Javascript
Output
2 numbers with most occurrences are:
4 1 
Time Complexity: O(D log D), where D is the count of distinct elements in the array
Auxiliary Space: O(D), where D is the count of distinct elements in the array

Find K most occurring elements in the given Array using Max-Heap 
To solve the problem using this approach follow the below idea:

Approach: Create a Map to store element-frequency pair. Map is used to perform insertion and updation in constant time. Then use a priority queue to store the element-frequency pair (Max-Heap). The element which has maximum frequency, comes at the root of the Priority Queue. Remove the top or root of Priority Queue K times and print the element.

Follow the given steps to solve the problem:

Create a map mp, to store key-value pair, i.e. element-frequency pair.
Traverse the array from start to end.
For every element in the array update mp[array[i]]++
Store the element-frequency pair in a Priority Queue
Run a loop k times, and in each iteration remove the root of the priority queue and print the element.
Below is the Implementation of the above approach:

C++
Java
Python3
# Python3 implementation to find k
# numbers with most occurrences in
# the given array
import heapq
 
# Function to print the k numbers with
# most occurrences
 
 
def print_N_mostFrequentNumber(arr, N, K):
 
    mp = dict()
 
    # Put count of all the distinct elements
    # in dictionary with element as the
    # key & count as the value.
    for i in range(0, N):
        if arr[i] not in mp:
            mp[arr[i]] = 0
        else:
            mp[arr[i]] += 1
 
    # Using heapq data structure
    heap = [(value, key) for key,
            value in mp.items()]
 
    # Get the top k elements
    largest = heapq.nlargest(K, heap)
 
    # Insert the data from the map to
    # the priority queue
    print(K, " numbers with most "
             "occurrences are:", sep="")
 
    # Print the top k elements
    for i in range(K):
        print(largest[i][1], end=" ")
 
 
# Driver's code
if __name__ == "__main__":
 
    arr = [3, 1, 4, 4, 5, 2, 6, 1]
    N = len(arr)
    K = 2
 
    # Function call
    print_N_mostFrequentNumber(arr, N, K)
 
# This code is contributed by MuskanKalra1
C#
Javascript
Output
2 numbers with most occurrences are:
4 1 
Time Complexity: O(K log D + D log D), where D is the count of distinct elements in the array. 

To remove the top of the priority queue O(log d) time is required, so if k elements are removed then O(k log d) time is required, and 
To construct a priority queue with D elements, O(D log D) time is required.
Auxiliary Space: O(D), where D is the count of distinct elements in the array. 

Find K most occurring elements in the given Array using Bucket Sort
Create a HashMap elementCount and store the count of the elements in the given array.
Create a 2D vector frequency of size N+1 to store the elements according to their frequencies.
Now initialize a variable count = 0.
While count < K:
Traverse the frequency vector from N till 0 and print the elements present in the vector and increment the count for each element.
Below is the implementation of above approach:

C++
Java
Python3
def print_N_mostFrequentNumber(arr, N, K):
    # HashMap to store count of the elements
    count = {}    
     
    # Array to store the elements according
    # to their frequency
    freq = [[] for i in range(len(arr) + 1)]
    for n in arr:
        count[n] = 1 + count.get(n, 0)
    for n, c in count.items():
        freq.append(n)
 
    res = []
    # if K elements have been printed
    for i in range(len(freq)-1, 0, -1):
        for n in freq[i]:
            res.append(n)
            if len(res) == K:
                return res[-1::-1]
 
 
# Driver's code
if __name__ == "__main__":
    arr = [3, 1, 4, 4, 5, 2, 6, 1]
    N = len(arr)
    K = 2
 
    # Function call
    print(print_N_mostFrequentNumber(arr, N, K))
C#
Javascript
Output
2 numbers with most occurrences are:
4 1 
Time Complexity: O(N), where N is the size of the given array.
Auxiliary Space: O(N)

This article is contributed by Ayush Jauhari. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 





Like
65
Previous
k-th smallest absolute difference of two elements in an array
Next
Maximum sum such that no two elements are adjacent
Related Articles
1.
Find GCD of most occurring and least occurring elements of given Array
2.
Find Kth most occurring element in an Array
3.
Print the most occurring character in an array of strings
4.
Minimize splits in given Array to find subsets of at most 2 elements with sum at most K
5.
K most occurring strings
6.
Queries to calculate difference between the frequencies of the most and least occurring characters in specified substring
7.
Find even occurring elements in an array of limited range
8.
Find the sum of all highest occurring elements in an Array
9.
Find all array elements occurring more than ⌊N/3⌋ times
10.
Sum of all minimum occurring elements in an Array
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
SHUBHAMSINGH10
nidhi_biet
Akanksha_Rai
andrew1234
shubhamshah92
rohitkumar52
MuskanKalra1
kshitiz13
_saurabh_jaiswal
avanitrachhadiya2155
anikaseth98
ruhelaa48
phasing17
hardikkoriintern
janardansthox
isha307
aadityapburujwale
ghanshyampraja8959
garg28harsh
evina9ue4
lokeshmvs21
shubhamm050402
Article Tags :
Amazon
Order-Statistics
STL
Arrays
Hash
Heap
Practice Tags :
Amazon
Arrays
Hash
Heap
STL
Improve Article
Report Issue