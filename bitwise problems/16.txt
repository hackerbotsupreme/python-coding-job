Find position of the only set bit

Difficulty Level : Easy
Last Updated : 27 May, 2022
Read
Discuss(50+)
Courses
Practice
Video
Given a number N having only one ‘1’ and all other ’0’s in its binary representation, find position of the only set bit. If there are 0 or more than 1 set bit the answer should be -1. Position of set bit ‘1’ should be counted starting with 1 from the LSB side in the binary representation of the number.

 Source: Microsoft Interview | 18

Examples:-

Input:
N = 2
Output:
2
Explanation:
2 is represented as "10" in Binary.
As we see there's only one set bit
and it's in Position 2 and thus the
Output 2.
here is another example

Input:
N = 5
Output:
-1
Explanation:
5 is represented as "101" in Binary.
As we see there's two set bits
and thus the Output -1.
Recommended Problem
Find position of set bit
Bit Magic
Data Structures
Microsoft
Solve Problem
Submission count: 50.4K
The idea is to start from the rightmost bit and one by one check value of every bit. Following is a detailed algorithm.
1) If number is power of two then and then only its binary representation contains only one ‘1’. That’s why check whether the given number is a power of 2 or not. If given number is not a power of 2, then print error message and exit.
2) Initialize two variables; i = 1 (for looping) and pos = 1 (to find position of set bit)
3) Inside loop, do bitwise AND of i and number ‘N’. If value of this operation is true, then “pos” bit is set, so break the loop and return position. Otherwise, increment “pos” by 1 and left shift i by 1 and repeat the procedure. 

C++
C
Java
Python3
# Python3 program to find position of
# only set bit in a given number
 
# A utility function to check
# whether n is power of 2 or
# not.
def isPowerOfTwo(n):
    return (True if(n > 0 and
                   ((n & (n - 1)) > 0))
                 else False);
     
# Returns position of the
# only set bit in 'n'
def findPosition(n):
    if (isPowerOfTwo(n) == True):
        return -1;
 
    i = 1;
    pos = 1;
 
    # Iterate through bits of n
    # till we find a set bit i&n
    # will be non-zero only when
    # 'i' and 'n' have a set bit
    # at same position
    while ((i & n) == 0):
         
        # Unset current bit and
        # set the next bit in 'i'
        i = i << 1;
 
        # increment position
        pos += 1;
 
    return pos;
 
# Driver Code
n = 16;
pos = findPosition(n);
if (pos == -1):
    print("n =", n, ", Invalid number");
else:
    print("n =", n, ", Position ", pos);
 
n = 12;
pos = findPosition(n);
if (pos == -1):
    print("n =", n, ", Invalid number");
else:
    print("n =", n, ", Position ", pos);
 
n = 128;
pos = findPosition(n);
if (pos == -1):
    print("n =", n, ", Invalid number");
else:
    print("n =", n, ", Position ", pos);
 
# This code is contributed by mits
C#
PHP
Javascript
Output : 

n = 16, Position 5
n = 12, Invalid number
n = 128, Position 8
Time Complexity: O(log2n), where n is the given number



Space Complexity: O(1)

Following is another method for this problem. The idea is to one by one right shift the set bit of the given number ‘n’ until ‘n’ becomes 0. Count how many times we shifted to make ‘n’ zero. The final count is the position of the set bit. 

C++
C
Java
Python3
# Python 3 program to find position
# of only set bit in a given number
 
# A utility function to check whether
# n is power of 2 or not
def isPowerOfTwo(n) :
 
    return (n and ( not (n & (n-1))))
 
# Returns position of the only set bit in 'n'
def findPosition(n) :
 
    if not isPowerOfTwo(n) :
        return -1
 
    count = 0
 
    # One by one move the only set bit to
    # right till it reaches end
    while (n) :
         
        n = n >> 1
 
        # increment count of shifts
        count += 1
 
    return count
 
 
# Driver program to test above function
if __name__ == "__main__" :
    n = 0
    pos = findPosition(n)
 
    if pos == -1 :
        print("n =", n, "Invalid number")
    else :
        print("n =", n, "Position", pos)
 
    n = 12
    pos = findPosition(n)
 
    if pos == -1 :
        print("n =", n, "Invalid number")
    else :
        print("n =", n, "Position", pos)
 
    n = 128
    pos = findPosition(n)
 
    if pos == -1 :
        print("n =", n, "Invalid number")
    else :
        print("n =", n, "Position", pos)
    
# This code is contributed by ANKITRAI1
C#
PHP
Javascript
Output : 

n = 0, Invalid number
n = 12, Invalid number
n = 128, Position 8
Time Complexity: O(log2n), where n is the given number

Space Complexity: O(1)

We can also use log base 2 to find the position. Thanks to Arunkumar for suggesting this solution. 

C++
C
Java
Python3
# Python program to find position
# of only set bit in a given number
 
def Log2n(n):
    if (n > 1):
        return (1 + Log2n(n / 2))
    else:
        return 0
     
# A utility function to check
# whether n is power of 2 or not   
def isPowerOfTwo(n):
    return n and (not (n & (n-1)) )
     
def findPosition(n):
    if (not isPowerOfTwo(n)):
        return -1
    return Log2n(n) + 1
     
# Driver program to test above function
 
n = 0
pos = findPosition(n)
if(pos == -1):
    print("n =", n, ", Invalid number")
else:
    print("n = ", n, ", Position ", pos)
  
n = 12
pos = findPosition(n)
if(pos == -1):
    print("n =", n, ", Invalid number")
else:
    print("n = ", n, ", Position ", pos)
n = 128
pos = findPosition(n)
if(pos == -1):
    print("n = ", n, ", Invalid number")
else:
    print("n = ", n, ", Position ", pos)
  
# This code is contributed
# by Sumit Sudhakar
C#
PHP
Javascript
Output : 

n = 0, Invalid number
n = 12, Invalid number
n = 128, Position 8
Time Complexity: O(log2n)

Space Complexity: O(log2n)

This article is compiled by Narendra Kangralkar. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
 





Like
15
Previous
Check whether the bit at given position is set or unset
Next
How to swap two numbers without using a temporary variable?
Related Articles
1.
Find array elements with rightmost set bit at the position of the rightmost set bit in K
2.
Check whether the two numbers differ at one bit position only
3.
Inserting M into N such that m starts at bit j and ends at bit i | Set-2
4.
Minimum bit flips such that every K consecutive bits contain at least one set bit
5.
Count bases which contains a set bit as the Most Significant Bit in the representation of N
6.
Find X in range [1, N] of bit size A[i] such that X^2's bit size is not present in Array
7.
Check whether the bit at given position is set or unset
8.
Position of the K-th set bit in a number
9.
Position of leftmost set bit in given binary string where all 1s appear at end
10.
Position of rightmost set bit
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
jit_t
Mithun Kumar
ankthon
rathbhupendra
CheshtaKwatra
surinderdawra388
jpafymzpbi
rohitmishra051000
Article Tags :
Microsoft
Bit Magic
Practice Tags :
Microsoft
Bit Magic
Improve Article
Report Issue