Find the maximum subarray XOR in a given array

Difficulty Level : Hard
Last Updated : 28 Sep, 2022
Read
Discuss(80+)
Courses
Practice
Video
Given an array of integers. The task is to find the maximum subarray XOR value in the given array.

Examples: 

Input: arr[] = {1, 2, 3, 4}
Output: 7
Explanation: The subarray {3, 4} has maximum XOR value

Input: arr[] = {8, 1, 2, 12, 7, 6}
Output: 15
Explanation: The subarray {1, 2, 12} has maximum XOR value

Input: arr[] = {4, 6}
Output: 6
Explanation: The subarray {6} has maximum XOR value

Recommended Problem
Maximum XOR subarray
Trie
Advanced Data Structure
Microsoft
Solve Problem
Submission count: 27.8K
Naive Approach: Below is the idea to solve the problem:

Create all possible subarrays and calculate the XOR of the subarrays. The maximum among them will be the required answer.



Follow the steps mentioned below to implement the idea:

Iterate from i  = 0 to N-1:
Initialize a variable (say curr_xor = 0) to store the XOR value of subarrays starting from i
Run a nested loop from j =  i to N-1:
The value j determines the ending point for the current subarray starting from i.
Update curr_xor by performing XOR of curr_xor with arr[j].
If the value is greater than the maximum then update the maximum value also.
The maximum value is the required answer.
Below is the Implementation of the above approach:

C++
Java
Python3
# A simple Python program
# to find max subarray XOR
 
def maxSubarrayXOR(arr,n):
 
    ans = -2147483648     #Initialize result
  
    # Pick starting points of subarrays
    for i in range(n):
         
        # to store xor of current subarray
        curr_xor = 0
  
        # Pick ending points of
        # subarrays starting with i
        for j in range(i,n):
         
            curr_xor = curr_xor ^ arr[j]
            ans = max(ans, curr_xor)
         
     
    return ans
 
 
# Driver code
 
arr = [8, 1, 2, 12]
n = len(arr)
 
print("Max subarray XOR is ",
     maxSubarrayXOR(arr, n))
 
# This code is contributed
# by Anant Agarwal.
C#
PHP
Javascript
Output
Max subarray XOR is 15
Time Complexity: O(N2).
Auxiliary Space: O(1)

Find the maximum subarray XOR in a given array using trie Data Structure.
Maximize the xor subarray by using trie data structure to find the binary inverse of current prefix xor inorder to set the left most unset bits and maximize the value.

Follow the below steps to Implement the idea:

Create an empty Trie. Every node of Trie is going to contain two children, for 0 and 1 values of a bit.
Initialize pre_xor = 0 and insert into the Trie, Initialize result = INT_MIN
Traverse the given array and do the following for every array element arr[i].
pre_xor  = pre_xor  ^ arr[i], pre_xor now contains xor of elements from arr[0] to arr[i].
Query the maximum xor value ending with arr[i] from Trie.
Update the result if the value obtained above is more than the current value of the result.
Illustration:

It can be observed from the above algorithm that we build a Trie that contains XOR of all prefixes of given array. To find the maximum XOR subarray ending with arr[i], there may be two cases. 

The prefix itself has the maximum XOR value ending with arr[i]. For example if i=2 in {8, 2, 1, 12}, then the maximum subarray xor ending with arr[2] is the whole prefix. 
Remove some prefix (ending at index from 0 to i-1). For example if i=3 in {8, 2, 1, 12}, then the maximum subarray xor ending with arr[3] starts with arr[1] and we need to remove arr[0].
To find the prefix to be removed, find the entry in Trie that has maximum XOR value with current prefix. If we do XOR of such previous prefix with current prefix, get the maximum XOR value ending with arr[i]. 
If there is no prefix to be removed (case i), then we return 0 (thatâ€™s why we inserted 0 in Trie). 
Below is the implementation of the above idea :

C++
Java
Python3
"""Python implementation for a Trie based solution
to find max subArray XOR"""
 
# Structure of Trie Node
class Node:
 
    def __init__(self, data):
 
        self.data = data
         
        # left node for 0
        self.left = None
         
        # right node for 1
        self.right = None
 
# Class for implementing Trie
class Trie:
 
    def __init__(self):
 
        self.root = Node(0)
 
    # Insert pre_xor to trie with given root
    def insert(self, pre_xor):
 
        self.temp = self.root
 
        # Start from msb, insert all bits of pre_xor
        # into the Trie
        for i in range(31, -1, -1):
 
            # Find current bit in prefix sum
            val = pre_xor & (1<<i)
 
            if val :
                 
                # Create new node if needed
                if not self.temp.right:
                    self.temp.right = Node(0)
                self.temp = self.temp.right
 
            if not val:
                 
                # Create new node if needed
                if not self.temp.left:
                    self.temp.left = Node(0)
                self.temp = self.temp.left
 
        # Store value at leaf node
        self.temp.data = pre_xor
 
    # Find the maximum xor ending with last number
    # in prefix XOR and return the XOR of this
    def query(self, xor):
 
        self.temp = self.root
 
        for i in range(31, -1, -1):
 
            # Find the current bit in prefix xor
            val = xor & (1<<i)
 
            # Traverse the trie, first look for opposite bit
            # and then look for same bit
            if val:
                if self.temp.left:
                    self.temp = self.temp.left
                elif self.temp.right:
                    self.temp = self.temp.right
            else:
                if self.temp.right:
                    self.temp = self.temp.right
                elif self.temp.left:
                    self.temp = self.temp.left
 
        return xor ^ self.temp.data
 
    # Returns maximum XOR value of subarray
    def maxSubArrayXOR(self, n, Arr):
 
        # Insert 0 in the trie
        self.insert(0)
 
        # Initialize result and pre_xor
        result = -float('inf')
        pre_xor = 0
 
        # Traverse all input array element
        for i in range(n):
 
            # Update current prefix xor and
            # insert it into Trie
            pre_xor = pre_xor ^ Arr[i]
            self.insert(pre_xor)
 
            # Query for current prefix xor
            # in Trie and update result
            result = max(result, self.query(pre_xor))
 
        return result
 
# Driver code
if __name__ == "__main__":
 
    Arr = [8, 1, 2, 12]
    n = len(Arr)
    trie = Trie()
    print("Max subarray XOR is", end = ' ')
    print(trie.maxSubArrayXOR(n, Arr))
 
# This code is contributed by chaudhary_19
C#
Output
Max subarray XOR is 15
Time Complexity: O(N).
Auxiliary Space: O(N)

Exercise: Extend the above solution so that it also prints starting and ending indexes of subarray with maximum value (Hint: we can add one more field to Trie node to achieve this 

This article is contributed by Aarti_Rathi and Romil Punetha. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.





Like
76
Previous
Find the maximum subset XOR of a given set
Next
Maximum XOR of Two Numbers in an Array
Related Articles
1.
Count of subarrays in range [L, R] having XOR + 1 equal to XOR (XOR) 1 for M queries
2.
Find smallest Subarray with Maximum Xor starting from each index
3.
Given a set, find XOR of the XOR's of all subsets.
4.
Bitwise XOR of same indexed array elements after rearranging an array to make XOR of same indexed elements of two arrays equal
5.
Find array such that no subarray has xor zero or Y
6.
Find a K-length subarray having Bitwise XOR equal to that of remaining array elements
7.
Maximum XOR value of maximum and second maximum element among all possible subarrays
8.
Find XOR of two number without using XOR operator
9.
Find the subarray of size K with minimum XOR
10.
Queries to update each element in subarray to Bitwise XOR with a given value
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
Sam007
vt_m
shrikanth13
anish17122000
chaudhary_19
divyesh072019
arorapratyush01
sweetyty
kalrap615
sumitgumber28
SHUBHAMSINGH10
gopikrishna01012001
sachinvinod1904
hardikkoriintern
as5853535
aashutoshparoha
Article Tags :
Bitwise-XOR
Advanced Data Structure
Bit Magic
Strings
Practice Tags :
Advanced Data Structure
Bit Magic
Strings
Improve Article
Report Issue