Find the two non-repeating elements in an array of repeating elements/ Unique Numbers 2

Difficulty Level : Hard
Last Updated : 27 Jan, 2023
Read
Discuss(110+)
Courses
Practice
Video
Given an array in which all numbers except two are repeated once. (i.e. we have 2n+2 numbers and n numbers are occurring twice and the remaining two have occurred once). Find those two numbers in the most efficient way.  

Recommended Problem
Non Repeating Numbers
Bit Magic
Data Structures
Accolite
Amazon
+6 more
Solve Problem
Submission count: 90.6K
Method 1(Use Sorting) 
First, sort all the elements. In the sorted array, by comparing adjacent elements we can easily get the non-repeating elements. 

Below is the implementation of the above approach:

C++
Java
C#
Javascript
Python3
# python program for above approach
 
# function sets the values of
# x and *y to non-repeating elements
# in an array arr[] of size n
def get2NonRepeatingNos(nums, n):
 
    nums.sort();
 
    ans=[];
     
    i=0;
    while(i<n-1):
        if (nums[i] != nums[i + 1]):
            ans.append(nums[i])
            i = i + 1
        else:
            i=i+2;
         
             
    if (len(arr) == 1):
        ans.append(nums[n - 1]);
         
    return ans;
 
# Driver code
arr = [ 2, 3, 7, 9, 11, 2, 3, 11 ];
n = len(arr);
ans = get2NonRepeatingNos(arr, n);
print("The non-repeating elements are ", ans[0], " and ", ans[1]);
Output

The non-repeating elements are 7 and 9
Time complexity: O(n log n)
Auxiliary Space: O(1)

Method 2(Use XOR) 
Let x and y be the non-repeating elements we are looking for and arr[] be the input array. First, calculate the XOR of all the array elements. 

     xor = arr[0]^arr[1]^arr[2].....arr[n-1]
All the bits that are set in xor will be set in one non-repeating element (x or y) and not in others. So if we take any set bit of xor and divide the elements of the array in two sets – one set of elements with same bit set and another set with same bit not set. By doing so, we will get x in one set and y in another set. Now if we do XOR of all the elements in the first set, we will get the first non-repeating element, and by doing same in other sets we will get the second non-repeating element. 

Let us see an example.
   arr[] = {2, 4, 7, 9, 2, 4}
1) Get the XOR of all the elements.
     xor = 2^4^7^9^2^4 = 14 (1110)
2) Get a number which has only one set bit of the xor.   
   Since we can easily get the rightmost set bit, let us use it.
     set_bit_no = xor & ~(xor-1) = (1110) & ~(1101) = 0010
   Now set_bit_no will have only set as rightmost set bit of xor.
3) Now divide the elements in two sets and do xor of         
   elements in each set and we get the non-repeating 
   elements 7 and 9. Please see the implementation for this step.
Approach : 
Step 1: Xor all the elements of the array into a variable sum thus all the elements present twice in an array will get removed as for example, 4 = “100” and if 4 xor 4 => “100” xor “100” thus answer will be “000”. 
Step 2: Thus in the sum the final answer will be 3 xor 5 as both 2 and 4 are xor with itself giving 0, therefore sum = “011” xor “101” i.e sum = “110” = 6. 
Step 3: Now we will take 2’s Complement of sum i.e (-sum) = “010”. 
Step 4: Now bitwise And the 2’s of sum with the sum i.e “110” & “010” gives the answer “010” (Aim for bitwise & is that we want to get a number that contains only the rightmost set bit of the sum). 
Step 5: bitwise & all the elements of the array with this obtained sum, 2 = “010” & “010” = 2, 3 = “011” & “010” = “010” , 4 = “100” & “010” = “000”, 5 = “101” & “010” = “000”. 
Step 6: As we can see that the bitwise & of 2,3 > 0 thus they will be xor with sum1 and bitwise & of 4,5 is resulting into 0 thus they will be xor with sum2. 
Step 7: As 2 is present two times so getting xor with sum1 two times only the result 3 is being stored in it and As 4 is also present two times thus getting xor with sum2 will cancel it’s value and thus only 5 will remain there.

Implementation: 

C++
C
Java
Python3
# Python3 program for above approach
 
# This function sets the values of
# *x and *y to non-repeating elements
# in an array arr[] of size n
 
 
def UniqueNumbers2(arr, n):
 
    sums = 0
 
    for i in range(0, n):
 
        # Xor  all the elements of the array
        # all the elements occurring twice will
        # cancel out each other remaining
        # two unique numbers will be xored
        sums = (sums ^ arr[i])
 
    # Bitwise & the sum with it's 2's Complement
    # Bitwise & will give us the sum containing
    # only the rightmost set bit
    sums = (sums & -sums)
 
    # sum1 and sum2 will contains 2 unique
    # elements  initialized with 0 box
    # number xored with 0 is number itself
    sum1 = 0
    sum2 = 0
 
    # Traversing the array again
    for i in range(0, len(arr)):
 
        # Bitwise & the arr[i] with the sum
        # Two possibilities either result == 0
        # or result > 0
        if (arr[i] & sums) > 0:
 
            # If result > 0 then arr[i] xored
            # with the sum1
            sum1 = (sum1 ^ arr[i])
 
        else:
 
            # If result == 0 then arr[i]
            # xored with sum2
            sum2 = (sum2 ^ arr[i])
 
    # Print the two unique numbers
    print("The non-repeating elements are ",
          sum1, " and ", sum2)
 
 
# Driver Code
if __name__ == "__main__":
 
    arr = [2, 3, 7, 9, 11, 2, 3, 11]
    n = len(arr)
 
    UniqueNumbers2(arr, n)
 
# This code is contributed by akhilsaini
C#
Javascript
Output
The non-repeating elements are 7 and 9
Time Complexity: O(n) 
Auxiliary Space: O(1)

Please refer below post for detailed explanation : 
Find the two numbers with odd occurrences in an unsorted array

Method 3(Use Maps)

In this method, we simply count frequency of each element. The elements whose frequency is equal to 1 is the number which is non-repeating. The solution is explained below in the code-

C++
Java
Python3
# Python program for Find the two
# non-repeating elements in an array
# of repeating elements/ Unique Numbers 2
 
#  This function prints the two non-repeating elements in an
#  array of repeating elements
def get2NonRepeatingNos(arr, n):
 
    # Create map and calculate frequency of array
    # elements
    m = {}
    for i in range(n):
        if(arr[i] not in m):
            m[arr[i]] = 0
 
        m[arr[i]] = m[arr[i]] + 1
 
    # Traverse through the map and check if its second
    #   element that is the frequency is 1 or not. If this is
    #   1 than it is the non-repeating element print it.It is
    #   clearly mentioned in problem that all numbers except
    #   two are repeated once. So they will be printed
    print("The non-repeating elements are", end = " ")
    for key,value in m.items():
        if (value == 1):
            print(key,end = " ")
 
# Driver code
arr = [ 2, 3, 7, 9, 11, 2, 3, 11 ]
n = len(arr)
get2NonRepeatingNos(arr, n)
 
# This code is contributed by shinjanpatra
C#
Javascript
Output
The non-repeating elements are 7 9 
Time Complexity: O(n log n) 
Auxiliary Space: O(n)

Method 4(Use Sets):
In this method, We check if the element already exists, if it exists we remove it else we add it to the set.

Approach:

Step 1: Take each element and check if it exists in the set or not. If it exists go to step 3. If it doesn’t exist go to step 2.
Step 2: Add the element to the set and go to step 4.
Step 3: Remove the element from the set and go to step 4.
Step 4: Print the elements of the set.

Implementation:

C++
Java
Python3
# Python3 code to find 2 non repeating elements
# in array that has pairs of numbers
 
# Method to print the 2 non repeating
# elements in an array
def print2SingleNumbers(nums):
 
    # Create a set to store the numbers
    set_ = set()
 
    n = len(nums)
 
    # Iterate through the array and check if each
    # element is present or not in the set. If the
    # element is present, remove it from the array
    # otherwise add it to the set
 
    for i in nums:
        if i in set_:
            set_.remove(i)
        else:
            set_.add(i)
 
    # Since there will only be 2 non
    # repeating elements we can
    # directly print them
    print("The 2 non repeating numbers are : " + " ".join(map(str, set_)))
 
# Driver Code
nums = [2, 3, 7, 9, 11, 2, 3, 11]
 
# Function Call
print2SingleNumbers(nums)
 
# This code is contributed by phasing17
C#
Javascript
Output
The 2 non repeating numbers are : 7 9
Time Complexity: O(n) for a given array of size n
Auxiliary Space: O(n)

C++
Java
Python3
# Python program for Find the two non-repeating elements in
# an array of repeating elements/ Unique Numbers 2
 
#  This function prints the two non-repeating elements in an
#  array of repeating elements
def get2NonRepeatingNos(arr, n):
 
    # Create a Set to store the numbers
    s = set()
    for i in range(n):
     
        # Iterate through the array and check if each
        # element is present or not in the set. If the
        # element is present, remove it from the array
        # otherwise add it to the set
 
        if (arr[i] in s):
            s.remove(arr[i])
        else:
            s.add(arr[i])
    print("The 2 non repeating numbers are :",end=" ")
    for it in s:
        print(it,end=" ")
    print()
 
# Driver code
arr = [2, 3, 7, 9, 11, 2, 3, 11]
n = len(arr)
get2NonRepeatingNos(arr, n)
 
# This code is contributed by shinjanpatra
C#
Javascript
Output
The 2 non repeating numbers are : 7 9 
Time Complexity: O(n log n)
Auxiliary Space: O(n)



Like
Previous
Smallest of three integers without comparison operators
Next
Write an Efficient C Program to Reverse Bits of a Number
Related Articles
1.
Find the two repeating elements in a given array
2.
Find Unique pair in an array with pairs of numbers
3.
Find the first repeating element in an array of integers
4.
Find the maximum repeating number in O(n) time and O(1) extra space
5.
Java Program To Find Length Of The Longest Substring Without Repeating Characters
6.
Python Program To Find Length Of The Longest Substring Without Repeating Characters
7.
Javascript Program To Find Length Of The Longest Substring Without Repeating Characters
8.
Find the missing and repeating number
9.
Find first non-repeating character of given String
10.
Find the first non-repeating character from a stream of characters
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
Akanksha_Rai
rathbhupendra
CubE
parshavnahta97
akhilsaini
vaibhavrabadiya117
adnanirshad158
abhishekcs001
anandakrishnananilkumar
anveshr541
arorakashish0911
adityakumar129
code_hunt
joaquin144
shinjanpatra
surinderdawra388
sanjoy_62
avijitmondal1998
phasing17
simmytarika5
technophpfij
111arpit1
karandeep1234
user_7gr9iodclfx
lokeshmvs21
hkdass001
Article Tags :
Accolite
Amazon
Bitwise-XOR
FactSet
Google
MakeMyTrip
Microsoft
Qualcomm
Bit Magic
Practice Tags :
Accolite
Amazon
FactSet
Google
MakeMyTrip
Microsoft
Qualcomm
Bit Magic
Report Issue