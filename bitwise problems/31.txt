Calculate square of a number without using *, / and pow()

Difficulty Level : Medium
Last Updated : 12 Jun, 2022
Read
Discuss(30+)
Courses
Practice
Video
Given an integer n, calculate the square of a number without using *, / and pow(). 

Examples : 

Input: n = 5
Output: 25

Input: 7
Output: 49

Input: n = 12
Output: 144
A Simple Solution is to repeatedly add n to result. 

Below is the implementation of this idea. 

C++
Java
Python3
# Simple solution to
# calculate square without
# using * and pow()
 
def square(n):
 
    # handle negative input
    if (n < 0):
        n = -n
 
    # Initialize result
    res = n
 
    # Add n to res n-1 times
    for i in range(1, n):
        res += n
 
    return res
 
 
# Driver Code
for n in range(1, 6):
    print("n =", n, end=", ")
    print("n^2 =", square(n))
 
# This code is contributed by
# Smitha Dinesh Semwal
C#
PHP
Javascript
Output
n = 1, n^2 = 1
n = 2, n^2 = 4
n = 3, n^2 = 9
n = 4, n^2 = 16
n = 5, n^2 = 25
Time Complexity: O(n)

Auxiliary Space: O(1)



Approach 2:

We can do it in O(Logn) time using bitwise operators. The idea is based on the following fact.

  square(n) = 0 if n == 0
  if n is even 
     square(n) = 4*square(n/2) 
  if n is odd
     square(n) = 4*square(floor(n/2)) + 4*floor(n/2) + 1 

Examples
  square(6) = 4*square(3)
  square(3) = 4*(square(1)) + 4*1 + 1 = 9
  square(7) = 4*square(3) + 4*3 + 1 = 4*9 + 4*3 + 1 = 49
How does this work? 

If n is even, it can be written as
  n = 2*x 
  n2 = (2*x)2 = 4*x2
If n is odd, it can be written as 
  n = 2*x + 1
  n2 = (2*x + 1)2 = 4*x2 + 4*x + 1
floor(n/2) can be calculated using a bitwise right shift operator. 2*x and 4*x can be calculated 

Below is the implementation based on the above idea. 

C++
Java
Python3
# Square of a number using bitwise
# operators
 
 
def square(n):
 
    # Base case
    if (n == 0):
        return 0
 
    # Handle negative number
    if (n < 0):
        n = -n
 
    # Get floor(n/2) using
    # right shift
    x = n >> 1
 
    # If n is odd
    if (n & 1):
        return ((square(x) << 2)
                + (x << 2) + 1)
 
    # If n is even
    else:
        return (square(x) << 2)
 
 
# Driver Code
for n in range(1, 6):
    print("n = ", n, " n^2 = ",
          square(n))
# This code is contributed by Sam007
C#
PHP
Javascript
Output
n = 1, n^2 = 1
n = 2, n^2 = 4
n = 3, n^2 = 9
n = 4, n^2 = 16
n = 5, n^2 = 25
Time Complexity: O(logn)

Auxiliary Space: O(1)

Approach 3:

For a given number `num` we get square of it by multiplying number as `num * num`. 
Now write one of `num` in square `num * num` in terms of power of `2`. Check below examples.

Eg: num = 10, square(num) = 10 * 10 
                          = 10 * (8 + 2) = (10 * 8) + (10 * 2)
    num = 15, square(num) = 15 * 15 
                          = 15 * (8 + 4 + 2 + 1) = (15 * 8) + (15 * 4) + (15 * 2) + (15 * 1)

Multiplication with power of 2's can be done by left shift bitwise operator.
Below is the implementation based on the above idea. 

C++
Java
Python3
# Simple solution to calculate square without
# using * and pow()
def square(num):
 
    # Handle negative input
    if (num < 0):
        num = -num
 
    # Initialize result
    result, times = 0, num
 
    while (times > 0):
        possibleShifts, currTimes = 0, 1
 
        while ((currTimes << 1) <= times):
            currTimes = currTimes << 1
            possibleShifts += 1
 
        result = result + (num << possibleShifts)
        times = times - currTimes
 
    return result
 
# Driver Code
 
# Function calls
for n in range(10, 16):
    print("n =", n, ", n^2 =", square(n))
 
# This code is contributed by divyesh072019
C#
Javascript
Output
n = 10, n^2 = 100
n = 11, n^2 = 121
n = 12, n^2 = 144
n = 13, n^2 = 169
n = 14, n^2 = 196
n = 15, n^2 = 225
Time Complexity: O(logn)

Auxiliary Space: O(1)

Thanks to Sanjay for approach 3 solution.

This article is contributed by Ujjwal Jain. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above
 

C++
// Simple solution to calculate square without
// using * and pow()
#include <iostream>
using namespace std;
 
int square(int num)
{
    // handle negative input
    if (num < 0)
        num = -num;
 
    // Initialize power of 2 and result
    int power = 0, result = 0;
    int temp = num;
 
    while (temp) {
        if (temp & 1) {
            // result=result+(num*(2^power))
            result += (num << power);
        }
        power++;
 
        // temp=temp/2
        temp = temp >> 1;
    }
 
    return result;
}
 
// Driver code
int main()
{
    // Function calls
    for (int n = 10; n <= 15; ++n)
        cout << "n = " << n << ", n^2 = " << square(n)
             << endl;
    return 0;
}
 
// This code is contributed by Aditya Verma
Output
n = 10, n^2 = 100
n = 11, n^2 = 121
n = 12, n^2 = 144
n = 13, n^2 = 169
n = 14, n^2 = 196
n = 15, n^2 = 225
Time Complexity: O(logn)

Auxiliary Space: O(1)

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
109
Next
Generate 0 and 1 with 25% and 75% probability
Related Articles
1.
Calculate 7n/8 without using division and multiplication operators
2.
Multiply a number by 15 without using * and / operators
3.
Find square root of a number using Bit Manipulation
4.
Find XOR of two number without using XOR operator
5.
Multiply a number with 10 without using multiplication operator
6.
Increment a number without using ++ or +
7.
Calculate Bitwise OR of two integers from their given Bitwise AND and Bitwise XOR values
8.
Check if two numbers are equal without using arithmetic and comparison operators
9.
Divide two integers without using multiplication, division and mod operator
10.
Minimum digits to remove to make a number Perfect Square
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
Sam007
jit_t
nidhi_biet
sanjay035
RohitOberoi
divyeshrabadiya07
divyesh072019
geeksvishal
mayanktyagi1709
123adiverma
ranjanrohit840
Article Tags :
Bit Magic
Practice Tags :
Bit Magic