Bitwise Operators in C/C++

Difficulty Level : Medium
Last Updated : 20 Aug, 2022
Read
Discuss
Courses
Practice
Video
In C, the following 6 operators are bitwise operators (work at bit-level) 
 

Bitwise Operators in C/C++

The & (bitwise AND) in C or C++ takes two numbers as operands and does AND on every bit of two numbers. The result of AND is 1 only if both bits are 1.  
The | (bitwise OR) in C or C++ takes two numbers as operands and does OR on every bit of two numbers. The result of OR is 1 if any of the two bits is 1. 
The ^ (bitwise XOR) in C or C++ takes two numbers as operands and does XOR on every bit of two numbers. The result of XOR is 1 if the two bits are different. 
The << (left shift) in C or C++ takes two numbers, left shifts the bits of the first operand, the second operand decides the number of places to shift. 
The >> (right shift) in C or C++ takes two numbers, right shifts the bits of the first operand, the second operand decides the number of places to shift. 
The ~ (bitwise NOT) in C or C++ takes one number and inverts all bits of it. 
Example: 

C++
#include <iostream>
using namespace std;
 
int main() {
      // a = 5(00000101), b = 9(00001001)
    int a = 5, b = 9;
 
    // The result is 00000001
    cout<<"a = " << a <<","<< " b = " << b <<endl;
    cout << "a & b = " << (a & b) << endl;
 
    // The result is 00001101
    cout << "a | b = " << (a | b) << endl;
 
    // The result is 00001100
    cout << "a ^ b = " << (a ^ b) << endl;
 
    // The result is 11111010
    cout << "~a = " << (~a) << endl;
 
    // The result is 00010010
    cout<<"b << 1" <<" = "<< (b << 1) <<endl;
 
    // The result is 00000100
    cout<<"b >> 1 "<<"= " << (b >> 1 )<<endl;
 
    return 0;
}
 
// This code is contributed by sathiyamoorthics19
C
Output
a = 5, b = 9
a & b = 1
a | b = 13
a ^ b = 12
~a = -6
b << 1 = 18
b >> 1 = 4
Time Complexity: O(1)

Auxiliary Space: O(1)

Interesting facts about bitwise operators



The left shift and right shift operators should not be used for negative numbers. If the second operand(which decides the number of shifts) is a negative number, it results in undefined behaviour in C. For example results of both 1 <<- 1 and 1 >> -1 is undefined. Also, if the number is shifted more than the size of the integer, the behaviour is undefined. For example, 1 << 33 is undefined if integers are stored using 32 bits. Another thing is, NO shift operation is performed if additive-expression(operand that decides no of shifts) is 0. See this for more details. 
Note: In C++, this behavior is well-defined.
Interestingly!! The bitwise OR of two numbers is just the sum of those two numbers if there is no carry involved, otherwise you just add their bitwise AND. Let’s say, we have a=5(101) and b=2(010), since there is no carry involved, their sum is just a|b. Now, if we change ‘a’ to 6 which is 110 in binary, their sum would change to a|b + a&b since there is a carry involved. 
The bitwise XOR operator is the most useful operator from a technical interview perspective. It is used in many problems. A simple example could be “Given a set of numbers where all elements occur an even number of times except one number, find the odd occurring number” This problem can be efficiently solved by just doing XOR to all numbers. 
 
C++
#include <iostream>
using namespace std;
 
// Function to return the only odd
// occurring element
int findOdd(int arr[], int n)
{
    int res = 0, i;
    for (i = 0; i < n; i++)
        res ^= arr[i];
    return res;
}
 
// Driver Method
int main(void)
{
    int arr[] = { 12, 12, 14, 90, 14, 14, 14 };
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << "The odd occurring element is  "<< findOdd(arr, n);
    return 0;
}
 
// This code is contributed by shivanisinghss2110
C
Output
The odd occurring element is  90
Time Complexity: O(n)

Auxiliary Space: O(1)

 
cpp-stl-self-paced-course

The following are many other interesting problems using XOR operator. 

Find the Missing Number
swap two numbers without using a temporary variable
A Memory Efficient Doubly Linked List
Find the two non-repeating elements.
Find the two numbers with odd occurrences in an unsorted-array.
Add two numbers without using arithmetic operators.
Swap bits in a given number.
Count number of bits to be flipped to convert a to b .
Find the element that appears once.
Detect if two integers have opposite signs.
The bitwise operators should not be used in place of logical operators. The result of logical operators (&&, || and !) is either 0 or 1, but bitwise operators return an integer value. Also, the logical operators consider any non-zero operand as 1. For example, consider the following program, the results of & and && are different for same operands. 
 

C++
#include <iostream>
using namespace std;
 
int main()
{
    int x = 2, y = 5;
    (x & y) ? cout <<"True " : cout <<"False ";
    (x && y) ? cout <<"True " : cout <<"False ";
    return 0;
}
 
 
 
// This code is contributed by shivanisinghss2110
C
Output
False True 
Time Complexity: O(1)

Auxiliary Space: O(1)

The left-shift and right-shift operators are equivalent to multiplication and division by 2 respectively. As mentioned in point 1, it works only if numbers are positive. 
 

C++
#include <iostream>
using namespace std;
 
int main() {
 
    int x = 19;
    cout<<"x << 1 = "<< (x << 1) <<endl;
    cout<<"x >> 1 = "<< (x >> 1) <<endl;
    return 0;
}
 
// This code is contributed by sathiyamoorthics19
C
Output
x << 1 = 38
x >> 1 = 9
Time Complexity: O(1)

Auxiliary Space: O(1)

The & operator can be used to quickly check if a number is odd or even. The value of expression (x & 1) would be non-zero only if x is odd, otherwise the value would be zero. 
 

C++
#include <iostream>
using namespace std;
 
int main() {
 
    int x = 19 ;
    (x & 1) ? cout<<"Odd" : cout<< "Even" ;
       
    return 0;
}
 
// This code is contributed by sathiyamoorthics19
C
Output
Odd
Time Complexity: O(1)

Auxiliary Space: O(1)

The ~ operator should be used carefully. The result of ~ operator on a small number can be a big number if the result is stored in an unsigned variable. And the result may be a negative number if the result is stored in a signed variable (assuming that the negative numbers are stored in 2’s complement form where the leftmost bit is the sign bit) 

C++
#include <iostream>
using namespace std;
 
int main() {
 
    unsigned int x = 1;
    signed int a = 1;
    cout<<"Signed Result "<< ~a <<endl ;
    cout<<"Unsigned Result "<< ~x ;
    return 0;
}
// This code is contributed by sathiyamoorthics19
C
Output
Signed Result -2
Unsigned Result 4294967294
Time Complexity: O(1)

Auxiliary Space: O(1)

Bits manipulation (Important tactics)
Bitwise Hacks for Competitive Programming
Bit Tricks for Competitive Programming 
 
Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
429
Next
Python Bitwise Operators
Related Articles
1.
Total pairs in an array such that the bitwise AND, bitwise OR and bitwise XOR of LSB is 1
2.
Calculate Bitwise OR of two integers from their given Bitwise AND and Bitwise XOR values
3.
Maximize count of pairs whose Bitwise AND exceeds Bitwise XOR by replacing such pairs with their Bitwise AND
4.
Operators in C | Set 2 (Relational and Logical Operators)
5.
Bitwise Right Shift Operators in Java
6.
Russian Peasant (Multiply two numbers using bitwise operators)
7.
Check if a number is multiple of 9 using bitwise operators
8.
What are the differences between bitwise and logical AND operators in C/C++?
9.
Case conversion (Lower to Upper and Vice Versa) of a string using BitWise operators in C/C++
10.
Toggle case of a string using Bitwise Operators
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
Shubham Dhiman 1
prakash_
AmanRaj1608
VijaySingh8
shireenfatima12
mayunitp
shivanisinghss2110
sathiyamoorthics19
harendrakumar123
yaraalsham86
mitalibhola94
shromworld
akashish__
Article Tags :
Bitwise-XOR
C-Operators
cpp-operator
Bit Magic
C Language
C++
Practice Tags :
CPP
Bit Magic
cpp-operator
Improve Article
Report Issue