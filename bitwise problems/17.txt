Check for Integer Overflow

Difficulty Level : Easy
Last Updated : 16 Aug, 2022
Read
Discuss(60+)
Courses
Practice
Video
Write a “C” function, int addOvf(int* result, int a, int b) If there is no overflow, the function places the resultant = sum a+b in “result” and returns 0. Otherwise it returns -1. The solution of casting to long and adding to find detecting the overflow is not allowed.
Method 1 
There can be overflow only if signs of two numbers are same, and sign of sum is opposite to the signs of numbers. 
 

1)  Calculate sum
2)  If both numbers are positive and sum is negative then return -1
     Else 
        If both numbers are negative and sum is positive then return -1
        Else return 0
 

C++
#include <bits/stdc++.h>
using namespace std;
 
/* Takes pointer to result and two numbers as
    arguments. If there is no overflow, the function
    places the resultant = sum a+b in “result” and
    returns 0, otherwise it returns -1 */
int addOvf(int* result, int a, int b)
{
    *result = a + b;
    if(a > 0 && b > 0 && *result < 0)
        return -1;
    if(a < 0 && b < 0 && *result > 0)
        return -1;
    return 0;
}
 
// Driver code
int main()
{
    int *res = new int[(sizeof(int))];
    int x = 2147483640;
    int y = 10;
 
    cout<<addOvf(res, x, y);
 
    cout<<"\n"<<*res;
    return 0;
}
 
// This code is contributed by rathbhupendra
C
Java
C#
Javascript
Output: 
-1
-2147483646
 

Time Complexity: O(1) 
Space Complexity: O(1)
Method 2 
Thanks to Himanshu Aggarwal for adding this method. This method doesn’t modify *result if there us an overflow. 
 


C++
#include <bits/stdc++.h>
using namespace std;
 
int addOvf(int* result, int a, int b)
{ 
    if (a >= 0 && b >= 0 && (a > INT_MAX - b)) {
        return -1;
    }
 
    else if (a < 0 && b < 0 && (a < INT_MIN - b)) {
        return -1;
    }
    else {
        *result = a + b;
        return 0;
    }
}
 
int main()
{
    int a, b;
    int* res;
    a = INT_MAX;
    b = 8192;
 
    cout << addOvf(res, a, b);
 
    return 0;
}
 
// This code is contributed by Sonu Kumar Pandit
C
Output: 
-1
0
 

Time Complexity: O(1) 
Space Complexity: O(1) 
 

Please write comments if you find any bug in above codes/algorithms, or find other ways to solve the same problem
 



Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
19
Previous
Find the Number Occurring Odd Number of Times
Next
Little and Big Endian Mystery
Related Articles
1.
Cyclic shifts of integer N by another integer m
2.
Compute the integer absolute value (abs) without branching
3.
Multiply a given Integer with 3.5
4.
How to swap two bits in a given integer?
5.
Next greater integer having one more number of set bits
6.
Previous smaller integer having one less number of set bits
7.
Find One's Complement of an Integer
8.
Count set bits in an integer using Lookup Table
9.
Minimum numbers needed to express every integer below N as a sum
10.
Find closest integer with the same weight
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
rathbhupendra
sonukmrpndt
sanjoy_62
code_hunt
Article Tags :
integer-overflow
Bit Magic
Practice Tags :
Bit Magic
Improve Article
Report Issue