Check if binary representation of a number is palindrome

Difficulty Level : Easy
Last Updated : 27 Jan, 2023
Read
Discuss(100+)
Courses
Practice
Video
Given an integer ‘x’, write a C function that returns true if binary representation of x is palindrome else return false.
For example a numbers with binary representation as 10..01 is palindrome and number with binary representation as 10..00 is not palindrome.
The idea is similar to checking a string is palindrome or not. We start from leftmost and rightmost bits and compare bits one by one. If we find a mismatch, then return false. 

Recommended Problem
Palindrome numbers
Mathematical
Algorithms
Amazon
Microsoft
+1 more
Solve Problem
Submission count: 9.9K
Method#1:  We follow the following logic to check binary of number is Palindrome or not:
Find number of bits in x using sizeof() operator. 
Initialize left and right positions as 1 and n respectively. 
Do following while left ‘l’ is smaller than right ‘r’. 
If bit at position ‘l’ is not same as bit at position ‘r’, then return false. 
Increment ‘l’ and decrement ‘r’, i.e., do l++ and r–-. 
 If we reach here, it means we didn’t find a mismatching bit.
To find the bit at a given position, we can use an idea similar to this post. The expression “x & (1 << (k-1))” gives us non-zero value if bit at k’th position from right is set and gives a zero value if if k’th bit is not set.
Following is the implementation of the above algorithm 

C++
Java
Python3
# python 3 Program to Check if binary representation
# of a number is palindrome
import sys
# This function returns true if k'th bit in x
# is set (or 1). For example if x (0010) is 2
# and k is 2, then it returns true
def isKthBitSet(x, k):
    if ((x & (1 << (k - 1))) !=0):
        return True
    else:
        return False
 
# This function returns true if binary
# representation of x is palindrome.
# For example (1000...001) is palindrome
def isPalindrome(x):
    l = 1 # Initialize left position
    r = 2 * 8 # initialize right position
 
    # One by one compare bits
    while (l < r):
        if (isKthBitSet(x, l) != isKthBitSet(x, r)):
            return False
        l += 1
        r -= 1
     
    return True
 
# Driver Code
if __name__ =='__main__':
    x = 1 << 15 + 1 << 16
    print(int(isPalindrome(x)))
    x = 1 << 31 + 1
    print(int(isPalindrome(x)))
 
# This code is contributed by
# Surendra_Gangwar
C#
PHP
Javascript
Output
1
1
Time Complexity: O(x)
Auxiliary Space: O(1)

Method#2: Using reverse() function: 

When user inputs an integer, it is passed to method which will evaluate the result. 
Actual logic inside the method focuses on following: 
It first convert the integer to binary form of integer in string format. 
It reverse the string using reverse method. 
It is palindrome if both the string is equal else not. 
Below is the implementation of the above approach: 

C++
Java
Python
def bin(n):
    ans="";
    while n > 0:
        ans = (str(n&1)) + ans;
        n >>= 1;
    return ans;
 
def checkPalindrome(x):
    s1 = bin(x)
    s2 = s1[::-1]
    return 1 if s1 == s2 else 0
 
# Some test cases....
x = 9; 
print(checkPalindrome(x)) #  output 1
 
x = 10
print(checkPalindrome(x)) # output 0
C#
Javascript
Output


1
0
Time Complexity: O(log(x))
Auxiliary Space: O(X)

Method 3: Using builtin method bitset<>

Convert the given number into its binary form.
Check if it’s palindrome or not.
Below is the implementation of the above approach:

C++
Java
Python3
# Python program to check if binary representation
# of a number is palindrome
import math
 
def isPalindrome(N):
    # Converting N into binary representation
    s = bin(N)[2:] 
    s = s[s.index('1'):]   
    # Checking if it is palindrome or not
    i = 0;
    j = len(s) - 1;
    while (i < j):
        if (s[i] != s[j]):
            return 0;
        i+=1;
        j-=1;
    return 1;
 
# Driver code
x = 16;
print(isPalindrome(x));
x = 17;
print(isPalindrome(x));
Javascript
Output
0
1
Time Complexity: O(k), where k is the number of bits in the given number X
Auxiliary Space: O(k)

This article is contributed by Saurabh Gupta. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.





Like
13
Previous
Check if actual binary representation of a number is palindrome
Next
Swap two nibbles in a byte
Related Articles
1.
Check if actual binary representation of a number is palindrome
2.
Find the n-th number whose binary representation is a palindrome
3.
Check if the binary representation of a number has equal number of 0s and 1s in blocks
4.
Check if binary representation of a given number and its complement are anagram
5.
Check if given number contains only “01” and “10” as substring in its binary representation
6.
Find the occurrence of the given binary pattern in the binary representation of the array elements
7.
Number of leading zeros in binary representation of a given number
8.
Count number of trailing zeros in Binary representation of a number using Bitset
9.
Check if all the set bits of the binary representation of N are at least K places away
10.
Check if decimal representation of Binary String is divisible by 9 or not
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
jit_t
SURENDRA_GANGWAR
ankthon
divyesh072019
simranarora5sos
subhammahato348
satyam00so
phasing17
surinderdawra388
sayanc170
hkdass001
mitalibhola94
poojaagrawal2
Article Tags :
Amazon
binary-representation
Microsoft
Bit Magic
Mathematical
Practice Tags :
Amazon
Microsoft
Bit Magic
Mathematical
Improve Article
Report Issue