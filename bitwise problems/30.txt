Euclid’s Algorithm when % and / operations are costly

Difficulty Level : Medium
Last Updated : 01 Jul, 2022
Read
Discuss
Courses
Practice
Video
Euclid’s algorithm is used to find GCD of two numbers. 
There are mainly two versions of algorithm. 
Version 1 (Using subtraction) 
 

C
Java
Python3
# Recursive function to return gcd of a and b
def gcd(a, b):
    if (a == b):
        return a
 
    return gcd(a-b, b) if (a > b) else gcd(a, b-a)
 
  # This code is contributed by subham348.
C#
Javascript
Time Complexity: O(max(a, b))

Auxiliary Space: O(1)

Version 2 (Using modulo operator) 
 

C
Java
C#
Javascript
Python3
# Python3 Function to return gcd of a and b
def gcd(a, b):
 
    if (a == 0):
        return b
 
    return gcd(b % a, a)
 
# This code is contributed by phasing17
Time Complexity: O(log(max(a, b)))

Auxiliary Space: O(1)

Which of the above two is more efficient? 
Version 1 can take linear time to find the GCD, consider the situation when one of the given numbers is much bigger than the other. Version 2 is obviously more efficient as there are less recursive calls and takes logarithmic time.
Consider a situation where modulo operator is not allowed, can we optimize version 1 to work faster?
Below are some important observations. The idea is to use bitwise operators. We can find x/2 using x>>1. We can check whether x is odd or even using x&1.
gcd(a, b) = 2*gcd(a/2, b/2) if both a and b are even. 
gcd(a, b) = gcd(a/2, b) if a is even and b is odd. 
gcd(a, b) = gcd(a, b/2) if a is odd and b is even.
Below is C++ implementation.
 



C
// Efficient C++ program when % and / are not allowed
int gcd(int a, int b)
{
    // Base cases
    if (b == 0 || a == b) return a;
    if (a == 0) return b;
 
    // If both a and b are even, divide both a
    // and b by 2.  And multiply the result with 2
    if ( (a & 1) == 0 && (b & 1) == 0 )
       return gcd(a>>1, b>>1) << 1;
 
    // If a is even and b is odd, divide a by 2
    if ( (a & 1) == 0 && (b & 1) != 0 )
       return gcd(a>>1, b);
 
    // If a is odd and b is even, divide b by 2
    if ( (a & 1) != 0 && (b & 1) == 0 )
       return gcd(a, b>>1);
 
    // If both are odd, then apply normal subtraction
    // algorithm.  Note that odd-odd case always
    // converts odd-even case after one recursion
    return (a > b)? gcd(a-b, b): gcd(a, b-a);
}
Java
C#
Javascript
Time Complexity: O(log(max(a, b)))

Auxiliary Space: O(1)

This article is compiled by Shivam Agrawal. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above
 

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
2
Previous
How to sort an array of dates in C/C++?
Next
Java Program for Dijkstra's Algorithm with Path Printing
Related Articles
1.
Introduction to Divide and Conquer Algorithm - Data Structure and Algorithm Tutorials
2.
Difference between Greedy Algorithm and Divide and Conquer Algorithm
3.
Edge Relaxation Property for Dijkstra’s Algorithm and Bellman Ford's Algorithm
4.
Karatsuba algorithm for fast multiplication using Divide and Conquer algorithm
5.
Introduction to Greedy Algorithm - Data Structures and Algorithm Tutorials
6.
Z algorithm (Linear time pattern searching Algorithm)
7.
Algorithm Library | C++ Magicians STL Algorithm
8.
Minimum operations required to Sort the Array using following operations
9.
Search in a Row-wise and Column-wise Sorted 2D Array using Divide and Conquer algorithm
10.
Comparison among Greedy, Divide and Conquer and Dynamic Programming algorithm
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
subham348
code_hunt
ranjanrohit840
phasing17
Article Tags :
Bit Magic
DSA
Mathematical
Practice Tags :
Bit Magic
Mathematical
Improve Article
Report Issue