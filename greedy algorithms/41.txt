Greedy Algorithm to find Minimum number of Coins

Difficulty Level : Easy
Last Updated : 28 Nov, 2022
Read
Discuss(40+)
Courses
Practice
Video
Given a value of V Rs and an infinite supply of each of the denominations {1, 2, 5, 10, 20, 50, 100, 500, 1000} valued coins/notes, The task is to find the minimum number of coins and/or notes needed to make the change?

Examples:  

Input: V = 70
Output: 2
Explanation: We need a 50 Rs note and a 20 Rs note.

Input: V = 121
Output: 3
Explanation: We need a 100 Rs note, a 20 Rs note, and a 1 Rs coin.

Recommended Problem
Minimum number of Coins
Dynamic Programming
Greedy
+1 more
Visa
Solve Problem
Submission count: 54K
Approach: 

The intuition would be to take coins with greater value first. This can reduce the total number of coins needed. Start from the largest possible denomination and keep adding denominations while the remaining value is greater than 0. 

Follow the steps below to implement the idea: 



Sort the array of coins in decreasing order.
Initialize ans vector as empty.
Find the largest denomination that is smaller than remaining amount and while it is smaller than the remaining amount:
Add found denomination to ans. Subtract value of found denomination from amount.
If amount becomes 0, then print ans.
Below is the implementation of above approach.

C++
C
Java
Python3
# Python3 program to find minimum
# number of denominations
 
def findMin(V):
     
    # All denominations of Indian Currency
    deno = [1, 2, 5, 10, 20, 50,
            100, 500, 1000]
    n = len(deno)
     
    # Initialize Result
    ans = []
 
    # Traverse through all denomination
    i = n - 1
    while(i >= 0):
         
        # Find denominations
        while (V >= deno[i]):
            V -= deno[i]
            ans.append(deno[i])
 
        i -= 1
 
    # Print result
    for i in range(len(ans)):
        print(ans[i], end = " ")
 
# Driver Code
if __name__ == '__main__':
    n = 93
    print("Following is minimal number",
          "of change for", n, ": ", end = "")
    findMin(n)
     
# This code is contributed by
# Surendra_Gangwar
C#
Javascript
Output
Following is minimal number of change for 93: 50 20 20 2 1 
Time Complexity: O(V).
Auxiliary Space: O(V).

Note: The above approach may not work for all denominations. 

For example, it doesn’t work for denominations {9, 6, 5, 1} and V = 11. The above approach would print 9, 1 and 1. But we can use 2 denominations 5 and 6. 

For general input, below dynamic programming approach can be used: Find minimum number of coins that make a given value
 

Thanks to Utkarsh for providing the above solution here.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.

Minimum number of Coins using Ladder If-Else approach:
In this approach, we will simply iterate through the greater to smaller coins until the n is greater to that coin and decrement that value from n afterward using ladder if-else and will push back that coin value in the vector.

Follow the steps below to implement the idea: 

Declare a vector that store the coins.
 while n is greater than 0 iterate through greater to smaller coins:
if n is greater than equal to 2000 than push 2000 into the vector and decrement its value from n.
else if n is greater than equal to 500 than push 500 into the vector and decrement its value from n.
And so on till the last coin using ladder if else.
 return the vector/array
C++
// C++ program to find minimum
// number of coins
#include <bits/stdc++.h>
using namespace std;
 
vector<int> findMin(int n)
{
    // initialize vector to store the coins
    vector<int> v;
    // iterate till n>0 and check condition according to the
    // greatest coin possible
    while (n > 0) {
        if (n >= 2000) {
            v.push_back(2000);
            n -= 2000;
        }
        else if (n >= 500) {
            v.push_back(500);
            n -= 500;
        }
        else if (n >= 200) {
            v.push_back(200);
            n -= 200;
        }
        else if (n >= 100) {
            v.push_back(100);
            n -= 100;
        }
        else if (n >= 50) {
            v.push_back(50);
            n -= 50;
        }
        else if (n >= 20) {
            v.push_back(20);
            n -= 20;
        }
        else if (n >= 10) {
            v.push_back(10);
            n -= 10;
        }
        else if (n >= 5) {
            v.push_back(5);
            n -= 5;
        }
        else if (n >= 2) {
            v.push_back(2);
            n -= 2;
        }
        else if (n >= 1) {
            v.push_back(1);
            n -= 1;
        }
    }
    // return the ans that stores in the vector
    return v;
}
 
// Driver Code
int main()
{
    int v = 93;
    cout << "Following is minimal"
         << " number of change for " << v << ": ";
 
    // Function Call
    vector<int> vec = findMin(v);
    // print the vector
    for (auto it : vec)
        cout << it << " ";
    return 0;
}
// this code is contributed by Prateek Kumar Singh
Output
Following is minimal number of change for 93: 50 20 20 2 1 
Time Complexity: O(N) that is equal to the amount v.
Auxiliary Space: O(1) that is optimized 





Like
97
Previous
Find minimum number of coins that make a given value
Next
Greedy Approximate Algorithm for K Centers Problem
Related Articles
1.
Minimum cost for acquiring all coins with k extra coins allowed with every coin
2.
Check if two piles of coins can be emptied by repeatedly removing 2 coins from a pile and 1 coin from the other
3.
Difference between Greedy Algorithm and Divide and Conquer Algorithm
4.
Introduction to Greedy Algorithm - Data Structures and Algorithm Tutorials
5.
Minimum number of subsequences required to convert one string to another using Greedy Algorithm
6.
Kruskal’s Minimum Spanning Tree Algorithm | Greedy Algo-2
7.
Dijkstra’s Algorithm for Adjacency List Representation | Greedy Algo-8
8.
Graph Coloring | Set 2 (Greedy Algorithm)
9.
Greedy Algorithm for Egyptian Fraction
10.
Greedy Approximate Algorithm for K Centers Problem
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
SURENDRA_GANGWAR
MunishBhardwaj
29AjayKumar
bidibaaz123
reddy_bhargava
GauravRajput1
aakashsaini19992014
rag2127
aashutoshparoha
pkrsingh025
Article Tags :
dp-coin-change
Greedy
Practice Tags :
Greedy