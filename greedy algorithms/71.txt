Find the Largest Cube formed by Deleting minimum Digits from a number

Difficulty Level : Hard
Last Updated : 25 May, 2021
Read
Discuss
Courses
Practice
Video
Given a number n, the task is to find the largest perfect cube that can be formed by deleting minimum digits(possibly 0) from the number. 
X is called a perfect cube if X = Y3 for some Y.
Examples: 
 

Input : 4125
Output : 125
Explanation
125 = 53. We can form 125 by deleting digit 4 from 4125

Input : 876
Output :8
Explanation
8 = 23. We can form 8 by deleting digits 7 and 6 from 876
 

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
We can generate cubes of all numbers till from 1 to N1/3 (We donâ€™t consider 0 as 0 is not considered as a perfect cube). We iterate the cubes from largest to the smallest. 
Now if we look at the number n given to us, then we know that this number contains only log(n) + 1 digits, thus we can efficiently approach the problem if we treat this number n as a string hereafter. 
While iterating on the perfect cubes, we check if the perfect cube is a subsequence of the number n when its represented as a string.If this is the case then the deletions required for changing the number n to the current perfect cube is: 
 

No of deleted digits = No of digits in number n - 
                       Number of digits in current 
                                      perfect cube
Since we want the largest cube number we traverse the array of preprocessed cubes in reverse order. 
 

C++
Java
Python3
# Python3 code to implement maximum perfect
# cube formed after deleting minimum digits
import math as mt
 
# Returns vector of Pre Processed
# perfect cubes
def preProcess(n):
 
    preProcessedCubes = list()
    for i in range(1, mt.ceil(n**(1. / 3.))):
        iThCube = i**3
         
        # convert the cube to string and
        # push into preProcessedCubes vector
        cubeString = str(iThCube)
        preProcessedCubes.append(cubeString)
         
    return preProcessedCubes
 
# Utility function for findLargestCube().
# Returns the Largest cube number that
# can be formed
def findLargestCubeUtil(num,preProcessedCubes):
     
    # reverse the preProcessed cubes so
    # that we have the largest cube in
    # the beginning of the vector
    preProcessedCubes = preProcessedCubes[::-1]
 
    totalCubes = len(preProcessedCubes)
 
    # iterate over all cubes
    for i in range(totalCubes):
        currCube = preProcessedCubes[i]
 
        digitsInCube = len(currCube)
        index = 0
        digitsInNumber = len(num)
        for j in range(digitsInNumber):
             
            # check if the current digit of the cube
            # matches with that of the number num
            if (num[j] == currCube[index]):
                index += 1
             
            if (digitsInCube == index):            
                return currCube        
     
    # if control reaches here, the its
    # not possible to form a perfect cube
    return "Not Possible"
 
# wrapper for findLargestCubeUtil()
def findLargestCube(n):
 
    # pre process perfect cubes
    preProcessedCubes = preProcess(n)
 
    num = str(n)
 
    ans = findLargestCubeUtil(num, preProcessedCubes)
 
    print("Largest Cube that can be formed from",
                                    n, "is", ans)
 
# Driver Code
n = 4125
findLargestCube(n)
 
n = 876
findLargestCube(n)
     
# This code is contributed
# by mohit kumar 29
C#
PHP
Javascript
Output: 
Largest Cube that can be formed from 4125 is 125
Largest Cube that can be formed from 876 is 8
 

Time Complexity of the above algorithm is O(N1/3log(N) log(N) is due to the fact that the number of digits in N are Log(N) + 1.
 





Like
3
Previous
Minimum edges to reverse to make path from a source to a destination
Next
Rearrange a string so that all same characters become d distance away
Related Articles
1.
Number formed by deleting digits such that sum of the digits becomes even and the number odd
2.
Count of unique prime numbers formed by deleting digits of given number
3.
Count of index pairs (i, j) such that string after deleting ith character is equal to string after deleting jth character
4.
Percentage increase in volume of the cube if a side of cube is increased by a given percentage
5.
Find the largest number that can be formed by changing at most K digits
6.
Find the Largest number with given number of digits and sum of digits
7.
Check if number formed by joining two Numbers is Perfect Cube
8.
Largest number divisible by 50 that can be formed from a given set of N digits consisting of 0s and 7s only
9.
Find the largest after deleting the given elements
10.
Find the k largest numbers after deleting the given elements
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
sirjan13
@sirjan13
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
mohit kumar 29
29AjayKumar
Rajput-Ji
Mithun Kumar
unknown2108
Article Tags :
maths-cube
Competitive Programming
Greedy
Mathematical
Technical Scripter
Practice Tags :
Greedy
Mathematical