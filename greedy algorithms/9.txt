Water Connection Problem

Difficulty Level : Hard
Last Updated : 29 Sep, 2022
Read
Discuss
Courses
Practice
Video
Every house in the colony has at most one pipe going into it and at most one pipe going out of it. Tanks and taps are to be installed in a manner such that every house with one outgoing pipe but no incoming pipe gets a tank installed on its roof and every house with only an incoming pipe and no outgoing pipe gets a tap.

Given two integers n and p denoting the number of houses and the number of pipes. The connections of pipe among the houses contain three input values: a_i, b_i, d_i denoting the pipe of diameter d_i from house a_i to house b_i, find out the efficient solution for the network. 

The output will contain the number of pairs of tanks and taps t installed in first line and the next t lines contain three integers: house number of tank, house number of tap and the minimum diameter of pipe between them.

Examples: 


Input:  4 2
        1 2 60
        3 4 50
Output: 2
        1 2 60
        3 4 50
Explanation:
Connected components are: 1->2 and 3->4
Therefore, our answer is 2 followed by 1 2 60 and 3 4 50.

Input: 9 6
       7 4 98
       5 9 72
       4 6 10
       2 8 22
       9 7 17
       3 1 66
Output: 3
        2 8 22
        3 1 66
        5 6 10
Explanation:
Connected components are 3->1, 5->9->7->4->6 and 2->8. 
Therefore, our answer is 3 followed by 2 8 22, 3 1 66, 5 6 10

Recommended Problem
Water Connection Problem
Greedy
DFS
+3 more
Solve Problem
Submission count: 14.7K
Approach: 



Perform DFS from appropriate houses to find all different connected components. The number of different connected components is our answer t. 
The next t lines of the output are the beginning of the connected component, end of the connected component and the minimum diameter from the start to the end of the connected component in each line. 
Since, tanks can be installed only on the houses having outgoing pipe and no incoming pipe, therefore these are appropriate houses to start DFS from i.e. perform DFS from such unvisited houses.
Below is the implementation of above approach:

C++
Java
Python3
# Python3 program to find efficient
# solution for the network
 
# number of houses and number
# of pipes
n = 0
p = 0
 
# Array rd stores the
# ending vertex of pipe
rd = [0]*1100
 
# Array wd stores the value
# of diameters between two pipes
wt = [0]*1100
 
# Array cd stores the
# starting end of pipe
cd = [0]*1100
 
# List a, b, c are used
# to store the final output
a = []
b = []
c = []
 
ans = 0
 
def dfs(w):
    global ans
    if (cd[w] == 0):
        return w
    if (wt[w] < ans):
        ans = wt[w]
    return dfs(cd[w])
 
# Function performing calculations.
def solve(arr):
    global ans
    i = 0
    while (i < p):
        q = arr[i][0]
        h = arr[i][1]
        t = arr[i][2]
         
        cd[q] = h
        wt[q] = t
        rd[h] = q
        i += 1
    a = []
    b = []
    c = []
     
    '''If a pipe has no ending vertex
    but has starting vertex i.e is
    an outgoing pipe then we need
    to start DFS with this vertex.'''
    for j in range(1, n + 1):
        if (rd[j] == 0 and cd[j]):
             
            ans = 1000000000
            w = dfs(j)
             
            # We put the details of component
            # in final output array
            a.append(j)
            b.append(w)
            c.append(ans)
    print(len(a))
    for j in range(len(a)):
        print(a[j], b[j], c[j])
 
# Driver function
n = 9
p = 6
 
arr = [[7, 4, 98], [5, 9, 72], [4, 6, 10 ],
        [2, 8, 22 ], [9, 7, 17], [3, 1, 66]]
 
solve(arr)
 
# This code is contributed by shubhamsingh10
C#
Javascript
Output
3
2 8 22
3 1 66
5 6 10
Time Complexity: O(N) where N is the number of houses.

Auxiliary Space: O(N) because extra space for vector a,b, and c have been used





Like
51
Previous
Huffman Coding | Greedy Algo-3
Next
Policemen catch thieves
Related Articles
1.
Water Jug problem using BFS
2.
Water drop problem
3.
Implementing Water Supply Problem using Breadth First Search
4.
Count of nodes with maximum connection in an undirected graph
5.
Container with Most Water
6.
Minimum number of Water to Land conversion to make two islands connected in a Grid
7.
Maximize count of empty water bottles from N filled bottles
8.
Maximum litres of water that can be bought with N Rupees
9.
Trapping Rain Water in a Matrix
10.
Count of operation required to water all the plants
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
HGaur
@HGaur
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
andrew1234
R0SHANRK_1995
29AjayKumar
SHUBHAMSINGH10
avanitrachhadiya2155
nnr223442
GaurishGangwar
RishabhPrabhu
hardikkoriintern
prabaljhs
himanshiyadav7011
Article Tags :
DFS
Competitive Programming
Graph
Greedy
Practice Tags :
DFS
Graph
Greedy