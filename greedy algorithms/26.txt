Program for Worst Fit algorithm in Memory Management

Difficulty Level : Medium
Last Updated : 17 Oct, 2022
Read
Discuss
Courses
Practice
Video
Prerequisite : Partition allocation methods
Worst Fit allocates a process to the partition which is largest sufficient among the freely available partitions available in the main memory. If a large process comes at a later stage, then memory will not have space to accommodate it.

Example: 

Input : blockSize[]   = {100, 500, 200, 300, 600};
        processSize[] = {212, 417, 112, 426};
Output:
Process No.    Process Size    Block no.
   1        212        5
   2        417        2
   3        112        5
   4        426        Not Allocated
 

first-fit


 

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Implementation:
1- Input memory blocks and processes with sizes.
2- Initialize all memory blocks as free.
3- Start by picking each process and find the
   maximum block size that can be assigned to
   current process i.e., find max(bockSize[1], 
   blockSize[2],.....blockSize[n]) > 
   processSize[current], if found then assign 
   it to the current process.
5- If not then leave that process and keep checking
   the further processes.
Below is implementation of above steps. 

C++
Java
Python3
# Python3 implementation of worst - Fit algorithm
 
# Function to allocate memory to blocks as
# per worst fit algorithm
def worstFit(blockSize, m, processSize, n):
     
    # Stores block id of the block
    # allocated to a process
     
    # Initially no block is assigned
    # to any process
    allocation = [-1] * n
     
    # pick each process and find suitable blocks
    # according to its size ad assign to it
    for i in range(n):
         
        # Find the best fit block for
        # current process
        wstIdx = -1
        for j in range(m):
            if blockSize[j] >= processSize[i]:
                if wstIdx == -1:
                    wstIdx = j
                elif blockSize[wstIdx] < blockSize[j]:
                    wstIdx = j
 
        # If we could find a block for
        # current process
        if wstIdx != -1:
             
            # allocate block j to p[i] process
            allocation[i] = wstIdx
 
            # Reduce available memory in this block.
            blockSize[wstIdx] -= processSize[i]
 
    print("Process No. Process Size Block no.")
    for i in range(n):
        print(i + 1, "         ",
              processSize[i], end = "     ")
        if allocation[i] != -1:
            print(allocation[i] + 1)
        else:
            print("Not Allocated")
 
# Driver code
if __name__ == '__main__':
    blockSize = [100, 500, 200, 300, 600]
    processSize = [212, 417, 112, 426]
    m = len(blockSize)
    n = len(processSize)
 
    worstFit(blockSize, m, processSize, n)
 
# This code is contributed by PranchalK
C#
Javascript
Output


Process No.    Process Size    Block no.
   1        212        5
   2        417        2
   3        112        5
   4        426        Not Allocated
Time Complexity: O(N*M)  where N is processSize length and M is blockSize length. 
Auxiliary Space: O(N)
 
This article is contributed by Sahil Chhabra (akku). If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
 





Like
6
Previous
Program for Best Fit algorithm in Memory Management
Next
Program for First Fit algorithm in Memory Management
Related Articles
1.
Program for Next Fit algorithm in Memory Management
2.
Program for Best Fit algorithm in Memory Management using Linked List
3.
Program for First Fit algorithm in Memory Management
4.
Program for Best Fit algorithm in Memory Management
5.
First Fit algorithm in Memory Management using Linked List
6.
Worst-Fit Allocation in Operating Systems
7.
Minimum number of bins required to place N items ( Using Best Fit algorithm )
8.
Introduction to memory and memory units
9.
Why Linked List is implemented on Heap memory rather than Stack memory?
10.
Partition Allocation Methods in Memory Management
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
devansh bhatia 1
PranchalKatiyar
29AjayKumar
rag2127
surinderdawra388
clirimfurriku
prabaljhs
Article Tags :
memory-management
Greedy
Practice Tags :
Greedy