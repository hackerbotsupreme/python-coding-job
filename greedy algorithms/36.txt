in Packing Problem (Minimize number of used Bins)

Difficulty Level : Medium
Last Updated : 12 Jan, 2023
Read
Discuss(20+)
Courses
Practice
Video
Given n items of different weights and bins each of capacity c, assign each item to a bin such that number of total used bins is minimized. It may be assumed that all items have weights smaller than bin capacity.
Example: 

Input:  weight[]       = {4, 8, 1, 4, 2, 1}
        Bin Capacity c = 10
Output: 2
We need minimum 2 bins to accommodate all items
First bin contains {4, 4, 2} and second bin {8, 1, 1}

Input:  weight[]       = {9, 8, 2, 2, 5, 4}
        Bin Capacity c = 10
Output: 4
We need minimum 4 bins to accommodate all items.  

Input:  weight[]       = {2, 5, 4, 7, 1, 3, 8}; 
        Bin Capacity c = 10
Output: 3
Lower Bound 
We can always find a lower bound on minimum number of bins required. The lower bound can be given as : 

   Min no. of bins  >=  Ceil ((Total Weight) / (Bin Capacity))
In the above examples, lower bound for first example is “ceil(4 + 8 + 1 + 4 + 2 + 1)/10” = 2 and lower bound in second example is “ceil(9 + 8 + 2 + 2 + 5 + 4)/10” = 3. 
This problem is a NP Hard problem and finding an exact minimum number of bins takes exponential time. Following are approximate algorithms for this problem.
 Applications 

Loading of containers like trucks.
Placing data on multiple disks.
Job scheduling.
Packing advertisements in fixed length radio/TV station breaks.
Storing a large collection of music onto tapes/CD’s, etc.
Online Algorithms 
These algorithms are for Bin Packing problems where items arrive one at a time (in unknown order), each must be put in a bin, before considering the next item.
1. Next Fit: 
When processing next item, check if it fits in the same bin as the last item. Use a new bin only if it does not. 
Below is C++ implementation for this algorithm.  

C++
Java
Python3
# Python3 implementation for above approach
def nextfit(weight, c):
    res = 0
    rem = c
    for _ in range(len(weight)):
        if rem >= weight[_]:
            rem = rem - weight[_]
        else:
            res += 1
            rem = c - weight[_]
    return res
 
# Driver Code
weight = [2, 5, 4, 7, 1, 3, 8]
c = 10
 
print("Number of bins required in Next Fit :",
                           nextfit(weight, c))
 
# This code is contributed by code_freak
C#
Javascript
Output: 

Number of bins required in Next Fit : 4
Next Fit is a simple algorithm. It requires only O(n) time and O(1) extra space to process n items. 
Next Fit is 2 approximate, i.e., the number of bins used by this algorithm is bounded by twice of optimal. Consider any two adjacent bins. The sum of items in these two bins must be > c; otherwise, NextFit would have put all the items of second bin into the first. The same holds for all other bins. Thus, at most half the space is wasted, and so Next Fit uses at most 2M bins if M is optimal.
2. First Fit: 
When processing the next item, scan the previous bins in order and place the item in the first bin that fits. Start a new bin only if it does not fit in any of the existing bins. 

C++
Java
Python3
# Python program to find number of bins required using
# First Fit algorithm.
 
# Returns number of bins required using first fit
# online algorithm
def firstFit(weight, n, c):
     
    # Initialize result (Count of bins)
    res = 0
     
    # Create an array to store remaining space in bins
    # there can be at most n bins
    bin_rem = [0]*n
     
    # Place items one by one
    for i in range(n):
       
        # Find the first bin that can accommodate
        # weight[i]
        j = 0
        while( j < res):
            if (bin_rem[j] >= weight[i]):
                bin_rem[j] = bin_rem[j] - weight[i]
                break
            j+=1
             
        # If no bin could accommodate weight[i]
        if (j == res):
            bin_rem[res] = c - weight[i]
            res= res+1
    return res
     
# Driver program
weight = [2, 5, 4, 7, 1, 3, 8]
c = 10
n = len(weight)
print("Number of bins required in First Fit : ",firstFit(weight, n, c))
 
# This code is contributed by shubhamsingh10
C#
Javascript
Output: 



Number of bins required in First Fit : 4
The above implementation of First Fit requires O(n2) time, but First Fit can be implemented in O(n Log n) time using Self-Balancing Binary Search Trees.
If M is the optimal number of bins, then First Fit never uses more than 1.7M bins. So First-Fit is better than Next Fit in terms of upper bound on number of bins.
3. Best Fit: 
The idea is to places the next item in the *tightest* spot. That is, put it in the bin so that the smallest empty space is left. 

C++
Java
Python3
# Python3 program to find number
# of bins required using
# First Fit algorithm.
 
# Returns number of bins required
# using first fit
# online algorithm
def firstFit(weight, n, c):
     
    # Initialize result (Count of bins)
    res = 0;
 
    # Create an array to store
    # remaining space in bins
    # there can be at most n bins
    bin_rem = [0]*n;
 
    # Place items one by one
    for i in range(n):
         
        # Find the first bin that
        # can accommodate
        # weight[i]
        j = 0;
         
        # Initialize minimum space
        # left and index
        # of best bin
        min = c + 1;
        bi = 0;
 
        for j in range(res):
            if (bin_rem[j] >= weight[i] and bin_rem[j] -
                                       weight[i] < min):
                bi = j;
                min = bin_rem[j] - weight[i];
             
        # If no bin could accommodate weight[i],
        # create a new bin
        if (min == c + 1):
            bin_rem[res] = c - weight[i];
            res += 1;
        else: # Assign the item to best bin
            bin_rem[bi] -= weight[i];
    return res;
 
# Driver code
if __name__ == '__main__':
    weight = [ 2, 5, 4, 7, 1, 3, 8 ];
    c = 10;
    n = len(weight);
    print("Number of bins required in First Fit : ",
                             firstFit(weight, n, c));
     
# This code is contributed by Rajput-Ji
C#
Javascript
Output: 

Number of bins required in Best Fit : 4
Best Fit can also be implemented in O(n Log n) time using Self-Balancing Binary Search Trees.
If M is the optimal number of bins, then Best Fit never uses more than 1.7M bins. So Best Fit is same as First Fit and better than Next Fit in terms of upper bound on number of bins.
4. Worst Fit: 
The idea is to places the next item in the least tight spot to even out the bins. That is, put it in the bin so that most empty space is left.  

C++
Java
Python3
# Python program to find number of bins required using# Worst fit algorithm.# Returns number of bins required using worst fit# online algorithm
def worstFit( weight, n, c):
 
 
    # Initialize result (Count of bins)
    res = 0
 
    # Create an array to store remaining space in bins
    # there can be at most n bins
    bin_rem = [0 for i in range(n)]
     
    # Place items one by one
    for i in range(n):
     
        # Find the best bin that ca\n accommodate
        # weight[i]
 
        # Initialize maximum space left and index
        # of worst bin
        mx,wi = -1,0
 
        for j in range(res):
            if (bin_rem[j] >= weight[i] and bin_rem[j] - weight[i] > mx):
                wi = j
                mx = bin_rem[j] - weight[i]
             
 
        # If no bin could accommodate weight[i],
        # create a new bin
        if (mx == -1):
            bin_rem[res] = c - weight[i]
            res += 1
         
        else: # Assign the item to best bin
            bin_rem[wi] -= weight[i]
     
    return res
 
# Driver program
weight = [ 2, 5, 4, 7, 1, 3, 8 ]
c = 10
n = len(weight)
print(f"Number of bins required in Worst Fit : {worstFit(weight, n, c)}")
 
# This code is contributed by shinjanpatra
C#
Javascript
Output: 

Number of bins required in Worst Fit : 4
Worst Fit can also be implemented in O(n Log n) time using Self-Balancing Binary Search Trees.
If M is the optimal number of bins, then Best Fit never uses more than 2M-2 bins. So Worst Fit is same as Next Fit in terms of upper bound on number of bins.
 
Offline Algorithms 
In the offline version, we have all items upfront. Unfortunately offline version is also NP Complete, but we have a better approximate algorithm for it. First Fit Decreasing uses at most (4M + 1)/3 bins if the optimal is M.
4. First Fit Decreasing: 
A trouble with online algorithms is that packing large items is difficult, especially if they occur late in the sequence. We can circumvent this by *sorting* the input sequence, and placing the large items first. With sorting, we get First Fit Decreasing and Best Fit Decreasing, as offline analogues of online First Fit and Best Fit. 

C++
Java
Python3
# Python program to find number of bins required using
# First Fit Decreasing algorithm.
 
# Returns number of bins required using first fit
# online algorithm
def firstFit(weight, n, c):
     
    # Initialize result (Count of bins)
    res = 0
     
    # Create an array to store remaining space in bins
    # there can be at most n bins
    bin_rem = [0]*n
     
    # Place items one by one
    for i in range(n):
       
        # Find the first bin that can accommodate
        # weight[i]
        j = 0
        while( j < res):
            if (bin_rem[j] >= weight[i]):
                bin_rem[j] = bin_rem[j] - weight[i]
                break
            j+=1
             
        # If no bin could accommodate weight[i]
        if (j == res):
            bin_rem[res] = c - weight[i]
            res= res+1
    return res
     
# Returns number of bins required using first fit
# decreasing offline algorithm
def firstFitDec(weight, n, c):
 
    # First sort all weights in decreasing order
    weight.sort(reverse = True)
 
    # Now call first fit for sorted items
    return firstFit(weight, n, c)
 
# Driver program
weight = [ 2, 5, 4, 7, 1, 3, 8 ]
c = 10
n = len(weight)
print("Number of bins required in First Fit Decreasing : ",str(firstFitDec(weight, n, c)))
 
# This code is contributed by shinjanpatra
C#
Javascript
Output:

Number of bins required in First Fit Decreasing : 3
First Fit decreasing produces the best result for the sample input because items are sorted first.
First Fit Decreasing can also be implemented in O(n Log n) time using Self-Balancing Binary Search Trees.
This article is contributed by Dheeraj Gupta. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above 

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
11
Previous
Greedy Approximate Algorithm for Set Cover Problem
Next
Graph Coloring | Set 2 (Greedy Algorithm)
Related Articles
1.
Minimum number of bins required to place N items ( Using Best Fit algorithm )
2.
Find optimal weights which can be used to weigh all the weights in the range [1, X]
3.
Implementation of Least Recently Used (LRU) page replacement algorithm using Counters
4.
Check if given coins can be used to pay a value of S
5.
Check if characters of a given string can be used to form any N equal strings
6.
Program for Least Recently Used (LRU) Page Replacement algorithm
7.
Minimize the number formed by replacing adjacent pair of digits with their sum
8.
Minimize product of first 2^K–1 Natural Numbers by swapping bits for any pair any number of times
9.
Minimize number of Knapsacks with total weigh W required to store Array containing elements greater than W/3
10.
Minimize the number of operations to make all the elements equal with given conditions
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
29AjayKumar
GiulioMecocci
code_freak
Rajput-Ji
gromperen
firoz_kumar
target_2
GauravRajput1
sooda367
clintra
adnanirshad158
patel2127
shivanisinghss2110
SHUBHAMSINGH10
shinjanpatra
ishankhandelwals
Article Tags :
Greedy
Practice Tags :
Greedy