Fractional Knapsack Problem

Difficulty Level : Medium
Last Updated : 20 Jan, 2023
Read
Discuss(60+)
Courses
Practice
Video
Given the weights and values of N items, in the form of {value, weight} put these items in a knapsack of capacity W to get the maximum total value in the knapsack. In Fractional Knapsack, we can break items for maximizing the total value of the knapsack

Note: In the 0-1 Knapsack problem, we are not allowed to break items. We either take the whole item or don’t take it. 

Input: arr[] = {{60, 10}, {100, 20}, {120, 30}}, W = 50
Output: 240 
Explanation: By taking items of weight 10 and 20 kg and 2/3 fraction of 30 kg. 
Hence total price will be 60+100+(2/3)(120) = 240

Input:  arr[] = {{500, 30}}, W = 10
Output: 166.667

Recommended Problem
Fractional Knapsack
Greedy
Algorithms
Microsoft
Solve Problem
Submission count: 1.3L
Naive Approach: To solve the problem follow the below idea:

Try all possible subsets with all different fractions.

Fractional Knapsack Problem using Greedy algorithm:
An efficient solution is to use the Greedy approach. 

The basic idea of the greedy approach is to calculate the ratio value/weight for each item and sort the item on the basis of this ratio. Then take the item with the highest ratio and add them until we can’t add the next item as a whole and at the end add the next item as much as we can. Which will always be the optimal solution to this problem.

Follow the given steps to solve the problem using the above approach:

Calculate the ratio(value/weight) for each item.
Sort all the items in decreasing order of the ratio.
Initialize res =0, curr_cap = given_cap.
Do the following for every item “i” in the sorted order:
If the weight of the current item is less than or equal to the remaining capacity then add the value of that item into the result
Else add the current item as much as we can and break out of the loop.
Return res.
Below is the implementation of the above approach:

C++
Java
Python3
# Structure for an item which stores weight and
# corresponding value of Item
class Item:
    def __init__(self, value, weight):
        self.value = value
        self.weight = weight
 
# Main greedy function to solve problem
def fractionalKnapsack(W, arr):
 
    # Sorting Item on basis of ratio
    arr.sort(key=lambda x: (x.value/x.weight), reverse=True)   
 
    # Result(value in Knapsack)
    finalvalue = 0.0
 
    # Looping through all Items
    for item in arr:
 
        # If adding Item won't overflow,
        # add it completely
        if item.weight <= W:
            W -= item.weight
            finalvalue += item.value
 
        # If we can't add current Item,
        # add fractional part of it
        else:
            finalvalue += item.value * W / item.weight
            break
     
    # Returning final value
    return finalvalue
 
 
# Driver Code
if __name__ == "__main__":
 
    W = 50
    arr = [Item(60, 10), Item(100, 20), Item(120, 30)]
 
    # Function call
    max_val = fractionalKnapsack(W, arr)
    print(max_val)
C#
Javascript
Output
Maximum value we can obtain = 240
Time Complexity: O(N * log N)
Auxiliary Space: O(N)

This article is contributed by Utkarsh Trivedi.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.



Like
Previous
Approximate solution for Travelling Salesman Problem using MST
Next
Split n into maximum composite numbers
Related Articles
1.
C++ Program for the Fractional Knapsack Problem
2.
Unbounded Fractional Knapsack
3.
Fractional Knapsack Queries
4.
0-1 Knapsack Problem | DP-10
5.
A Space Optimized DP solution for 0-1 Knapsack Problem
6.
Java Program 0-1 Knapsack Problem
7.
Python Program for 0-1 Knapsack Problem
8.
0/1 Knapsack Problem to print all possible solutions
9.
Extended Knapsack Problem
10.
Find the fractional (or n/k - th) node in linked list
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
Prashant Mishra 9
vibhu4agarwal
jigyansu
salonikyal
firoz_kumar
mahmd3adel
adnanirshad158
rajatsingh0805
geeky01adarsh
sanskar84
sweetyty
priyanshshishodia
janardansthox
bhakatsnehasish8
lokeshpotta20
Article Tags :
Fraction
knapsack
Greedy
Practice Tags :
Greedy
Report Issue