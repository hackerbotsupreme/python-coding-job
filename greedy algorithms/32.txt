Prim’s Minimum Spanning Tree (MST) | Greedy Algo-5

Difficulty Level : Medium
Last Updated : 10 Jan, 2023
Read
Discuss(50+)
Courses
Practice
Video
Introduction to Prim’s algorithm:
We have discussed Kruskal’s algorithm for Minimum Spanning Tree. Like Kruskal’s algorithm, Prim’s algorithm is also a Greedy algorithm. Prim’s algorithm always starts with a single node and it moves through several adjacent nodes, in order to explore all of the connected edges along the way.

It starts with an empty spanning tree. The idea is to maintain two sets of vertices. The first set contains the vertices already included in the MST, and the other set contains the vertices not yet included. At every step, it considers all the edges that connect the two sets and picks the minimum weight edge from these edges. After picking the edge, it moves the other endpoint of the edge to the set containing MST. 

A group of edges that connects two sets of vertices in a graph is called cut in graph theory. So, at every step of Prim’s algorithm, find a cut (of two sets, one contains the vertices already included in MST and the other contains the rest of the vertices), pick the minimum weight edge from the cut, and include this vertex to MST Set (the set that contains already included vertices).

How does Prim’s Algorithm Work? 
The idea behind Prim’s algorithm is simple, a spanning tree means all vertices must be connected. So the two disjoint subsets (discussed above) of vertices must be connected to make a Spanning Tree. And they must be connected with the minimum weight edge to make it a Minimum Spanning Tree.

Follow the given steps to find MST using Prim’s Algorithm:
Create a set mstSet that keeps track of vertices already included in MST. 
Assign a key value to all vertices in the input graph. Initialize all key values as INFINITE. Assign the key value as 0 for the first vertex so that it is picked first. 
While mstSet doesn’t include all vertices 
Pick a vertex u which is not there in mstSet and has a minimum key value. 
Include u in the mstSet. 
Update the key value of all adjacent vertices of u. To update the key values, iterate through all adjacent vertices. For every adjacent vertex v, if the weight of edge u-v is less than the previous key value of v, update the key value as the weight of u-v
The idea of using key values is to pick the minimum weight edge from the cut. The key values are used only for vertices that are not yet included in MST, the key value for these vertices indicates the minimum weight edges connecting them to the set of vertices included in MST. 

Pseudo Code
PRIM(G, w, r):
 for each u in G:
   u.key = INF
   u.p = NIL
 r.key = 0
 Q = G
 while Q is not empty:
   u = EXTRACT-MIN(Q)
   for each v in Adj[u]:
     if v in Q and w(u, v) < v.key:
       v.p = u
       v.key = w(u, v)
 return G
where ‘G’ is the graph, w is the weight function, r is the root node, ‘Q’ is a priority queue (heap) containing all the nodes in the graph, ‘Adj[u]’ is the list of neighbors of node ‘u’, and ‘EXTRACT-MIN(Q)‘ extracts the node with the minimum key value from the priority queue ‘Q’.

Let us understand with the following illustration:
 

Input graph:

Prim’s Minimum Spanning Tree

Step 1: The set mstSet is initially empty and keys assigned to vertices are {0, INF, INF, INF, INF, INF, INF, INF} where INF indicates infinite. Now pick the vertex with the minimum key value. The vertex 0 is picked, include it in mstSet. So mstSet becomes {0}. After including it to mstSet, update key values of adjacent vertices. Adjacent vertices of 0 are 1 and 7. The key values of 1 and 7 are updated as 4 and 8. Following subgraph shows vertices and their key values, only the vertices with finite key values are shown. The vertices included in MST are shown in green color.

Prim’s Minimum Spanning Tree Algorithm 1

Step 2: Pick the vertex with minimum key value and which is not already included in the MST (not in mstSET). The vertex 1 is picked and added to mstSet. So mstSet now becomes {0, 1}. Update the key values of adjacent vertices of 1. The key value of vertex 2 becomes 8.
 

Prim’s Minimum Spanning Tree Algorithm 2

Step 3: Pick the vertex with minimum key value and which is not already included in the MST (not in mstSET). We can either pick vertex 7 or vertex 2, let vertex 7 is picked. So mstSet now becomes {0, 1, 7}. Update the key values of adjacent vertices of 7. The key value of vertex 6 and 8 becomes finite (1 and 7 respectively). 
 

Prim’s Minimum Spanning Tree Algorithm 3

Step 4: Pick the vertex with minimum key value and not already included in MST (not in mstSET). Vertex 6 is picked. So mstSet now becomes {0, 1, 7, 6}. Update the key values of adjacent vertices of 6. The key value of vertex 5 and 8 are updated.
 

Prim’s Minimum Spanning Tree Algorithm 4

Step 5: Repeat the above steps until mstSet includes all vertices of given graph. Finally, we get the following graph.
 

Prim’s Minimum Spanning Tree Algorithm 5

Recommended Problem
Minimum Spanning Tree
Greedy
Graph
+2 more
Flipkart
Amazon
+3 more
Solve Problem
Submission count: 68.8K
Coding implementation of Prim’s algorithm:
Use a boolean array mstSet[] to represent the set of vertices included in MST. If a value mstSet[v] is true, then vertex v is included in MST, otherwise not. Array key[] is used to store key values of all vertices. Another array parent[] to store indexes of parent nodes in MST. The parent array is the output array, which is used to show the constructed MST. 

C++
C
Java
Python3
# A Python3 program for Prim's Minimum Spanning Tree (MST) algorithm.
# The program is for adjacency matrix representation of the graph
  
import sys  # Library for INT_MAX
  
  
class Graph():
  
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)]
                      for row in range(vertices)]
  
    # A utility function to print the constructed MST stored in parent[]
    def printMST(self, parent):
        print("Edge \tWeight")
        for i in range(1, self.V):
            print(parent[i], "-", i, "\t", self.graph[i][parent[i]])
  
    # A utility function to find the vertex with
    # minimum distance value, from the set of vertices
    # not yet included in shortest path tree
    def minKey(self, key, mstSet):
  
        # Initialize min value
        min = sys.maxsize
  
        for v in range(self.V):
            if key[v] < min and mstSet[v] == False:
                min = key[v]
                min_index = v
  
        return min_index
  
    # Function to construct and print MST for a graph
    # represented using adjacency matrix representation
    def primMST(self):
  
        # Key values used to pick minimum weight edge in cut
        key = [sys.maxsize] * self.V
        parent = [None] * self.V  # Array to store constructed MST
        # Make key 0 so that this vertex is picked as first vertex
        key[0] = 0
        mstSet = [False] * self.V
  
        parent[0] = -1  # First node is always the root of
  
        for cout in range(self.V):
  
            # Pick the minimum distance vertex from
            # the set of vertices not yet processed.
            # u is always equal to src in first iteration
            u = self.minKey(key, mstSet)
  
            # Put the minimum distance vertex in
            # the shortest path tree
            mstSet[u] = True
  
            # Update dist value of the adjacent vertices
            # of the picked vertex only if the current
            # distance is greater than new distance and
            # the vertex in not in the shortest path tree
            for v in range(self.V):
  
                # graph[u][v] is non zero only for adjacent vertices of m
                # mstSet[v] is false for vertices not yet included in MST
                # Update the key only if graph[u][v] is smaller than key[v]
                if self.graph[u][v] > 0 and mstSet[v] == False and key[v] > self.graph[u][v]:
                    key[v] = self.graph[u][v]
                    parent[v] = u
  
        self.printMST(parent)
  
  
# Driver's code
if __name__ == '__main__':
    g = Graph(5)
    g.graph = [[0, 2, 0, 6, 0],
               [2, 0, 3, 8, 5],
               [0, 3, 0, 0, 7],
               [6, 8, 0, 0, 9],
               [0, 5, 7, 9, 0]]
  
    g.primMST()
  
    # Contributed by Divyanshu Mehta
C#
Javascript
Output
Edge     Weight
0 - 1     2 
1 - 2     3 
0 - 3     6 
1 - 4     5 
Time Complexity: O(V2), If the input graph is represented using an adjacency list, then the time complexity of Prim’s algorithm can be reduced to O(E log V) with the help of a binary heap.  In this implementation, we are always considering the spanning tree to start from the root of the graph
Auxiliary Space: O(V)

 Please see Prim’s MST for Adjacency List Representation for more details. 
 Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.



Like
Previous
Kruskal’s Minimum Spanning Tree Algorithm | Greedy Algo-2
Next
Boruvka's algorithm | Greedy Algo-9
Related Articles
1.
Properties of Minimum Spanning Tree (MST)
2.
Prim’s MST for Adjacency List Representation | Greedy Algo-6
3.
Kruskal’s Minimum Spanning Tree Algorithm | Greedy Algo-2
4.
Approximate solution for Travelling Salesman Problem using MST
5.
Difference between Prim's and Kruskal's algorithm for MST
6.
Why Prim’s and Kruskal's MST algorithm fails for Directed Graph?
7.
Find weight of MST in a complete graph with edge-weights either 0 or 1
8.
Boruvka's algorithm for Minimum Spanning Tree
9.
Kruskal's Minimum Spanning Tree using STL in C++
10.
Minimum Product Spanning Tree
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
vt_m
AnkurKarmakar
udkumar249
GlitchFinder
rathbhupendra
POuryaKordi
user_9781
arorakashish0911
dharanendralv23
simmytarika5
varun_b_g
AliZaidi1
amartyaghoshgfg
kumargaurav97520
geeky01adarsh
janardansthox
kushalpareek
Article Tags :
Amazon
Cisco
Minimum Spanning Tree
Prim's Algorithm.MST
Samsung
Graph
Greedy
Practice Tags :
Amazon
Cisco
Samsung
Graph
Greedy