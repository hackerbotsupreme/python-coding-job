Program for Best Fit algorithm in Memory Management

Difficulty Level : Easy
Last Updated : 27 Jan, 2023
Read
Discuss
Courses
Practice
Video
Prerequisite : Partition allocation methods
Best fit allocates the process to a partition which is the smallest sufficient partition among the free available partitions. 
Example: 
 

Input : blockSize[]   = {100, 500, 200, 300, 600};
        processSize[] = {212, 417, 112, 426};
Output:
Process No.    Process Size    Block no.
 1        212        4
 2        417        2
 3        112        3
 4        426        5
 

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
 

first-fit

 

Implementation:
1- Input memory blocks and processes with sizes.
2- Initialize all memory blocks as free.
3- Start by picking each process and find the
   minimum block size that can be assigned to
   current process i.e., find min(bockSize[1], 
   blockSize[2],.....blockSize[n]) > 
   processSize[current], if found then assign 
   it to the current process.
5- If not then leave that process and keep checking
   the further processes.
Below is implementation.
 

C/C++



 
C++
Java
Python3
# Python3 implementation of Best - Fit algorithm
 
# Function to allocate memory to blocks
# as per Best fit algorithm
def bestFit(blockSize, m, processSize, n):
     
    # Stores block id of the block
    # allocated to a process
    allocation = [-1] * n
     
    # pick each process and find suitable
    # blocks according to its size ad
    # assign to it
    for i in range(n):
         
        # Find the best fit block for
        # current process
        bestIdx = -1
        for j in range(m):
            if blockSize[j] >= processSize[i]:
                if bestIdx == -1:
                    bestIdx = j
                elif blockSize[bestIdx] > blockSize[j]:
                    bestIdx = j
 
        # If we could find a block for
        # current process
        if bestIdx != -1:
             
            # allocate block j to p[i] process
            allocation[i] = bestIdx
 
            # Reduce available memory in this block.
            blockSize[bestIdx] -= processSize[i]
 
    print("Process No. Process Size     Block no.")
    for i in range(n):
        print(i + 1, "         ", processSize[i],
                                end = "         ")
        if allocation[i] != -1:
            print(allocation[i] + 1)
        else:
            print("Not Allocated")
 
# Driver code
if __name__ == '__main__':
    blockSize = [100, 500, 200, 300, 600]
    processSize = [212, 417, 112, 426]
    m = len(blockSize)
    n = len(processSize)
 
    bestFit(blockSize, m, processSize, n)
     
# This code is contributed by PranchalK
C#
Output: 
 

Process No.    Process Size    Block no.
 1        212        4
 2        417        2
 3        112        3
 4        426        5
The time complexity of Best-Fit algorithm is O(n2) as it requires two loops to process the memory blocks and processes. The outer loop is used to iterate through the processes and the inner loop is used to iterate through the blocks.

The space complexity of Best-Fit algorithm is O(n) as it requires an array of size n to store the block allocation for each process.

Is Best-Fit really best? 
Although, best fit minimizes the wastage space, it consumes a lot of processor time for searching the block which is close to required size. Also, Best-fit may perform poorer than other algorithms in some cases. For example, see below exercise.
Example: Consider the requests from processes in given order 300K, 25K, 125K and 50K. Let there be two blocks of memory available of size 150K followed by a block size 350K.
Best Fit: 
300K is allocated from block of size 350K. 50 is left in the block. 
25K is allocated from the remaining 50K block. 25K is left in the block. 
125K is allocated from 150 K block. 25K is left in this block also. 
50K canâ€™t be allocated even if there is 25K + 25K space available.
First Fit: 
300K request is allocated from 350K block, 50K is left out. 
25K is be allocated from 150K block, 125K is left out. 
Then 125K and 50K are allocated to remaining left out partitions. 
So, first fit can handle requests.
 

This article is contributed by Sahil Chhabra. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
 





Like
7
Next
Program for Worst Fit algorithm in Memory Management
Related Articles
1.
Program for Best Fit algorithm in Memory Management using Linked List
2.
Program for Worst Fit algorithm in Memory Management
3.
Program for Next Fit algorithm in Memory Management
4.
Program for First Fit algorithm in Memory Management
5.
First Fit algorithm in Memory Management using Linked List
6.
Minimum number of bins required to place N items ( Using Best Fit algorithm )
7.
Best-Fit Allocation in Operating System
8.
Introduction to memory and memory units
9.
Why Linked List is implemented on Heap memory rather than Stack memory?
10.
Partition Allocation Methods in Memory Management