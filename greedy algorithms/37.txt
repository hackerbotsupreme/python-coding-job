
Graph Coloring | Set 2 (Greedy Algorithm)

Difficulty Level : Medium
Last Updated : 13 Jul, 2022
Read
Discuss(60+)
Courses
Practice
Video
We introduced graph coloring and applications in previous post. As discussed in the previous post, graph coloring is widely used. Unfortunately, there is no efficient algorithm available for coloring a graph with minimum number of colors as the problem is a known NP Complete problem. There are approximate algorithms to solve the problem though. Following is the basic Greedy Algorithm to assign colors. It doesn’t guarantee to use minimum colors, but it guarantees an upper bound on the number of colors. The basic algorithm never uses more than d+1 colors where d is the maximum degree of a vertex in the given graph.

Basic Greedy Coloring Algorithm: 

1. Color first vertex with first color. 
2. Do following for remaining V-1 vertices. 
….. a) Consider the currently picked vertex and color it with the 
lowest numbered color that has not been used on any previously 
colored vertices adjacent to it. If all previously used colors 
appear on vertices adjacent to v, assign a new color to it.

Following is the implementation of the above Greedy Algorithm.

C++
Java
Python3
# Python3 program to implement greedy 
# algorithm for graph coloring 
  
def addEdge(adj, v, w):
      
    adj[v].append(w)
      
    # Note: the graph is undirected
    adj[w].append(v)  
    return adj
  
# Assigns colors (starting from 0) to all
# vertices and prints the assignment of colors
def greedyColoring(adj, V):
      
    result = [-1] * V
  
    # Assign the first color to first vertex
    result[0] = 0;
  
  
    # A temporary array to store the available colors. 
    # True value of available[cr] would mean that the
    # color cr is assigned to one of its adjacent vertices
    available = [False] * V
  
    # Assign colors to remaining V-1 vertices
    for u in range(1, V):
          
        # Process all adjacent vertices and
        # flag their colors as unavailable
        for i in adj[u]:
            if (result[i] != -1):
                available[result[i]] = True
  
        # Find the first available color
        cr = 0
        while cr < V:
            if (available[cr] == False):
                break
              
            cr += 1
              
        # Assign the found color
        result[u] = cr 
  
        # Reset the values back to false 
        # for the next iteration
        for i in adj[u]:
            if (result[i] != -1):
                available[result[i]] = False
  
    # Print the result
    for u in range(V):
        print("Vertex", u, " --->  Color", result[u])
  
# Driver Code
if __name__ == '__main__':
      
    g1 = [[] for i in range(5)]
    g1 = addEdge(g1, 0, 1)
    g1 = addEdge(g1, 0, 2)
    g1 = addEdge(g1, 1, 2)
    g1 = addEdge(g1, 1, 3)
    g1 = addEdge(g1, 2, 3)
    g1 = addEdge(g1, 3, 4)
    print("Coloring of graph 1 ")
    greedyColoring(g1, 5)
  
    g2 = [[] for i in range(5)]
    g2 = addEdge(g2, 0, 1)
    g2 = addEdge(g2, 0, 2)
    g2 = addEdge(g2, 1, 2)
    g2 = addEdge(g2, 1, 4)
    g2 = addEdge(g2, 2, 4)
    g2 = addEdge(g2, 4, 3)
    print("\nColoring of graph 2")
    greedyColoring(g2, 5)
  
# This code is contributed by mohit kumar 29
Javascript
Output: 

Coloring of graph 1
Vertex 0 --->  Color 0
Vertex 1 --->  Color 1
Vertex 2 --->  Color 2
Vertex 3 --->  Color 0
Vertex 4 --->  Color 1

Coloring of graph 2
Vertex 0 --->  Color 0
Vertex 1 --->  Color 1
Vertex 2 --->  Color 2
Vertex 3 --->  Color 0
Vertex 4 --->  Color 3
Time Complexity: O(V^2 + E) in worst case.

Analysis of Basic Algorithm 
The above algorithm doesn’t always use minimum number of colors. Also, the number of colors used sometime depend on the order in which vertices are processed. For example, consider the following two graphs. Note that in graph on right side, vertices 3 and 4 are swapped. If we consider the vertices 0, 1, 2, 3, 4 in left graph, we can color the graph using 3 colors. But if we consider the vertices 0, 1, 2, 3, 4 in right graph, we need 4 colors. 
 



graph_coloring2

So the order in which the vertices are picked is important. Many people have suggested different ways to find an ordering that work better than the basic algorithm on average. The most common is Welsh–Powell Algorithm which considers vertices in descending order of degrees. 

How does the basic algorithm guarantee an upper bound of d+1? 
Here d is the maximum degree in the given graph. Since d is maximum degree, a vertex cannot be attached to more than d vertices. When we color a vertex, at most d colors could have already been used by its adjacent. To color this vertex, we need to pick the smallest numbered color that is not used by the adjacent vertices. If colors are numbered like 1, 2, …., then the value of such smallest number must be between 1 to d+1 (Note that d numbers are already picked by adjacent vertices). 
This can also be proved using induction. See this video lecture for proof. 
We will soon be discussing some interesting facts about chromatic number and graph coloring.
 

Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above
 

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
40
Previous
Bin Packing Problem (Minimize number of used Bins)
Next
Greedy Approximate Algorithm for K Centers Problem
Related Articles
1.
Java Program to Find Independent Sets in a Graph using Graph Coloring
2.
Java Program to Find Independent Sets in a Graph By Graph Coloring
3.
DSatur Algorithm for Graph Coloring
4.
Graph Coloring | Set 1 (Introduction and Applications)
5.
Difference between Greedy Algorithm and Divide and Conquer Algorithm
6.
Introduction to Greedy Algorithm - Data Structures and Algorithm Tutorials
7.
Coloring a Cycle Graph
8.
Mathematics | Planar Graphs and Graph Coloring
9.
Edge Coloring of a Graph
10.
Java Program to Use Color Interchange Method to Perform Vertex Coloring of Graph
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
ChamanJhinga
mohit kumar 29
avanitrachhadiya2155
kapoorsagar226
Article Tags :
Graph Coloring
Graph
Greedy
Practice Tags :
Graph
Greedy