Find minimum time to finish all jobs with given constraints

Difficulty Level : Hard
Last Updated : 10 May, 2021
Read
Discuss(40)
Courses
Practice
Video
Given an array of jobs with different time requirements. There are K identical assignees available and we are also given how much time an assignee takes to do one unit of the job. Find the minimum time to finish all jobs with following constraints.
 

An assignee can be assigned only contiguous jobs. For example, an assignee cannot be assigned jobs 1 and 3, but not 2.
Two assignees cannot share (or co-assigned) a job, i.e., a job cannot be partially assigned to one assignee and partially to other.
Input :

K:     Number of assignees available.
T:     Time taken by an assignee to finish one unit 
       of job
job[]: An array that represents time requirements of 
       different jobs.
Examples : 
 

Input:  k = 2, T = 5, job[] = {4, 5, 10}
Output: 50
The minimum time required to finish all the jobs is 50.
There are 2 assignees available. We get this time by 
assigning {4, 5} to first assignee and {10} to second 
assignee.

Input:  k = 4, T = 5, job[] = {10, 7, 8, 12, 6, 8}
Output: 75
We get this time by assigning {10} {7, 8} {12} and {6, 8}
We strongly recommend you to minimize your browser and try this yourself first. 
The idea is to use Binary Search. Think if we have a function (say isPossible()) that tells us if itâ€™s possible to finish all jobs within a given time and number of available assignees. We can solve this problem by doing a binary search for the answer. If the middle point of binary search is not possible, then search in second half, else search in first half. Lower bound for Binary Search for minimum time can be set as 0. The upper bound can be obtained by adding all given job times. 
Now how to implement isPossible()? This function can be implemented using Greedy Approach. Since we want to know if it is possible to finish all jobs within a given time, we traverse through all jobs and keep assigning jobs to current assignee one by one while a job can be assigned within the given time limit. When time taken by current assignee exceeds the given time, create a new assignee and start assigning jobs to it. If the number of assignees becomes more than k, then return false, else return true.
 

C++
Java
Python3
# Python program to find minimum
# time to finish all jobs with
# given number of assignees
 
# Utility function to get maximum
# element in job[0..n-1]
def getMax(arr, n):
    result = arr[0]
    for i in range(1, n):
        if arr[i] > result:
            result = arr[i]
    return result
 
# Returns true if it is possible
# to finish jobs[] within given
# time 'time'
def isPossible(time, K, job, n):
     
    # cnt is count of current
    # assignees required for jobs
    cnt = 1
 
    # time assigned to current assignee
    curr_time = 0
 
    i = 0
    while i < n:
         
        # If time assigned to current
        # assignee exceeds max, increment
        # count of assignees.
        if curr_time + job[i] > time:
            curr_time = 0
            cnt += 1
        else:
             
            # Else add time of job to current
            # time and move to next job.
            curr_time += job[i]
            i += 1
 
    # Returns true if count is smaller than k
    return cnt <= K
 
# Returns minimum time required
# to finish given array of jobs
# k --> number of assignees
# T --> Time required by every assignee to finish 1 unit
# m --> Number of jobs
def findMinTime(K, T, job, n):
     
    # Set start and end for binary search
    # end provides an upper limit on time
    end = 0
    start = 0
    for i in range(n):
        end += job[i]
 
    ans = end # Initialize answer
 
    # Find the job that takes maximum time
    job_max = getMax(job, n)
 
    # Do binary search for minimum feasible time
    while start <= end:
        mid = int((start + end) / 2)
 
        # If it is possible to finish jobs in mid time
        if mid >= job_max and isPossible(mid, K, job, n):
            ans = min(ans, mid) # Update answer
            end = mid - 1
        else:
            start = mid + 1
 
    return ans * T
 
# Driver program
if __name__ == '__main__':
    job = [10, 7, 8, 12, 6, 8]
    n = len(job)
    k = 4
    T = 5
    print(findMinTime(k, T, job, n))
     
# this code is contributed by PranchalK
C#
Javascript
Output: 

75
Thanks to Gaurav Ahirwar for suggesting above solution.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above
 

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
27
Previous
Minimum number of days required to complete the work
Next
Job Sequencing Problem using Disjoint Set
Related Articles
1.
Find minimum speed to finish all Jobs
2.
Find the time taken finish Processing of given processes
3.
Minimum time required to transport all the boxes from source to the destination under the given constraints
4.
Minimum work to be done per day to finish given tasks within D days
5.
Job Scheduling with two jobs allowed at a time
6.
Maximize jobs that can be completed under given constraint
7.
Remove minimum characters from string to split it into three substrings under given constraints
8.
Schedule jobs so that each server gets equal load
9.
Divide array into two parts with equal sum according to the given constraints
10.
Check if it is possible to form string B from A under the given constraints
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
Sam007
PranchalKatiyar
vaibhavrabadiya117
Article Tags :
Binary Search
Greedy
Practice Tags :
Binary Search
Greedy