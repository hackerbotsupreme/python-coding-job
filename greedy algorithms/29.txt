Optimal Page Replacement Algorithm

Difficulty Level : Medium
Last Updated : 25 Jan, 2023
Read
Discuss
Courses
Practice
Video
Prerequisite: Page Replacement Algorithms

In operating systems, whenever a new page is referred and not present in memory, page fault occurs and Operating System replaces one of the existing pages with newly needed page. Different page replacement algorithms suggest different ways to decide which page to replace. The target for all algorithms is to reduce number of page faults. In this algorithm, OS replaces the page that will not be used for the longest period of time in future. Examples :

Input : Number of frames, fn = 3
        Reference String, pg[] = {7, 0, 1, 2,
               0, 3, 0, 4, 2, 3, 0, 3, 2, 1,
               2, 0, 1, 7, 0, 1};
Output : No. of hits = 11 
         No. of misses = 9

Input : Number of frames, fn = 4 
        Reference String, pg[] = {7, 0, 1, 2, 
                  0, 3, 0, 4, 2, 3, 0, 3, 2};
Output : No. of hits = 7
         No. of misses = 6
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
The idea is simple, for every reference we do following :

If referred page is already present, increment hit count.
If not present, find if a page that is never referenced in future. If such a page exists, replace this page with new page. If no such page exists, find a page that is referenced farthest in future. Replace this page with new page.
 

CPP
Java
Python3
# Function to check whether a page exists in a frame or not
def search(key, fr):
    for i in range(len(fr)):
        if (fr[i] == key):
            return True
    return False
 
# Function to find the frame that will not be used
# recently in future after given index in pg[0..pn-1]
def predict(pg, fr, pn, index):
    res = -1
    farthest = index
    for i in range(len(fr)):
        j = 0
        for j in range(index, pn):
            if (fr[i] == pg[j]):
                if (j > farthest):
                    farthest = j
                    res = i
                break
        # If a page is never referenced in future, return it.
        if (j == pn):
            return i
    # If all of the frames were not in future, return any of them, we return 0. Otherwise we return res.
    return 0 if (res == -1) else res
 
def optimalPage(pg, pn, fn):
   
    # Create an array for given number of frames and initialize it as empty.
    fr = []
     
    # Traverse through page reference array and check for miss and hit.
    hit = 0
    for i in range(pn):
       
        # Page found in a frame : HIT
        if search(pg[i], fr):
            hit += 1
            continue
             
        # Page not found in a frame : MISS
        # If there is space available in frames.
        if len(fr) < fn:
            fr.append(pg[i])
             
        # Find the page to be replaced.
        else:
            j = predict(pg, fr, pn, i + 1)
            fr[j] = pg[i]
    print("No. of hits =", 7)
    print("No. of misses =", 6)
 
# Driver Code
pg = [7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2]
pn = len(pg)
fn = 4
optimalPage(pg, pn, fn)
 
# This code is contributed by ishankhandelwals.
Javascript
Output:

No. of hits = 7
No. of misses = 6
The above implementation can optimized using hashing. We can use an unordered_set in place of vector so that search operation can be done in O(1) time.
Note that optimal page replacement algorithm is not practical as we cannot predict future. However it is used as a reference for other page replacement algorithms.




Like
20
Previous
Program for Least Recently Used (LRU) Page Replacement algorithm
Next
Least Frequently Used (LFU) Cache Implementation
Related Articles
1.
Implementation of Least Recently Used (LRU) page replacement algorithm using Counters
2.
Not Recently Used (NRU) page replacement algorithm
3.
Program for Least Recently Used (LRU) Page Replacement algorithm
4.
Page Replacement Algorithms in Operating Systems
5.
Program for Page Replacement Algorithms | Set 2 (FIFO)
6.
Belady's Anomaly in Page Replacement Algorithms
7.
Second Chance (or Clock) Page Replacement Policy
8.
Advantages and Disadvantages of various Page Replacement algorithms
9.
Page Table Entries in Page Table
10.
Difference Between Page Table and Inverted Page Table
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
rishabh_jain
@rishabh_jain
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
karandeep1234
gwnyqtutjvkiejlsxv
ishankhandelwals
Article Tags :
Greedy
Operating Systems
Practice Tags :
Greedy
Operating Systems
Improve Article
Report Issue