Rearrange a string so that all same characters become d distance away

Difficulty Level : Hard
Last Updated : 26 Dec, 2022
Read
Discuss(100+)
Courses
Practice
Video
Given a string and a positive integer d. Some characters may be repeated in the given string. Rearrange characters of the given string such that the same characters become d distance away from each other. Note that there can be many possible rearrangements, the output should be one of the possible rearrangements. If no such arrangement is possible, that should also be reported. 
The expected time complexity is O(n + m Log(MAX))  Here n is the length of string, m is the count of distinct characters in a string and MAX is the maximum possible different characters.

Examples:

Input:  "abb", d = 2
Output: "bab"

Input:  "aacbbc", d = 3
Output: "abcabc"

Input: "geeksforgeeks", d = 3
Output: egkegkesfesor

Input:  "aaa",  d = 2
Output: Cannot be rearranged
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
The approach to solving this problem is to count frequencies of all characters and consider the most frequent character first and place all occurrences of it as close as possible. After the most frequent character is placed, repeat the same process for the remaining characters.

Let the given string be str and size of string be n
Traverse str, store all characters and their frequencies in a Max Heap MH(implemented using priority queue). The value of frequency decides the order in MH, i.e., the most frequent character is at the root of MH.
Make all characters of str as ‘\0’.
Do the following while MH is not empty.
Extract the Most frequent character. Let the extracted character be x and its frequency be f.
Find the first available position in str, i.e., find the first ‘\0’ in str.
Let the first position be p. Fill x at p, p+d,.. p+(f-1)d
Below is the implementation of the above algorithm. 

C++
C
Java
Python3
# Python program to rearrange a string so that all same
# characters become at least d distance away
MAX = 256
 
# A structure to store a character 'c' and its frequency 'f'
# in input string
 
 
class charFreq(object):
    def __init__(self, c, f):
        self.c = c
        self.f = f
 
# A utility function to swap two charFreq items.
 
 
def swap(x, y):
    return y, x
 
# A utility function
 
 
def toList(string):
    t = []
    for x in string:
        t.append(x)
 
    return t
 
# A utility function
 
 
def toString(l):
    return ''.join(l)
 
# A utility function to maxheapify the node freq[i] of a heap
# stored in freq[]
 
 
def maxHeapify(freq, i, heap_size):
    l = i*2 + 1
    r = i*2 + 2
    largest = i
    if l < heap_size and freq[l].f > freq[i].f:
        largest = l
    if r < heap_size and freq[r].f > freq[largest].f:
        largest = r
    if largest != i:
        freq[i], freq[largest] = swap(freq[i], freq[largest])
        maxHeapify(freq, largest, heap_size)
 
# A utility function to convert the array freq[] to a max heap
 
 
def buildHeap(freq, n):
    i = (n - 1)//2
    while i >= 0:
        maxHeapify(freq, i, n)
        i -= 1
 
# A utility function to remove the max item or root from max heap
 
 
def extractMax(freq, heap_size):
    root = freq[0]
    if heap_size > 1:
        freq[0] = freq[heap_size-1]
        maxHeapify(freq, 0, heap_size-1)
 
    return root
 
# The main function that rearranges input string 'str' such that
# two same characters become d distance away
 
 
def rearrange(string, d):
    # Find length of input string
    n = len(string)
 
    # Create an array to store all characters and their
    # frequencies in str[]
    freq = []
    for x in range(MAX):
        freq.append(charFreq(0, 0))
 
    m = 0
 
    # Traverse the input string and store frequencies of all
    # characters in freq[] array.
    for i in range(n):
        x = ord(string[i])
 
        # If this character has occurred first time, increment m
        if freq[x].c == 0:
            freq[x].c = chr(x)
            m += 1
 
        freq[x].f += 1
        string[i] = '\0'
 
    # Build a max heap of all characters
    buildHeap(freq, MAX)
 
    # Now one by one extract all distinct characters from max heap
    # and put them back in str[] with the d distance constraint
    for i in range(m):
        x = extractMax(freq, MAX-i)
 
        # Find the first available position in str[]
        p = i
        while string[p] != '\0':
            p += 1
 
        # Fill x.c at p, p+d, p+2d, .. p+(f-1)d
        for k in range(x.f):
 
            # If the index goes beyond size, then string cannot
            # be rearranged.
            if p + d*k >= n:
                print ("Cannot be rearranged")
                return
 
            string[p + d*k] = x.c
 
    return toString(string)
 
 
# Driver program
string = "aabbcc"
print (rearrange(toList(string), 3))
 
# This code is contributed by BHAVYA JAIN
C#
Javascript
Output
abcabc
Algorithmic Paradigm: Greedy Algorithm
Time Complexity: Time complexity of above implementation is O(n + mLog(MAX)). Here n is the length of str, m is the count of distinct characters in str[] and MAX is the maximum possible different characters.





Like
14
Previous
Find the Largest Cube formed by Deleting minimum Digits from a number
Next
Lexicographically largest subsequence such that every character occurs at least k times
Related Articles
1.
Rearrange a string so that all same characters become atleast d distance away
2.
Rearrange Linked List to make XOR of nodes at same distance from start and end same
3.
Rearrange characters in a sorted string such that no pair of adjacent characters are the same
4.
Rearrange characters in a String such that no two adjacent characters are same
5.
Check if frequency of all characters can become same by one removal
6.
Python Program to remove elements that are less than K difference away in a list
7.
Rearrange string such that no pair of adjacent characters are of the same type
8.
Rearrange characters in a string such that no two adjacent are same using hashing
9.
Maximise distance by rearranging all duplicates at same distance in given Array
10.
Rearrange the characters of the string such that no two adjacent characters are consecutive English alphabets
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
PKumar7
raviteja85
devjoytibarman
kumaripunam984122
hardikkoriintern
phasing17
karandeep1234
Article Tags :
Greedy
Python
Strings
Practice Tags :
Greedy
python
Strings