Minimum Swaps for Bracket Balancing

Difficulty Level : Medium
Last Updated : 12 Jan, 2023
Read
Discuss(40+)
Courses
Practice
Video
You are given a string of 2N characters consisting of N ‘[‘ brackets and N ‘]’ brackets. A string is considered balanced if it can be represented in the form S2[S1] where S1 and S2 are balanced strings. We can make an unbalanced string balanced by swapping adjacent characters. Calculate the minimum number of swaps necessary to make a string balanced.

Examples: 

Input  : []][][
Output : 2
First swap: Position 3 and 4
[][]][
Second swap: Position 5 and 6
[][][]

Input  : [[][]]
Output : 0
The string is already balanced.
Recommended Problem
Minimum Swaps for Bracket Balancing
Strings
Greedy
+2 more
Solve Problem
Submission count: 27.9K
We can solve this problem by using greedy strategies. If the first X characters form a balanced string, we can neglect these characters and continue on. If we encounter a ‘]’ before the required ‘[‘, then we must start swapping elements to balance the string.

Naive Approach 
Initialize sum = 0 where sum stores result. Go through the string maintaining a count of the number of ‘[‘ brackets encountered. Reduce this count when we encounter a ‘]’ character. If the count hits negative, then we must start balancing the string. 
Let index ‘i’ represent the position we are at. We now move forward to the next ‘[‘ at index j. Increase sum by j – i. Move the ‘[‘ at position j, to position i, and shift all other characters to the right. Set the count back to 1 and continue traversing the string. In the end, ‘sum’ will have the required value.

Time Complexity = O(N^2) 
Extra Space = O(1)

Optimized approach 
We can initially go through the string and store the positions of ‘[‘ in a vector say ‘pos‘. Initialize ‘p’ to 0. We shall use p to traverse the vector ‘pos’. Similar to the naive approach, we maintain a count of encountered ‘[‘ brackets. When we encounter a ‘[‘ we increase the count and increase ‘p’ by 1. When we encounter a ‘]’ we decrease the count. If the count ever goes negative, this means we must start swapping. The element pos[p] tells us the index of the next ‘[‘. We increase the sum by pos[p] – i, where i is the current index. We can swap the elements in the current index and pos[p] and reset the count to 0 and increment p so that it pos[p] indicates to the next ‘[‘.
Since we have converted a step that was O(N) in the naive approach, to an O(1) step, our new time complexity reduces. 

Time Complexity = O(N) 
Extra Space = O(N)

C++
Java
Python3
# Python3 Program to count
# swaps required to balance
# string
 
# Function to calculate
# swaps required
def swapCount(s):
 
    # Keep track of '['
    pos = []
 
    for i in range(len(s)):
        if(s[i] == '['):
            pos.append(i)
 
    # To count number
    # of encountered '['        
    count = 0
     
    # To track position
    # of next '[' in pos
    p = 0   
     
    # To store result
    sum = 0       
    s = list(s)
     
    for i in range(len(s)):
 
        # Increment count and
        # move p to next position
        if(s[i] == '['):
            count += 1
            p += 1
        elif(s[i] == ']'):
            count -= 1
 
        # We have encountered an
        # unbalanced part of string
        if(count < 0):
           
            # Increment sum by number
            # of swaps required
            # i.e. position of next
            # '[' - current position
            sum += pos[p] - i
            s[i], s[pos[p]] = (s[pos[p]],
                               s[i])
            p += 1
 
            # Reset count to 1
            count = 1
    return sum
 
# Driver code
s = "[]][]["
print(swapCount(s))
 
s = "[[][]]"
print(swapCount(s))
 
# This code is contributed by avanitrachhadiya2155
C#
Javascript
Output
2
0
Time Complexity: O(N) 
Auxiliary Space: O(N) 

Another Method: 
We can do without having to store the positions of ‘[‘. 

Below is the implementation :  

C++
Java
Python3
# Python3 program to count swaps required to
# balance string
def swapCount(s):
     
     
     
    # Swap stores the number of swaps 
    # required imbalance maintains the
    # number of imbalance pair
    swap = 0
    imbalance = 0;
     
    for i in s:
        if i == '[':
             
            # Decrement the imbalance
            imbalance -= 1
        else:
             
            # Increment imbalance
            imbalance += 1
             
            if imbalance > 0:
                swap += imbalance
 
    return swap
 
# Driver code
s = "[]][][";
print(swapCount(s))
 
s = "[[][]]";
print(swapCount(s))
 
# This code is contributed by Prateek Gupta and improved by Anvesh Govind Saxena
C#
Javascript
Output
2
0
Time Complexity :O(N) 
Auxiliary Space : O(1) 

This article is contributed by Aarti_Rathi and Aditya Kamath. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
 



Like
Previous
Length of Longest Balanced Subsequence
Next
Check if two expressions with brackets are same
Related Articles
1.
Check if the bracket sequence can be balanced with at most one change in the position of a bracket
2.
Maximum Pairs of Bracket Sequences which can be concatenated to form a Regular Bracket Sequence
3.
Find index of closing bracket for a given opening bracket in an expression
4.
Find numbers of balancing positions in string
5.
Minimum number of bracket reversals needed to make an expression balanced
6.
Minimum number of bracket reversals needed to make an expression balanced | Set - 2
7.
Minimum Cost required to generate a balanced Bracket Sequence
8.
Print all ways to break a string in bracket form
9.
Number of closing brackets needed to complete a regular bracket sequence
10.
Construct Binary Tree from String with bracket representation
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
JANMEJAYA DAS
shrikanth13
PrateekGupta10
sanchayang98
avanitrachhadiya2155
divyeshrabadiya07
divyesh072019
rag2127
suresh07
susmitakundugoaldanga
anveshsaxena
codewithshinchan
ansh270702
satyav6uvc
akankshag176
Article Tags :
Greedy
Strings
Practice Tags :
Greedy
Strings