Maximize array sum after K negations using Sorting

Difficulty Level : Easy
Last Updated : 10 Jan, 2023
Read
Discuss(40+)
Courses
Practice
Video
Given an array of size n and a number k. We must modify array K a number of times. Here modify array means in each operation we can replace any array element arr[i] by -arr[i]. We need to perform this operation in such a way that after K operations, the sum of the array must be maximum?

Examples : 

Input : arr[] = {-2, 0, 5, -1, 2}, K = 4
Output: 10
Explanation:
1. Replace (-2) by -(-2), array becomes {2, 0, 5, -1, 2}
2. Replace (-1) by -(-1), array becomes {2, 0, 5, 1, 2}
3. Replace (0) by -(0), array becomes {2, 0, 5, 1, 2}
4. Replace (0) by -(0), array becomes {2, 0, 5, 1, 2}

Input : arr[] = {9, 8, 8, 5}, K = 3
Output: 20

Recommended Problem
Maximize sum after K negations
Arrays
Data Structures
Solve Problem
Submission count: 52.2K
Naive approach: This problem has a very simple solution, we just have to replace the minimum element arr[i] in the array by -arr[i] for the current operation. In this way, we can make sum of the array maximum after K operations. One interesting case is, that once the minimum element becomes 0, we donâ€™t need to make any more changes. 

Implementation:

C++
C
Java
Python3
# Python3 program to maximize
# array sum after k operations.
  
# This function does k operations on array
# in a way that maximize the array sum.
# index --> stores the index of current
# minimum element for j'th operation
  
  
def maximumSum(arr, n, k):
  
    # Modify array K number of times
    for i in range(1, k + 1):
  
        min = +2147483647
        index = -1
  
        # Find minimum element in array for
        # current operation and modify it
        # i.e; arr[j] --> -arr[j]
        for j in range(n):
  
            if (arr[j] < min):
  
                min = arr[j]
                index = j
  
        # this the condition if we find 0 as
        # minimum element, so it will useless to
        # replace 0 by -(0) for remaining operations
        if (min == 0):
            break
  
        # Modify element of array
        arr[index] = -arr[index]
  
    # Calculate sum of array
    sum = 0
    for i in range(n):
        sum += arr[i]
    return sum
  
  
# Driver code
arr = [-2, 0, 5, -1, 2]
k = 4
n = len(arr)
print(maximumSum(arr, n, k))
  
# This code is contributed by Anant Agarwal.
C#
PHP
Javascript
Output


10
Time Complexity: O(k*n) 
Auxiliary Space: O(1)

Approach 2 (Using Sort):  When there is a need to negate at most k elements.

Follow the steps below to solve this problem:

Sort the given array arr.
Then for a given value of k, Iterate through the array till k remains greater than 0, If the value of the array at any index is less than 0 we will change its sign and decrement k by 1.
If we find a 0 in the array we will immediately set k equal to 0 to maximize our result.
In some cases, if we have all the values in an array greater than 0 we will change the sign of positive values, as our array is already sorted we will be changing signs of lower values present in the array which will eventually maximize our sum.
Below is the implementation of the above approach:

C++
C
Java
Python3
# Python3 program to find maximum array
# sum after at most k negations
  
  
def sol(arr, k):
  
    # Sorting given array using
    # in-built java sort function
    arr.sort()
  
    Sum = 0
    i = 0
  
    while (k > 0):
  
        # If we find a 0 in our
        # sorted array, we stop
        if (arr[i] >= 0):
            k = 0
        else:
            arr[i] = (-1) * arr[i]
            k = k - 1
  
        i += 1
  
    # Calculating sum
    for j in range(len(arr)):
        Sum += arr[j]
  
    return Sum
  
  
# Driver code
arr = [-2, 0, 5, -1, 2]
  
print(sol(arr, 4))
  
# This code is contributed by avanitrachhadiya2155
C#
Javascript
Output
10
Time Complexity: O(n*logn) 
Auxiliary Space: O(1)

Approach 3(Using Sort):
The above approach 2 is optimal when there is a need to negate at most k elements. To solve when there are exactly k negations the algorithm is given below.

Sort the array in ascending order. Initialize i = 0.
Increment i and multiply all negative elements by -1 till k becomes or a positive element is reached.
Check if the end of the array has occurred. If true then go to (n-1)th element.
If k ==0 or k is even, return the sum of all elements. Else multiply the absolute of minimum of ith or (i-1) th element by -1.
Return sum of the array.
Below is the implementation of the above approach:

C++
Java
Python3
# Python3 program for the above approach
  
# Function to calculate sum of the array
def sumArray(arr, n):
    sum = 0
      
    # Iterate from 0 to n - 1
    for i in range(n):
        sum += arr[i]
          
    return sum
  
# Function to maximize sum
def maximizeSum(arr, n, k):
      
    arr.sort()
    i = 0
    
    # Iterate from 0 to n - 1
    for i in range(n):
        if (k and arr[i] < 0):
            arr[i] *= -1
            k -= 1
            continue
          
        break
      
    if (i == n):
        i -= 1
  
    if (k == 0 or k % 2 == 0):
        return sumArray(arr, n)
  
    if (i != 0 and abs(arr[i]) >= abs(arr[i - 1])):
        i -= 1
  
    arr[i] *= -1
    return sumArray(arr, n)
  
# Driver Code
n = 5
k = 4
arr = [ -2, 0, 5, -1, 2 ]
    
# Function Call
print(maximizeSum(arr, n, k))
  
# This code is contributed by rohitsingh07052
C#
Javascript
C
Output
10
Time Complexity: O(n*logn)  
Auxiliary Space: O(1)

Maximize array sum after K negations | Set 2 

This article is contributed by Shashank Mishra ( Gullu ). If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.





Like
19
Previous
Minimum product subset of an array
Next
Maximise product of each array element with their indices by rearrangement
Related Articles
1.
Maximize array sum after K negations using Priority Queue
2.
Sort array of strings after sorting each string after removing characters whose frequencies are not a powers of 2
3.
Modify an array by sorting after reversal of bits of each array element
4.
Maximize sum of remaining elements after every removal of the array half with greater sum
5.
Find array sum using Bitwise OR after splitting given array in two halves after K circular shifts
6.
C++ Program to Find array sum using Bitwise OR after splitting given array in two halves after K circular shifts
7.
Java Program to Find array sum using Bitwise OR after splitting given array in two halves after K circular shifts
8.
Python3 Program to Find array sum using Bitwise OR after splitting given array in two halves after K circular shifts
9.
Javascript Program to Find array sum using Bitwise OR after splitting given array in two halves after K circular shifts
10.
Maximize Array sum after incrementing at most K elements followed by dividing array by X
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
nitin mittal
nidhi_biet
RitikGarg2
rutvik_56
avanitrachhadiya2155
pratham76
yashupadhyayece19
rjrachit
code_hunt
sanjoy_62
rohitsingh07052
souravghosh0416
ab2127
akashkumarsmet18
SHUBHAMSINGH10
harendrakumar123
adityakumar129
rexomkar
hardikkoriintern
Article Tags :
Arrays
Greedy
Practice Tags :
Arrays
Greedy