Lexicographically largest subsequence such that every character occurs at least k times

Difficulty Level : Medium
Last Updated : 20 Jul, 2022
Read
Discuss
Courses
Practice
Video
Given a string S and an integer K. The task is to find lexicographically largest subsequence of S, say T, such that every character in T must occur at least K times.

Examples: 

Input : S = "banana", K = 2.
Output : nn
Possible subsequence where each character exists at least 2 times are:
Check if a line touches or intersects a circle

From the above subsequences, "nn" is the lexicographically largest.
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
The idea is to solve greedily the above problem. If we want to make the subsequence lexicographically largest, we must give priority to lexicographically larger characters. ‘z’ is the largest character, let suppose z occurs fz times in S. If fz >= K, append ‘z’z k times in the string T and keep removing characters from the left of S until all the z’s are removed. Apply the strategy with ‘y’, ‘w’, ….., ‘a’. In the end, you will find the answer.

Let see an example. Suppose S = “zzwzawa” and K = 2. Start with the largest character ‘z’. Here fz = 3 >= K. So T will become “zzz” and we will remove letters from the left of S until all the z’s are removed. So now S will become “awa”. Next largest is ‘y’ but that occurs 0 times in k so we will skip it. We will skip ‘w’, ‘v’ etc also until we go to ‘a’ which occurs 2 times. Now T will become “zzzaa” and S will become a empty string. Our answer is “zzzaa”.

Below is implementation of this approach: 

C++
Java
Python3
# Python3 program to find lexicographically largest
# subsequence where every character appears at
# least k times.
 
# Find lexicographically largest subsequence of
# s[0..n-1] such that every character appears
# at least k times. The result is filled in t[]
def subsequence(s, t, n, k):
    last = 0
    cnt = 0
    new_last = 0
    size = 0
 
    string = 'zyxwvutsrqponmlkjihgfedcba'
 
    # Starting from largest character 'z' to 'a'
    for ch in string:
        cnt = 0
        for i in range(last, n):
            if s[i] == ch:
                cnt += 1
 
        # If frequency is greater than k
        if cnt >= k:
 
            # From the last point we leave
            for i in range(last, n):
 
                # check if string contain ch
                if s[i] == ch:
 
                    # If yes, append to output string
                    t[size] = ch
                    new_last = i
                    size += 1
 
            # Update the last point.
            last = new_last
 
# Driver Code
if __name__ == "__main__":
    s = ['b', 'a', 'n', 'a', 'n', 'a']
    n = len(s)
    k = 2
    t = [''] * n
    subsequence(s, t, n - 1, k)
    t = ''.join(t)
    print(t)
 
# This code is contributed by
# sanjeev2552
C#
Javascript
Output


nn
Time Complexity: O(n)
Auxiliary Space: O(n)

This article is contributed by Aarti_Rathi and Anuj Chauhan (anuj0503). If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 





Like
10
Previous
Rearrange a string so that all same characters become d distance away
Next
Smallest subset with sum greater than all other elements
Related Articles
1.
Longest subsequence where each character occurs at least k times
2.
Minimum number of characters required to be removed such that every character occurs same number of times
3.
Longest subsequence where every character appears at-least k times
4.
Find a string such that every character is lexicographically greater than its immediate next character
5.
Find number of times a string occurs as a subsequence in given string
6.
Queries to print the character that occurs the maximum number of times in a given range
7.
Longest subsequence with at least one character appearing in every string
8.
Minimum number of removals required such that no subsequence of length 2 occurs more than once
9.
Minimum number of characters required to be added to a String such that all lowercase alphabets occurs as a subsequence in increasing order
10.
Replace every character of string by character whose ASCII value is K times more than it
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
Rajput-Ji
sanjeev2552
rutvik_56
simmytarika5
adi1212
hardikkoriintern
Article Tags :
lexicographic-ordering
subsequence
Greedy
Strings
Practice Tags :
Greedy
Strings