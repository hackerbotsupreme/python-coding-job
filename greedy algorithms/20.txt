Sorting array with reverse around middle

Difficulty Level : Medium
Last Updated : 17 Aug, 2022
Read
Discuss
Courses
Practice
Video
Consider the given array arr[], we need to find if we can sort array with the given operation. The operation is 

We have to select a subarray from the given array such that the middle element(or elements (in case of even 
number of elements)) of subarray is also the middle element(or elements (in case of even number of elements)) of 
the given array. 
Then we have to reverse the selected subarray and place this reversed subarray in the array. 
We can do the above operation as many times as we want. The task is to find if we can sort array with the given operation. 
Examples:  

Input : arr[] = {1, 6, 3, 4, 5, 2, 7}
Output : Yes
We can choose sub-array[3, 4, 5] on 
reversing this we get [1, 6, 5, 4, 3, 2, 7]
again on selecting [6, 5, 4, 3, 2] and 
reversing this one we get [1, 2, 3, 4, 5, 6, 7] 
which is sorted at last thus it is possible
to sort on multiple reverse operation.

Input : arr[] = {1, 6, 3, 4, 5, 7, 2}
Output : No
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
One solution is we can rotate each element around the center, which gives two possibilities in the array i.e. the value at index ‘i’ or the value at index “length – 1 – i”. 
If array has n elements then 2^n combinations possible thus running time would be O(2^n).

Another solution can be make copy of the array and sort the copied array. Then compare each element of the sorted array with equivalent element of original array and its mirror image when pivot around center. Sorting the array takes O(n*logn) and 2n comparisons be required thus running time would be O(n*logn).

Implementation:

C++
Java
Python 3
# Python 3 program to find
# possibility to sort by
# multiple subarray reverse
# operation
 
def ifPossible(arr, n):
 
    cp = [0] * n
 
    # making the copy of
    # the original array
    cp = arr
 
    # sorting the copied array
    cp.sort()
 
    for i in range(0 , n) :
  
        # checking mirror image of
        # elements of sorted copy
        # array and equivalent element
        # of original array
        if (not(arr[i] == cp[i]) and not
               (arr[n - 1 - i] == cp[i])):
            return False
 
    return True
 
# Driver code
arr = [1, 7, 6, 4, 5, 3, 2, 8]
n = len(arr)
if (ifPossible(arr, n)):
    print("Yes")
else:
    print("No")
 
# This code is contributed by Smitha
C#
PHP
Javascript
Output
Yes




Like
15
Previous
Making elements of two arrays same with minimum increment/decrement
Next
Lexicographically smallest array after at-most K consecutive swaps
Related Articles
1.
Reverse middle words of a string
2.
Reverse Middle X Characters
3.
Three way partitioning of an array around a given range
4.
Count of unique pairs (i, j) in an array such that sum of A[i] and reverse of A[j] is equal to sum of reverse of A[i] and A[j]
5.
Find Equal (or Middle) Point in a sorted array with duplicates
6.
Maximum possible middle element of the array after deleting exactly k elements
7.
Check if sequence of removed middle elements from an array is sorted or not
8.
Find if 0 is removed more or 1 by deleting middle element if consecutive triplet is divisible by 3 in given Binary Array
9.
Reduce the array by replacing 1st and middle element with sum and difference alternatively
10.
Rearrange the Array by shifting middle elements to start and end alternatively
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
akash1295
@akash1295
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
Sam007
Smitha Dinesh Semwal
Shivi_Aggarwal
learner100101
avijitmondal1998
varshagumber28
hardikkoriintern
Article Tags :
Reverse
Arrays
Greedy
Practice Tags :
Arrays
Greedy
Reverse