AKS Primality Test

Difficulty Level : Medium
Last Updated : 01 Sep, 2022
Read
Discuss
Courses
Practice
Video
There are several primality test available to check whether the number is prime or not like Fermat’s Theorem, Miller-Rabin Primality test and alot more. But problem with all of them is that they all are probabilistic in nature. So, here comes one another method i.e AKS primality test (Agrawal–Kayal–Saxena primality test) and it is deterministically correct for any general number.
Features of AKS primality test : 
1. The AKS algorithm can be used to verify the primality of any general number given. 
2. The maximum running time of the algorithm can be expressed as a polynomial over the number of digits in the target number. 
3. The algorithm is guaranteed to distinguish deterministically whether the target number is prime or composite. 
4. The correctness of AKS is not conditional on any subsidiary unproven hypothesis.
The AKS primality test is based upon the following theorem: An integer n greater than 2 is prime if and only if the polynomial congruence relation 
{\displaystyle (x+a)^{n}\equiv (x^{n}+a){\pmod {n}}}    
holds for some a coprime to n. Here x is just a formal symbol .
The AKS test evaluates the equality by making complexity dependent on the size of r . This is expressed as 
{\displaystyle (x+a)^{n}\equiv (x^{n}+a){\pmod {x^{r}-1, n}}}    
which can be expressed in simpler term as 
{\displaystyle (x+a)^{n}-(x^{n}+a)=(x^{r}-1)g+nf}    
for some polynomials f and g . 
This congruence can be checked in polynomial time when r is polynomial to the digits of n. The AKS algorithm evaluates this congruence for a large set of a values, whose size is polynomial to the digits of n. The proof of validity of the AKS algorithm shows that one can find r and a set of a values with the above properties such that if the congruences hold then n is a power of a prime. The brute force approach would require the expansion of the (x – a)^n polynomial and a reduction (mod n) of the resulting n + 1 coefficients .
As a should be co-prime to n. So, to implement this algorithm we can check by taking a = 1, but for large values of n we should take large values of a. 
The algorithm is based on the condition that if n is any number, then it is prime if, 
( x – 1 )^n – ( x^n – 1) is divisible by n.
Checking for n = 3 :
(x-1)^3 – (x^3 – 1) 
= (x^3 – 3x^2 + 3x – 1) – (x^3 – 1) 
= -3x^2 + 3x
As all the coefficients are divisible by n i.e. 3, so 3 (n) is prime. As the number increases, size increases. 
The code here is based on this condition and can check primes till 64 .
Below is the implementation of above approach: 
 

C++
Java
Python3
# Python3 code to check if
# number is prime. This
# program demonstrates concept
# behind AKS algorithm and
# doesn't implement the actual
# algorithm (This works only
# till n = 64)
 
# array used to
# store coefficients .
c = [0] * 100;
 
# function to calculate the
# coefficients of (x - 1)^n -
# (x^n - 1) with the help
# of Pascal's triangle .
def coef(n):
    c[0] = 1;
    for i in range(n):
        c[1 + i] = 1;
        for j in range(i, 0, -1):
            c[j] = c[j - 1] - c[j];
        c[0] = -c[0];
         
# function to check whether
# the number is prime or not
def isPrime(n):
     
    # Calculating all the coefficients
    # by the function coef and storing
    # all the coefficients in c array .
    coef(n);
     
    # subtracting c[n] and adding
    # c[0] by 1 as ( x - 1 )^n -
    # ( x^n - 1), here we are
    # subtracting c[n] by 1 and
    # adding 1 in expression.
    c[0] = c[0] + 1;
    c[n] = c[n] - 1;
     
    # checking all the coefficients
    # whether they are divisible by
    # n or not. if n is not prime,
    # then loop breaks and (i > 0).
    i = n;
    while (i > -1 and c[i] % n == 0):
        i = i - 1;
     
    # Return true if all coefficients
    # are divisible by n.
    return True if i < 0 else False;
 
# Driver Code
n = 37;
if (isPrime(n)):
    print("Prime");
else:
    print("Not Prime");
     
# This code is contributed by mits
C#
PHP
Javascript
Output: 

Prime
Time complexity: O(n2)
Auxiliary space: O(1) as space taken is constant.

References: 
https://en.wikipedia.org/wiki/AKS_primality_test 
https://rosettacode.org/wiki/AKS_test_for_primes#C 
https://www.youtube.com/watch?v=HvMSRWTE2mI
 

Recommended
Solve DSA problems on GfG Practice.

Solve Problems


Like
Previous
Solovay-Strassen method of Primality Test
Next
Circular primes less than n
Related Articles
1.
Primality Test | Set 3 (Miller–Rabin)
2.
Lucas Primality Test
3.
Vantieghems Theorem for Primality Test
4.
Implementation of Wilson Primality test
5.
Primality test for the sum of digits at odd places of a number
6.
Introduction to Primality Test and School Method
7.
Fermat Method of Primality Test
8.
Solovay-Strassen method of Primality Test
9.
Primality Test using Lucas-Lehmer Series
10.
Generating Test Cases (generate() and generate_n() in C++)