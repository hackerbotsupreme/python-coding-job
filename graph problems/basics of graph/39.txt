Bellman–Ford Algorithm | DP-23

Difficulty Level : Medium
Last Updated : 19 Jan, 2023
Read
Discuss(60+)
Courses
Practice
Video
Given a graph and a source vertex src in the graph, find the shortest paths from src to all vertices in the given graph. The graph may contain negative weight edges. 

We have discussed Dijkstra’s algorithm for this problem. Dijkstra’s algorithm is a Greedy algorithm and the time complexity is O((V+E)LogV) (with the use of the Fibonacci heap). Dijkstra doesn’t work for Graphs with negative weights, Bellman-Ford works for such graphs. Bellman-Ford is also simpler than Dijkstra and suites well for distributed systems. But time complexity of Bellman-Ford is O(V * E), which is more than Dijkstra. 

Recommended: Please solve it on “PRACTICE ” first, before moving on to the solution. 
 

 

Steps for finding the shortest distance to all vertices from the source using the Bellman-Ford algorithm:
This step initializes distances from the source to all vertices as infinite and distance to the source itself as 0. Create an array dist[] of size |V| with all values as infinite except dist[src] where src is source vertex.
This step calculates shortest distances. Do following |V|-1 times where |V| is the number of vertices in given graph. Do following for each edge u-v 
If dist[v] > dist[u] + weight of edge uv, then update dist[v] to
dist[v] = dist[u] + weight of edge uv
This step reports if there is a negative weight cycle in the graph. Again traverse every edge and do following for each edge u-v 
……If dist[v] > dist[u] + weight of edge uv, then “Graph contains negative weight cycle” 
The idea of step 3 is, step 2 guarantees the shortest distances if the graph doesn’t contain a negative weight cycle. If we iterate through all edges one more time and get a shorter path for any vertex, then there is a negative weight cycle
How does this work? 
Like other Dynamic Programming Problems, the algorithm calculates the shortest paths in a bottom-up manner. It first calculates the shortest distances which have at most one edge in the path. Then, it calculates the shortest paths with at-most 2 edges, and so on. After the i-th iteration of the outer loop, the shortest paths with at most i edges are calculated. There can be maximum |V| – 1 edges in any simple path, that is why the outer loop runs |v| – 1 times. The idea is, assuming that there is no negative weight cycle if we have calculated shortest paths with at most i edges, then an iteration over all edges guarantees to give the shortest path with at-most (i+1) edges

Below is the illustration of the above algorithm:
Step 1: Let the given source vertex be 0. Initialize all distances as infinite, except the distance to the source itself. Total number of vertices in the graph is 5, so all edges must be processed 4 times.
 

Bellman–Ford Algorithm Example Graph 1

Step 2: Let all edges are processed in the following order: (B, E), (D, B), (B, D), (A, B), (A, C), (D, C), (B, C), (E, D). We get the following distances when all edges are processed the first time. The first row shows initial distances. The second row shows distances when edges (B, E), (D, B), (B, D) and (A, B) are processed. The third row shows distances when (A, C) is processed. The fourth row shows when (D, C), (B, C) and (E, D) are processed. 
 

Bellman–Ford Algorithm Example Graph 2



Step 3: The first iteration guarantees to give all shortest paths which are at most 1 edge long. We get the following distances when all edges are processed second time (The last row shows final values). 
 

Bellman–Ford Algorithm Example Graph 3

Step 4: The second iteration guarantees to give all shortest paths which are at most 2 edges long. The algorithm processes all edges 2 more times. The distances are minimized after the second iteration, so third and fourth iterations don’t update the distances.

Below is the implementation of the above approach: 
 

C++
Java
Python3
# Python3 program for Bellman-Ford's single source
# shortest path algorithm.
 
# Class to represent a graph
 
class Graph:
 
    def __init__(self, vertices):
        self.V = vertices  # No. of vertices
        self.graph = []
 
    # function to add an edge to graph
    def addEdge(self, u, v, w):
        self.graph.append([u, v, w])
 
    # utility function used to print the solution
    def printArr(self, dist):
        print("Vertex Distance from Source")
        for i in range(self.V):
            print("{0}\t\t{1}".format(i, dist[i]))
 
    # The main function that finds shortest distances from src to
    # all other vertices using Bellman-Ford algorithm. The function
    # also detects negative weight cycle
    def BellmanFord(self, src):
 
        # Step 1: Initialize distances from src to all other vertices
        # as INFINITE
        dist = [float("Inf")] * self.V
        dist[src] = 0
 
        # Step 2: Relax all edges |V| - 1 times. A simple shortest
        # path from src to any other vertex can have at-most |V| - 1
        # edges
        for _ in range(self.V - 1):
            # Update dist value and parent index of the adjacent vertices of
            # the picked vertex. Consider only those vertices which are still in
            # queue
            for u, v, w in self.graph:
                if dist[u] != float("Inf") and dist[u] + w < dist[v]:
                    dist[v] = dist[u] + w
 
        # Step 3: check for negative-weight cycles. The above step
        # guarantees shortest distances if graph doesn't contain
        # negative weight cycle. If we get a shorter path, then there
        # is a cycle.
 
        for u, v, w in self.graph:
            if dist[u] != float("Inf") and dist[u] + w < dist[v]:
                print("Graph contains negative weight cycle")
                return
 
        # print all distance
        self.printArr(dist)
 
 
# Driver's code
if __name__ == '__main__':
    g = Graph(5)
    g.addEdge(0, 1, -1)
    g.addEdge(0, 2, 4)
    g.addEdge(1, 2, 3)
    g.addEdge(1, 3, 2)
    g.addEdge(1, 4, 2)
    g.addEdge(3, 2, 5)
    g.addEdge(3, 1, 1)
    g.addEdge(4, 3, -3)
 
    # function call
    g.BellmanFord(0)
 
# Initially, Contributed by Neelam Yadav
# Later On, Edited by Himanshu Garg
C#
Javascript
Output
Vertex   Distance from Source
0          0
1          -1
2          2
3          -2
4          1
Time Complexity:  O(V * E), where V is the number of vertices in the graph and E is the number of edges in the graph
Auxiliary Space: O(E)

Notes:

Negative weights are found in various applications of graphs. For example, instead of paying the cost for a path, we may get some advantage if we follow the path.
Bellman-Ford works better (better than Dijkstra’s) for distributed systems. Unlike Dijkstra’s where we need to find the minimum value of all vertices, in Bellman-Ford, edges are considered one by one.                                                                  
Bellman-Ford does not work with an undirected graph with negative edges as it will be declared as a negative cycle.
Exercise:

The standard Bellman-Ford algorithm reports the shortest path only if there are no negative weight cycles. Modify it so that it reports minimum distances even if there is a negative weight cycle.
Can we use Dijkstra’s algorithm for shortest paths for graphs with negative weights – one idea can be, to calculate the minimum weight value, add a positive value (equal to the absolute value of minimum weight value) to all weights and run the Dijkstra’s algorithm for the modified graph. Will this algorithm work?
Bellman Ford Algorithm (Simple Implementation)





Like
205
Previous
Dijkstra's Shortest Path Algorithm | Greedy Algo-7
Next
Floyd Warshall Algorithm | DP-16
Related Articles
1.
Edge Relaxation Property for Dijkstra’s Algorithm and Bellman Ford's Algorithm
2.
Largest Sum Contiguous Subarray (Kadane's Algorithm)
3.
Boruvka's algorithm for Minimum Spanning Tree
4.
Introduction to Push Relabel Algorithm
5.
Floyd Warshall Algorithm | DP-16
6.
Kruskal’s Minimum Spanning Tree Algorithm | Greedy Algo-2
7.
Dijkstra’s Algorithm for Adjacency List Representation | Greedy Algo-8
8.
Fleury's Algorithm for printing Eulerian Path or Circuit
9.
Johnson's algorithm for All-pairs shortest paths
10.
Graph Coloring | Set 2 (Greedy Algorithm)
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
danielwzou
ankthon
thori
gp6
merrcury
kishanbaranwal70
devjoytibarman
sajidali6567
thinhhuynh3108
evanmalmud
_ssss_ssss_
hardikkoriintern
diyaroy22
janardansthox
isha307
Article Tags :
Shortest Path
Dynamic Programming
Graph
Practice Tags :
Dynamic Programming
Graph
Shortest Path
Improve Article
Report Issue