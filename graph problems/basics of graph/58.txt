Topological Sorting

Difficulty Level : Medium
Last Updated : 17 Nov, 2022
Read
Discuss(280+)
Courses
Practice
Video
Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge u v, vertex u comes before v in the ordering.

Note: Topological Sorting for a graph is not possible if the graph is not a DAG.

For example, a topological sorting of the following graph is “5 4 2 3 1 0”. There can be more than one topological sorting for a graph. Another topological sorting of the following graph is “4 5 2 3 1 0”. The first vertex in topological sorting is always a vertex with an in-degree of 0 (a vertex with no incoming edges).
 

graph 

Recommended Problem
Topological sort
Graph
Data Structures
Moonfrog Labs
Flipkart
+8 more
Solve Problem
Submission count: 1.2L
Topological Sorting vs Depth First Traversal (DFS): 
In DFS, we print a vertex and then recursively call DFS for its adjacent vertices. In topological sorting, we need to print a vertex before its adjacent vertices. 

For example, in the given graph, the vertex ‘5’ should be printed before vertex ‘0’, but unlike DFS, the vertex ‘4’ should also be printed before vertex ‘0’. So Topological sorting is different from DFS. For example, a DFS of the shown graph is “5 2 3 1 0 4”, but it is not a topological sorting.

Algorithm for Topological Sorting:
Prerequisite: DFS

We can modify DFS to find the Topological Sorting of a graph. In DFS, 

We start from a vertex, we first print it, and then 
Recursively call DFS for its adjacent vertices. 
In topological sorting,

We use a temporary stack. 
We don’t print the vertex immediately, 
we first recursively call topological sorting for all its adjacent vertices, then push it to a stack. 
Finally, print the contents of the stack. 
Note: A vertex is pushed to stack only when all of its adjacent vertices (and their adjacent vertices and so on) are already in the stack

Approach:

Create a stack to store the nodes.
Initialize visited array of size N to keep the record of visited nodes.
Run a loop from 0 till N
if the node is not marked True in visited array
Call the recursive function for topological sort and perform the following steps.
Mark the current node as True in the visited array.
Run a loop on all the nodes which has a directed edge to the current node
if the node is not marked True in the visited array:
Recursively call the topological sort function on the node
Push the current node in the stack.
Print all the elements in the stack.
Below image is an illustration of the above approach:

Topological-Sorting

Please see the code for Depth First Traversal for a disconnected Graph and note the differences between the second code given there and the below code.

Below is the implementation of the above approach:

C++
Java
Python3
# Python program to print topological sorting of a DAG
from collections import defaultdict
 
# Class to represent a graph
 
 
class Graph:
    def __init__(self, vertices):
        self.graph = defaultdict(list)  # dictionary containing adjacency List
        self.V = vertices  # No. of vertices
 
    # function to add an edge to graph
    def addEdge(self, u, v):
        self.graph[u].append(v)
 
    # A recursive function used by topologicalSort
    def topologicalSortUtil(self, v, visited, stack):
 
        # Mark the current node as visited.
        visited[v] = True
 
        # Recur for all the vertices adjacent to this vertex
        for i in self.graph[v]:
            if visited[i] == False:
                self.topologicalSortUtil(i, visited, stack)
 
        # Push current vertex to stack which stores result
        stack.append(v)
 
    # The function to do Topological Sort. It uses recursive
    # topologicalSortUtil()
    def topologicalSort(self):
        # Mark all the vertices as not visited
        visited = [False]*self.V
        stack = []
 
        # Call the recursive helper function to store Topological
        # Sort starting from all vertices one by one
        for i in range(self.V):
            if visited[i] == False:
                self.topologicalSortUtil(i, visited, stack)
 
        # Print contents of the stack
        print(stack[::-1])  # return list in reverse order
 
 
# Driver Code
if __name__ == '__main__':
    g = Graph(6)
    g.addEdge(5, 2)
    g.addEdge(5, 0)
    g.addEdge(4, 0)
    g.addEdge(4, 1)
    g.addEdge(2, 3)
    g.addEdge(3, 1)
 
    print("Following is a Topological Sort of the given graph")
 
    # Function Call
    g.topologicalSort()
 
# This code is contributed by Neelam Yadav
C#
Javascript
Output
Following is a Topological Sort of the given graph 
5 4 2 3 1 0 
Time Complexity: O(V+E). The above algorithm is simply DFS with an extra stack. So time complexity is the same as DFS
Auxiliary space: O(V). The extra space is needed for the stack

Note: Here, we can also use a vector instead of the stack. If the vector is used then print the elements in reverse order to get the topological sorting.

Non-recursive approach for topological Sorting:
To solve the problem follow the below idea:

The way topological sorting is solved is by processing a node after all of its children are processed. Each time a node is processed, it is pushed onto a stack in order to save the final result. 

This non-recursive solution builds on the same concept of DFS with a little tweak which can be understood above. However, unlike the recursive solution, which saves the order of the nodes in the stack after all the neighboring elements have been pushed to the program stack, this solution replaces the program stack with a working stack. If a node has a neighbor that has not been visited, the current node and the neighbor are pushed to the working stack to be processed until there are no more neighbors available to be visited.After all the nodes have been visited, what remains is the final result which is found by printing the stack result in reverse.

Below is the implementation of the above approach:

Python3
# Python program to print topological sorting of a DAG
from collections import defaultdict
 
# Class to represent a graph
 
 
class Graph:
    def __init__(self, vertices):
        self.graph = defaultdict(list)  # dictionary containing adjacency List
        self.V = vertices  # No. of vertices
 
    # function to add an edge to graph
    def addEdge(self, u, v):
        self.graph[u].append(v)
 
    # neighbors generator given key
    def neighbor_gen(self, v):
        for k in self.graph[v]:
            yield k
 
    # non recursive topological sort
    def nonRecursiveTopologicalSortUtil(self, v, visited, stack):
 
        # working stack contains key and the corresponding current generator
        working_stack = [(v, self.neighbor_gen(v))]
 
        while working_stack:
            # get last element from stack
            v, gen = working_stack.pop()
            visited[v] = True
 
            # run through neighbor generator until it's empty
            for next_neighbor in gen:
                if not visited[next_neighbor]:  # not seen before?
                    # remember current work
                    working_stack.append((v, gen))
                    # restart with new neighbor
                    working_stack.append(
                        (next_neighbor, self.neighbor_gen(next_neighbor)))
                    break
            else:
                # no already-visited neighbor (or no more of them)
                stack.append(v)
 
    # The function to do Topological Sort.
    def nonRecursiveTopologicalSort(self):
        # Mark all the vertices as not visited
        visited = [False]*self.V
 
        # result stack
        stack = []
 
        # Call the helper function to store Topological
        # Sort starting from all vertices one by one
        for i in range(self.V):
            if not(visited[i]):
                self.nonRecursiveTopologicalSortUtil(i, visited, stack)
        # Print contents of the stack in reverse
        stack.reverse()
        print(stack)
 
 
# Driver code
if __name__ == "__main__":
  g = Graph(6)
  g.addEdge(5, 2)
  g.addEdge(5, 0)
  g.addEdge(4, 0)
  g.addEdge(4, 1)
  g.addEdge(2, 3)
  g.addEdge(3, 1)
 
 
  # Function call
  print("The following is a Topological Sort of the given graph")
  g.nonRecursiveTopologicalSort()
# This code was based of Neelam Yadav's code, modified by Suhail Alnahari, Python-ified by Matthias Urlichhs
Output
The following is a Topological Sort of the given graph
[5, 4, 2, 3, 1, 0]
Time Complexity: O(V + E) The above algorithm is simply DFS with a working stack and a result stack. Unlike the recursive solution, recursion depth is not an issue here.
Auxiliary space: O(V), The extra space is needed for the 2 stacks used

Applications of Topological Sorting:
Topological Sorting is mainly used for scheduling jobs from the given dependencies among jobs. 
In computer science, applications of this type arise in:
Instruction scheduling
Ordering of formula cell evaluation when recomputing formula values in spreadsheets
Logic synthesis
Determining the order of compilation tasks to perform in make files
Data serialization
Resolving symbol dependencies in linkers
Related Articles: 
Kahn’s algorithm for Topological Sorting: 
All Topological Sorts of a Directed Acyclic Graph

Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above



Like
Previous
Find Shortest distance from a guard in a Bank
Next
All Topological Sorts of a Directed Acyclic Graph
Related Articles
1.
Kahn's algorithm for Topological Sorting
2.
All Topological Sorts of a Directed Acyclic Graph
3.
Topological Sort of a graph using departure time of vertex
4.
Lexicographically Smallest Topological Ordering
5.
Detect cycle in Directed Graph using Topological Sort
6.
C++ Program For Sorting A Linked List Of 0s, 1s And 2s
7.
C Program For Sorting A Linked List Of 0s, 1s And 2s
8.
Java Program For Sorting A Linked List Of 0s, 1s And 2s
9.
Python Program For Sorting A Linked List Of 0s, 1s And 2s
10.
Javascript Program For Sorting A Linked List Of 0s, 1s And 2s
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
ConstantineShulyupin
ShivamBhasin
andrew1234
abhinavgalodha
technicallynoob
highnessatharva
amartyaghoshgfg
subhamgoyal2014
janardansthox
user_u2in3kh4sus
Article Tags :
Accolite
Amazon
DFS
Flipkart
Microsoft
Moonfrog Labs
Morgan Stanley
OYO Rooms
Samsung
Topological Sorting
Graph
Practice Tags :
Accolite
Amazon
Flipkart
Microsoft
Moonfrog Labs
Morgan Stanley
OYO Rooms
Samsung
DFS
Graph
Report Issue