Detecting negative cycle using Floyd Warshall

Difficulty Level : Easy
Last Updated : 20 Jul, 2022
Read
Discuss
Courses
Practice
Video
We are given a directed graph. We need compute whether the graph has negative cycle or not. A negative cycle is one in which the overall sum of the cycle comes negative.

negative_cycle

Negative weights are found in various applications of graphs. For example, instead of paying cost for a path, we may get some advantage if we follow the path.

Examples: 

Input : 4 4
        0 1 1
        1 2 -1
        2 3 -1
        3 0 -1

Output : Yes
The graph contains a negative cycle.
Detecting negative cycle using Floyd Warshall

 
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
We have discussed Bellman Ford Algorithm based solution for this problem.
In this post, Floyd Warshall Algorithm based solution is discussed that works for both connected and disconnected graphs.
Distance of any node from itself is always zero. But in some cases, as in this example, when we traverse further from 4 to 1, the distance comes out to be -2, i.e. distance of 1 from 1 will become -2. This is our catch, we just have to check the nodes distance from itself and if it comes out to be negative, we will detect the required negative cycle.

Implementation:

C++
Java
Python3
# Python Program to check
# if there is a
# negative weight
# cycle using Floyd
# Warshall Algorithm
 
  
# Number of vertices
# in the graph
V = 4
      
# Define Infinite as a
# large enough value. This
# value will be used
#for vertices not connected
# to each other
INF = 99999
      
# Returns true if graph has
# negative weight cycle
# else false.
def negCyclefloydWarshall(graph):
          
    # dist[][] will be the
    # output matrix that will
    # finally have the shortest
    # distances between every
    # pair of vertices
    dist=[[0 for i in range(V+1)]for j in range(V+1)]
      
    # Initialize the solution
    # matrix same as input
    # graph matrix. Or we can
    # say the initial values
    # of shortest distances
    # are based on shortest
    # paths considering no
    # intermediate vertex.
    for i in range(V):
        for j in range(V):
            dist[i][j] = graph[i][j]
      
    ''' Add all vertices one
        by one to the set of
        intermediate vertices.
    ---> Before start of a iteration,
         we have shortest
        distances between all pairs
        of vertices such
        that the shortest distances
        consider only the
        vertices in set {0, 1, 2, .. k-1}
        as intermediate vertices.
    ----> After the end of a iteration,
          vertex no. k is
        added to the set of
        intermediate vertices and
        the set becomes {0, 1, 2, .. k} '''
    for k in range(V):
     
        # Pick all vertices
        # as source one by one
        for i in range(V):
                  
            # Pick all vertices as
            # destination for the
            # above picked source
            for j in range(V):
         
                # If vertex k is on
                # the shortest path from
                # i to j, then update
                # the value of dist[i][j]
                if (dist[i][k] + dist[k][j] < dist[i][j]):
                        dist[i][j] = dist[i][k] + dist[k][j]
  
    # If distance of any
    # vertex from itself
    # becomes negative, then
    # there is a negative
    # weight cycle.
    for i in range(V):
        if (dist[i][i] < 0):
            return True
  
    return False
 
          
# Driver code
 
      
''' Let us create the
    following weighted graph
            1
    (0)----------->(1)
    /|\               |
     |               |
  -1 |               | -1
     |                \|/
    (3)<-----------(2)
        -1     '''
          
graph = [ [0, 1, INF, INF],
          [INF, 0, -1, INF],
          [INF, INF, 0, -1],
          [-1, INF, INF, 0]]
          
if (negCyclefloydWarshall(graph)):
    print("Yes")
else:
    print("No")
 
# This code is contributed
# by Anant Agarwal.
C#
Javascript
Output
Yes
This article is contributed by Shivani Mittal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 



Like
Previous
Cycles of length n in an undirected and connected graph
Next
Detect Cycle in a directed graph using colors
Related Articles
1.
Finding shortest path between any two nodes using Floyd Warshall Algorithm
2.
Floyd Warshall Algorithm | DP-16
3.
Comparison of Dijkstra’s and Floyd–Warshall algorithms
4.
Floyd’s Cycle Finding Algorithm
5.
Detect a negative cycle in a Graph using Shortest Path Faster Algorithm
6.
Detect a negative cycle in a Graph | (Bellman Ford)
7.
Print negative weight cycle in a Directed Graph
8.
How does Floyd's slow and fast pointers approach work?
9.
Detect Cycle in a directed graph using colors
10.
Detect cycle in an undirected graph using BFS
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
itsok
surinderdawra388
hardikkoriintern
Article Tags :
graph-cycle
Graph
Practice Tags :
Graph
Report Issue