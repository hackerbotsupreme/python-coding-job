Dinic’s algorithm for Maximum Flow

Difficulty Level : Expert
Last Updated : 26 Jul, 2022
Read
Discuss
Courses
Practice
Video
Problem Statement : 
Given a graph that represents a flow network where every edge has a capacity. Also given two vertices source ‘s’ and sink ‘t’ in the graph, find the maximum possible flow from s to t with the following constraints :  

Flow on an edge doesn’t exceed the given capacity of the edge.
An incoming flow is equal to an outgoing flow for every vertex except s and t.
For example: 

In the following input graph, 

Dinic's algorithm for Maximum Flow 1

the maximum s-t flow is 19 which is shown below. 


 

Background : 

Max Flow Problem Introduction: We introduced the Maximum Flow problem, discussed Greedy Algorithm, and introduced the residual graph.
Ford-Fulkerson Algorithm and Edmond Karp Implementation: We discussed the Ford-Fulkerson algorithm and its implementation. We also discussed the residual graph in detail.
The time complexity of Edmond Karp Implementation is O(VE2). In this post, a new Dinic’s algorithm is discussed which is a faster algorithm and takes O(EV2).



Like Edmond Karp’s algorithm, Dinic’s algorithm uses following concepts : 

A flow is maximum if there is no s to t path in residual graph.
BFS is used in a loop. There is a difference though in the way we use BFS in both algorithms.
In Edmond’s Karp algorithm, we use BFS to find an augmenting path and send flow across this path. In Dinic’s algorithm, we use BFS to check if more flow is possible and to construct level graph. In level graph, we assign levels to all nodes, level of a node is shortest distance (in terms of number of edges) of the node from source. Once level graph is constructed, we send multiple flows using this level graph. This is the reason it works better than Edmond Karp. In Edmond Karp, we send only flow that is send across the path found by BFS.

Outline of Dinic’s algorithm : 

Initialize residual graph G as given graph.
Do BFS of G to construct a level graph (or assign levels to vertices) and also check if more flow is possible.
If more flow is not possible, then return
Send multiple flows in G using level graph until blocking flow is reached. 
Here using level graph means, in every flow, levels of path nodes should be 0, 1, 2…(in order) from s to t.
A flow is Blocking Flow if no more flow can be sent using level graph, i.e., no more s-t path exists such that path vertices have current levels 0, 1, 2… in order. Blocking Flow can be seen same as maximum flow path in Greedy algorithm discussed here.

Illustration : 
Initial Residual Graph (Same as given Graph) 
 

Initial Residual Graph

Total Flow = 0

First Iteration : We assign levels to all nodes using BFS. We also check if more flow is possible (or there is a s-t path in residual graph). 
 

First Iteration

Now we find blocking flow using levels (means every flow path should have levels as 0, 1, 2, 3). We send three flows together. This is where it is optimized compared to Edmond Karp where we send one flow at a time. 
4 units of flow on path s – 1 – 3 – t. 
6 units of flow on path s – 1 – 4 – t. 
4 units of flow on path s – 2 – 4 – t. 
Total flow = Total flow + 4 + 6 + 4 = 14
After one iteration, residual graph changes to following. 
 

 residual graph after first iteration

Second Iteration : We assign new levels to all nodes using BFS of above modified residual graph. We also check if more flow is possible (or there is a s-t path in residual graph). 

Second Iteration

Now we find blocking flow using levels (means every flow path should have levels as 0, 1, 2, 3, 4). We can send only one flow this time. 
5 units of flow on path s – 2 – 4 – 3 – t 
Total flow = Total flow + 5 = 19
The new residual graph is 
 

Rssidual graph after Second Iteration

Third Iteration : We run BFS and create a level graph. We also check if more flow is possible and proceed only if possible. This time there is no s-t path in residual graph, so we terminate the algorithm.

Implementation : 
Below is c++ implementation of Dinic’s algorithm:  

CPP
Python3
# Python implementation of Dinic's Algorithm
class Edge:
    def __init__(self, v, flow, C, rev):
        self.v = v
        self.flow = flow
        self.C = C
        self.rev = rev
 
# Residual Graph
 
 
class Graph:
    def __init__(self, V):
        self.adj = [[] for i in range(V)]
        self.V = V
        self.level = [0 for i in range(V)]
 
    # add edge to the graph
    def addEdge(self, u, v, C):
 
        # Forward edge : 0 flow and C capacity
        a = Edge(v, 0, C, len(self.adj[v]))
 
        # Back edge : 0 flow and 0 capacity
        b = Edge(u, 0, 0, len(self.adj[u]))
        self.adj[u].append(a)
        self.adj[v].append(b)
 
    # Finds if more flow can be sent from s to t
    # Also assigns levels to nodes
    def BFS(self, s, t):
        for i in range(self.V):
            self.level[i] = -1
 
        # Level of source vertex
        self.level[s] = 0
 
        # Create a queue, enqueue source vertex
        # and mark source vertex as visited here
        # level[] array works as visited array also
        q = []
        q.append(s)
        while q:
            u = q.pop(0)
            for i in range(len(self.adj[u])):
                e = self.adj[u][i]
                if self.level[e.v] < 0 and e.flow < e.C:
 
                    # Level of current vertex is
                    # level of parent + 1
                    self.level[e.v] = self.level[u]+1
                    q.append(e.v)
 
        # If we can not reach to the sink we
        # return False else True
        return False if self.level[t] < 0 else True
 
# A DFS based function to send flow after BFS has
# figured out that there is a possible flow and
# constructed levels. This functions called multiple
# times for a single call of BFS.
# flow : Current flow send by parent function call
# start[] : To keep track of next edge to be explored
#           start[i] stores count of edges explored
#           from i
# u : Current vertex
# t : Sink
    def sendFlow(self, u, flow, t, start):
        # Sink reached
        if u == t:
            return flow
 
        # Traverse all adjacent edges one -by -one
        while start[u] < len(self.adj[u]):
 
            # Pick next edge from adjacency list of u
            e = self.adj[u][start[u]]
            if self.level[e.v] == self.level[u]+1 and e.flow < e.C:
 
                # find minimum flow from u to t
                curr_flow = min(flow, e.C-e.flow)
                temp_flow = self.sendFlow(e.v, curr_flow, t, start)
 
                # flow is greater than zero
                if temp_flow and temp_flow > 0:
 
                    # add flow to current edge
                    e.flow += temp_flow
 
                    # subtract flow from reverse edge
                    # of current edge
                    self.adj[e.v][e.rev].flow -= temp_flow
                    return temp_flow
            start[u] += 1
 
    # Returns maximum flow in graph
    def DinicMaxflow(self, s, t):
 
        # Corner case
        if s == t:
            return -1
 
        # Initialize result
        total = 0
 
        # Augument the flow while there is path
        # from source to sink
        while self.BFS(s, t) == True:
 
            # store how many edges are visited
            # from V { 0 to V }
            start = [0 for i in range(self.V+1)]
            while True:
                flow = self.sendFlow(s, float('inf'), t, start)
                if not flow:
                    break
 
                # Add path flow to overall flow
                total += flow
 
        # return maximum flow
        return total
 
 
g = Graph(6)
g.addEdge(0, 1, 16)
g.addEdge(0, 2, 13)
g.addEdge(1, 2, 10)
g.addEdge(1, 3, 12)
g.addEdge(2, 1, 4)
g.addEdge(2, 4, 14)
g.addEdge(3, 2, 9)
g.addEdge(3, 5, 20)
g.addEdge(4, 3, 7)
g.addEdge(4, 5, 4)
print("Maximum flow", g.DinicMaxflow(0, 5))
 
# This code is contributed by rupasriachanta421.
Output
Maximum flow 23
Time Complexity : O(EV2). 

Doing a BFS to construct level graph takes O(E) time. 
Sending multiple more flows until a blocking flow is reached takes O(VE) time. 
The outer loop runs at-most O(V) time. 
In each iteration, we construct new level graph and find blocking flow. It can be proved that the number of levels increase at least by one in every iteration (Refer the below reference video for the proof). So the outer loop runs at most O(V) times.
Therefore overall time complexity is O(EV2). 
This article is contributed by Nishant Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
 

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
13
Previous
Introduction and implementation of Karger's algorithm for Minimum Cut
Next
Max Flow Problem Introduction
Related Articles
1.
Minimum Cost Maximum Flow from a Graph using Bellman Ford Algorithm
2.
Ford-Fulkerson Algorithm for Maximum Flow Problem
3.
Minimize Cash Flow among a given set of friends who have borrowed money from each other
4.
Max Flow Problem Introduction
5.
Cuts and Network Flow
6.
Atlantic pacific water flow
7.
Find minimum s-t cut in a flow network
8.
Edge Relaxation Property for Dijkstra’s Algorithm and Bellman Ford's Algorithm
9.
Hopcroft–Karp Algorithm for Maximum Matching | Set 1 (Introduction)
10.
Hopcroft–Karp Algorithm for Maximum Matching | Set 2 (Implementation)
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Expert
Easy
Normal
Medium
Hard
Expert
Improved By :
judykhairalla
rupasriachanta421
simmytarika5
janardansthox
Article Tags :
BFS
DFS
Max-Flow
Graph
Practice Tags :
BFS
DFS
Graph
Improve Article
Report Issue