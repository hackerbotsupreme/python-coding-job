Minimum cost to connect all cities

Difficulty Level : Medium
Last Updated : 06 Jan, 2023
Read
Discuss
Courses
Practice
Video
There are n cities and there are roads in between some of the cities. Somehow all the roads are damaged simultaneously. We have to repair the roads to connect the cities again. There is a fixed cost to repair a particular road. Find out the minimum cost to connect all the cities by repairing roads. Input is in matrix(city) form, if city[i][j] = 0 then there is not any road between city i and city j, if city[i][j] = a > 0 then the cost to rebuild the path between city i and city j is a. Print out the minimum cost to connect all the cities. 
It is sure that all the cities were connected before the roads were damaged.

Examples: 

Input : {{0, 1, 2, 3, 4},
         {1, 0, 5, 0, 7},
         {2, 5, 0, 6, 0},
         {3, 0, 6, 0, 0},
         {4, 7, 0, 0, 0}};
Output : 10
min-cost

Input : {{0, 1, 1, 100, 0, 0},
         {1, 0, 1, 0, 0, 0},
         {1, 1, 0, 0, 0, 0},
         {100, 0, 0, 0, 2, 2},
         {0, 0, 0, 2, 0, 2},
         {0, 0, 0, 2, 2, 0}};
Output : 106
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Method: Here we have to connect all the cities by path which will cost us least. The way to do that is to find out the Minimum Spanning Tree(MST) of the map of the cities(i.e. each city is a node of the graph and all the damaged roads between cities are edges). And the total cost is the addition of the path edge values in the Minimum Spanning Tree.

Prerequisite: MST Primâ€™s Algorithm

Implementation:

C++
Java
Python3
# Python3 code to find out minimum cost
# path to connect all the cities
 
# Function to find out minimum valued
# node among the nodes which are not
# yet included in MST
def minnode(n, keyval, mstset):
    mini = 999999999999
    mini_index = None
     
    # Loop through all the values of
    # the nodes which are not yet
    # included in MST and find the
    # minimum valued one.
    for i in range(n):
        if (mstset[i] == False and
            keyval[i] < mini):
            mini = keyval[i]
            mini_index = i
    return mini_index
 
# Function to find out the MST and
# the cost of the MST.
def findcost(n, city):
 
    # Array to store the parent
    # node of a particular node.
    parent = [None] * n
     
    # Array to store key value
    # of each node.
    keyval = [None] * n
     
    # Boolean Array to hold bool
    # values whether a node is
    # included in MST or not.
    mstset = [None] * n
     
    # Set all the key values to infinite and
    # none of the nodes is included in MST.
    for i in range(n):
        keyval[i] = 9999999999999
        mstset[i] = False
     
    # Start to find the MST from node 0.
    # Parent of node 0 is none so set -1.
    # key value or minimum cost to reach
    # 0th node from 0th node is 0.
    parent[0] = -1
    keyval[0] = 0
     
    # Find the rest n-1 nodes of MST.
    for i in range(n - 1):
     
        # First find out the minimum node
        # among the nodes which are not yet
        # included in MST.
        u = minnode(n, keyval, mstset)
     
        # Now the uth node is included in MST.
        mstset[u] = True
     
        # Update the values of neighbor
        # nodes of u which are not yet
        # included in MST.
        for v in range(n):
            if (city[u][v] and mstset[v] == False and
                city[u][v] < keyval[v]):
                keyval[v] = city[u][v]
                parent[v] = u
     
    # Find out the cost by adding
    # the edge values of MST.
    cost = 0
    for i in range(1, n):
        cost += city[parent[i]][i]
    print(cost)
 
# Driver Code
if __name__ == '__main__':
 
    # Input 1
    n1 = 5
    city1 = [[0, 1, 2, 3, 4],
             [1, 0, 5, 0, 7],
             [2, 5, 0, 6, 0],
             [3, 0, 6, 0, 0],
             [4, 7, 0, 0, 0]]
    findcost(n1, city1)
     
    # Input 2
    n2 = 6
    city2 = [[0, 1, 1, 100, 0, 0],
             [1, 0, 1, 0, 0, 0],
             [1, 1, 0, 0, 0, 0],
             [100, 0, 0, 0, 2, 2],
             [0, 0, 0, 2, 0, 2],
             [0, 0, 0, 2, 2, 0]]
    findcost(n2, city2)
 
# This code is contributed by PranchalK
C#
Javascript
Output: 
10
106
 

Time Complexity: The outer loop(i.e. the loop to add new node to MST) runs n times and in each iteration of the loop it takes O(n) time to find the min node and O(n) time to update the neighboring nodes of u-th node. Hence the overall complexity is O(n2)

Auxiliary Space: O(n)



Like
Previous
Correctness of Greedy Algorithms
Next
Max Flow Problem Introduction
Related Articles
1.
Minimum possible travel cost among N cities
2.
Minimize cost to connect the graph by connecting any pairs of vertices having cost at least 0
3.
Minimum cost required to connect all houses in a city
4.
Connect n ropes with minimum cost
5.
Minimum cost to connect weighted nodes represented as array
6.
Count ways to traverse all N cities when each city is traversed K times
7.
Single source shortest path between two cities
8.
Minimum Cost using Dijkstra by Modifying Cost of an Edge
9.
Minimum cost to empty Array where cost of removing an element is 2^(removed_count) * arr[i]
10.
Minimum cost to complete given tasks if cost of 1, 7 and 30 days are given
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
egoista
@egoista
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
PranchalKatiyar
adityapande88
avijitmondal1998
ukasp
hardikkoriintern
raj2002
Article Tags :
MST
Graph
Greedy
Practice Tags :
Graph
Greedy
Report Issue