Floyd Warshall Algorithm | DP-16

Difficulty Level : Medium
Last Updated : 16 Dec, 2022
Read
Discuss(20+)
Courses
Practice
Video
The Floyd Warshall Algorithm is for solving all pairs of shortest-path problems. The problem is to find the shortest distances between every pair of vertices in a given edge-weighted directed Graph. 

Example: 

Input:  graph[][] = { {0,   5,  INF, 10},
                               {INF,  0,  3,  INF},
                               {INF, INF, 0,   1},
                               {INF, INF, INF, 0} }
which represents the following graph
             10
      (0)——->(3)
        |              /|\
     5 |               |  1
        |               |  
       \|/             |
      (1)——->(2)
              3 
Output: Shortest distance matrix
    0        5      8       9
 INF       0      3       4
 INF     INF    0       1 
 INF     INF    INF    0

Recommended Problem
Floyd Warshall
Dynamic Programming
Graph
+2 more
Samsung
Solve Problem
Submission count: 78.7K
Floyd Warshall Algorithm:
Initialize the solution matrix same as the input graph matrix as a first step. 
Then update the solution matrix by considering all vertices as an intermediate vertex. 
The idea is to one by one pick all vertices and updates all shortest paths which include the picked vertex as an intermediate vertex in the shortest path. 
When we pick vertex number k as an intermediate vertex, we already have considered vertices {0, 1, 2, .. k-1} as intermediate vertices. 
For every pair (i, j) of the source and destination vertices respectively, there are two possible cases. 
k is not an intermediate vertex in shortest path from i to j. We keep the value of dist[i][j] as it is. 
k is an intermediate vertex in shortest path from i to j. We update the value of dist[i][j] as dist[i][k] + dist[k][j] if dist[i][j] > dist[i][k] + dist[k][j]
The following figure shows the above optimal substructure property in the all-pairs shortest path problem.
 

Floyd Warshall Algorithm

Below is the implementation of the above approach:

C
Java
C++
Python3
# Python3 Program for Floyd Warshall Algorithm
 
# Number of vertices in the graph
V = 4
 
# Define infinity as the large
# enough value. This value will be
# used for vertices not connected to each other
INF = 99999
 
# Solves all pair shortest path
# via Floyd Warshall Algorithm
 
 
def floydWarshall(graph):
    """ dist[][] will be the output
       matrix that will finally
        have the shortest distances
        between every pair of vertices """
    """ initializing the solution matrix
    same as input graph matrix
    OR we can say that the initial
    values of shortest distances
    are based on shortest paths considering no
    intermediate vertices """
 
    dist = list(map(lambda i: list(map(lambda j: j, i)), graph))
 
    """ Add all vertices one by one
    to the set of intermediate
     vertices.
     ---> Before start of an iteration,
     we have shortest distances
     between all pairs of vertices
     such that the shortest
     distances consider only the
     vertices in the set
    {0, 1, 2, .. k-1} as intermediate vertices.
      ----> After the end of a
      iteration, vertex no. k is
     added to the set of intermediate
     vertices and the
    set becomes {0, 1, 2, .. k}
    """
    for k in range(V):
 
        # pick all vertices as source one by one
        for i in range(V):
 
            # Pick all vertices as destination for the
            # above picked source
            for j in range(V):
 
                # If vertex k is on the shortest path from
                # i to j, then update the value of dist[i][j]
                dist[i][j] = min(dist[i][j],
                                 dist[i][k] + dist[k][j]
                                 )
    printSolution(dist)
 
 
# A utility function to print the solution
def printSolution(dist):
    print("Following matrix shows the shortest distances\
 between every pair of vertices")
    for i in range(V):
        for j in range(V):
            if(dist[i][j] == INF):
                print("%7s" % ("INF"), end=" ")
            else:
                print("%7d\t" % (dist[i][j]), end=' ')
            if j == V-1:
                print()
 
 
# Driver's code
if __name__ == "__main__":
  """
              10
         (0)------->(3)
          |         /|\
        5 |          |
          |          | 1
         \|/         |
         (1)------->(2)
              3           """
  graph = [[0, 5, INF, 10],
         [INF, 0, 3, INF],
         [INF, INF, 0,   1],
         [INF, INF, INF, 0]
         ]
  # Function call
  floydWarshall(graph)
# This code is contributed by Mythri J L
C#
PHP
Javascript
Output


The following matrix shows the shortest distances between every pair of vertices 
      0      5      8      9
    INF      0      3      4
    INF    INF      0      1
    INF    INF    INF      0
Time Complexity: O(V3)
Auxiliary Space: O(V2)

The above program only prints the shortest distances. We can modify the solution to print the shortest paths also by storing the predecessor information in a separate 2D matrix. 

Also, the value of INF can be taken as INT_MAX from limits.h to make sure that we handle the maximum possible value. When we take INF as INT_MAX, we need to change the if condition in the above program to avoid arithmetic overflow. 

C++
#include
 
#define INF INT_MAX
..........................
if ( dist[i][k] != INF &&
     dist[k][j] != INF &&
     dist[i][k] + dist[k][j] < dist[i][j]
    )
 dist[i][j] = dist[i][k] + dist[k][j];
...........................
Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above





Like
315
Previous
Count Balanced Binary Trees of Height h
Next
0-1 Knapsack Problem | DP-10
Related Articles
1.
Finding shortest path between any two nodes using Floyd Warshall Algorithm
2.
Detecting negative cycle using Floyd Warshall
3.
Comparison of Dijkstra’s and Floyd–Warshall algorithms
4.
Floyd’s Cycle Finding Algorithm
5.
Edge Relaxation Property for Dijkstra’s Algorithm and Bellman Ford's Algorithm
6.
Largest Sum Contiguous Subarray (Kadane's Algorithm)
7.
Boruvka's algorithm for Minimum Spanning Tree
8.
Introduction to Push Relabel Algorithm
9.
Kruskal’s Minimum Spanning Tree Algorithm | Greedy Algo-2
10.
Dijkstra’s Algorithm for Adjacency List Representation | Greedy Algo-8
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
Abdul Mateen Mohammed
abhayscholar1995
ankthon
rathbhupendra
mythri1020
mitrukahitesh
NikitaRana07
rdtank
amartyaghoshgfg
technophpfij
janardansthox
ksamueljoseph006
2020pietcsgarvit69
Article Tags :
Samsung
Shortest Path
Dynamic Programming
Graph
Practice Tags :
Samsung
Dynamic Programming
Graph
Shortest Path
Improve Article
Report Issue