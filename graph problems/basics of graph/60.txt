Kahn’s algorithm for Topological Sorting

Difficulty Level : Medium
Last Updated : 26 Jul, 2022
Read
Discuss(60)
Courses
Practice
Video
Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge uv, vertex u comes before v in the ordering. Topological Sorting for a graph is not possible if the graph is not a DAG.
For example, a topological sorting of the following graph is “5 4 2 3 1 0?. There can be more than one topological sorting for a graph. For example, another topological sorting of the following graph is “4 5 2 0 3 1″. The first vertex in topological sorting is always a vertex with an in-degree of 0 (a vertex with no incoming edges).
 

graph

Let’s look at a few examples with proper explanation, 
Example: 

Input: 



Output: 5 4 2 3 1 0 
Explanation: The topological sorting of a DAG is done in a order such that for every directed edge uv, vertex u comes before v in the ordering. 5 has no incoming edge. 4 has no incoming edge, 2 and 0 have incoming edge from 4 and 5 and 1 is placed at last.
Input: 



Output: 0 3 4 1 2 
Explanation: 0 and 3 have no incoming edge, 4 and 1 has incoming edge from 0 and 3. 2 is placed at last. 
 

 

Recommended: Please solve it on “PRACTICE” first, before moving on to the solution.
A DFS based solution to find a topological sort has already been discussed.
Solution: In this article, we will see another way to find the linear ordering of vertices in a directed acyclic graph (DAG). The approach is based on the below fact:
A DAG G has at least one vertex with in-degree 0 and one vertex with out-degree 0. 
Proof: There’s a simple proof to the above fact that a DAG does not contain a cycle which means that all paths will be of finite length. Now let S be the longest path from u(source) to v(destination). Since S is the longest path there can be no incoming edge to u and no outgoing edge from v, if this situation had occurred then S would not have been the longest path 
=> indegree(u) = 0 and outdegree(v) = 0

Intuition:

Topological sorting is a kind of dependencies problem so, we can start with the tasks which do not have any dependencies and can be done straight away or simply if we talk about in the term of node, 

We will always try to execute those nodes that have outdegree 0. 
Then after execution of all those 0 outdegrees, we will execute which are directly dependent on currently resolved tasks (currently resolved tasks’ outdegrees will become 0 now) and so on will execute all other tasks. 
We look closely we are doing these executions are done level-wise or in a Breadth-first search (BFS) manner. Similarly, we can also perform the same task for indegree=0.

Algorithm: Steps involved in finding the topological ordering of a DAG: 
Step-1: Compute in-degree (number of incoming edges) for each of the vertex present in the DAG and initialize the count of visited nodes as 0.
Step-2: Pick all the vertices with in-degree as 0 and add them into a queue (Enqueue operation)
Step-3: Remove a vertex from the queue (Dequeue operation) and then. 
 

Increment the count of visited nodes by 1.
Decrease in-degree by 1 for all its neighbouring nodes.
If the in-degree of neighbouring nodes is reduced to zero, then add it to the queue.
Step 4: Repeat Step 3 until the queue is empty.
Step 5: If the count of visited nodes is not equal to the number of nodes in the graph then the topological sort is not possible for the given graph.
How to find the in-degree of each node? 
There are 2 ways to calculate in-degree of every vertex: 
 

Take an in-degree array which will keep track of 
Traverse the array of edges and simply increase the counter of the destination node by 1. 
 
for each node in Nodes
    indegree[node] = 0;
for each edge(src, dest) in Edges
    indegree[dest]++
Time Complexity: O(V+E)
Traverse the list for every node and then increment the in-degree of all the nodes connected to it by 1. 
 
    for each node in Nodes
        If (list[node].size()!=0) then
        for each dest in list
            indegree[dest]++;
Time Complexity: The outer for loop will be executed V number of times and the inner for loop will be executed E number of times, Thus overall time complexity is O(V+E).
The overall time complexity of the algorithm is O(V+E)
Below is the implementation of the above algorithm. The implementation uses method 2 discussed above for finding in degrees. 
 

C++
Java
Python3
# A Python program to print topological sorting of a graph
# using indegrees
from collections import defaultdict
 
# Class to represent a graph
class Graph:
    def __init__(self, vertices):
        self.graph = defaultdict(list) # dictionary containing adjacency List
        self.V = vertices # No. of vertices
 
    # function to add an edge to graph
    def addEdge(self, u, v):
        self.graph[u].append(v)
 
 
    # The function to do Topological Sort.
    def topologicalSort(self):
         
        # Create a vector to store indegrees of all
        # vertices. Initialize all indegrees as 0.
        in_degree = [0]*(self.V)
         
        # Traverse adjacency lists to fill indegrees of
           # vertices.  This step takes O(V + E) time
        for i in self.graph:
            for j in self.graph[i]:
                in_degree[j] += 1
 
        # Create an queue and enqueue all vertices with
        # indegree 0
        queue = []
        for i in range(self.V):
            if in_degree[i] == 0:
                queue.append(i)
 
        # Initialize count of visited vertices
        cnt = 0
 
        # Create a vector to store result (A topological
        # ordering of the vertices)
        top_order = []
 
        # One by one dequeue vertices from queue and enqueue
        # adjacents if indegree of adjacent becomes 0
        while queue:
 
            # Extract front of queue (or perform dequeue)
            # and add it to topological order
            u = queue.pop(0)
            top_order.append(u)
 
            # Iterate through all neighbouring nodes
            # of dequeued node u and decrease their in-degree
            # by 1
            for i in self.graph[u]:
                in_degree[i] -= 1
                # If in-degree becomes zero, add it to queue
                if in_degree[i] == 0:
                    queue.append(i)
 
            cnt += 1
 
        # Check if there was a cycle
        if cnt != self.V:
            print ("There exists a cycle in the graph")
        else :
            # Print topological order
            print (top_order)
 
 
g = Graph(6)
g.addEdge(5, 2);
g.addEdge(5, 0);
g.addEdge(4, 0);
g.addEdge(4, 1);
g.addEdge(2, 3);
g.addEdge(3, 1);
 
print ("Following is a Topological Sort of the given graph")
g.topologicalSort()
 
# This code is contributed by Neelam Yadav
C#
Javascript
Output
Following is a Topological Sort of
4 5 2 0 3 1 
Complexity Analysis: 
 

Time Complexity: O(V+E). 
The outer for loop will be executed V number of times and the inner for loop will be executed E number of times.
Auxiliary Space: O(V). 
The queue needs to store all the vertices of the graph. So the space required is O(V)
This article is contributed by Chirag Agarwal. Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above



Like
Previous
All Topological Sorts of a Directed Acyclic Graph
Next
Maximum edges that can be added to DAG so that it remains DAG
Related Articles
1.
Topological Sorting
2.
All Topological Sorts of a Directed Acyclic Graph
3.
Topological Sort of a graph using departure time of vertex
4.
Lexicographically Smallest Topological Ordering
5.
Detect cycle in Directed Graph using Topological Sort
6.
Edge Relaxation Property for Dijkstra’s Algorithm and Bellman Ford's Algorithm
7.
C++ Program For Sorting A Linked List Of 0s, 1s And 2s
8.
C Program For Sorting A Linked List Of 0s, 1s And 2s
9.
Java Program For Sorting A Linked List Of 0s, 1s And 2s
10.
Python Program For Sorting A Linked List Of 0s, 1s And 2s
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
andrew1234
choudharyrajat1311
avanitrachhadiya2155
ruhelaa48
amartyaniel20
cavi4762
tbbt
Article Tags :
Accolite
Amazon
Flipkart
Microsoft
Moonfrog Labs
OYO Rooms
Topological Sorting
Graph
Practice Tags :
Accolite
Amazon
Flipkart
Microsoft
Moonfrog Labs
OYO Rooms
Graph
Report Issue