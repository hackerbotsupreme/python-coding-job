Dial’s Algorithm (Optimized Dijkstra for small range weights)

Difficulty Level : Expert
Last Updated : 28 Dec, 2022
Read
Discuss
Courses
Practice
Video
Dijkstra’s shortest path algorithm runs in O(Elog V) time when implemented with adjacency list representation (See C implementation and STL based C++ implementations for details).

Input : Source = 0, Maximum Weight W = 14
Output : 
Vertex       Distance from Source
    0                   0
    1                   4
    2                  12
    3                  19
    4                  21
    5                  11
    6                   9
    7                   8
   8                 14

Consider the below Graph:


 The shortest path from source 0

We have learned about how to find the shortest path from a given source vertex to all other vertex using Dijkstra’s shortest path algorithm with the Time Complexity of O(E log V) in this article.

Can we optimize Dijkstra’s shortest path algorithm to work better than O(E log V) if the maximum weight is small (or the range of edge weights is small)? For example, in the above diagram, the maximum weight is 14. Many times the range of weights on edges is in a small range (i.e. all edge weights can be mapped to 0, 1, 2.. w where w is a small number). In that case, Dijkstra’s algorithm can be modified by using different data structures, and buckets, which is called dial implementation of Dijkstra’s algorithm. time complexity is O(E + WV) where W is the maximum weight on any edge of the graph, so we can see that, if W is small then this implementation runs much faster than the traditional algorithm. The following are important observations.

The maximum distance between any two nodes can be at max w(V – 1) (w is maximum edge weight and we can have at max V-1 edges between two vertices).
In the Dijkstra algorithm, distances are finalized in non-decreasing, i.e., the distance of the closer (to given source) vertices is finalized before the distant vertices.
Algorithm Below is the complete algorithm:

Maintains some buckets, numbered 0, 1, 2,…,wV.
Bucket k contains all temporarily labeled nodes with a distance equal to k.
Nodes in each bucket are represented by a list of vertices.
Buckets 0, 1, 2,..wV are checked sequentially until the first non-empty bucket is found. Each node contained in the first non-empty bucket has the minimum distance label by definition.
One by one, these nodes with minimum distance labels are permanently labeled and deleted from the bucket during the scanning process.
Thus operations involving vertex include:
Checking if a bucket is empty
Adding a vertex to a bucket
Deleting a vertex from a bucket.
The position of a temporarily labeled vertex in the buckets is updated accordingly when the distance label of a vertex changes.
The process is repeated until all vertices are permanently labeled (or the distances of all vertices are finalized).
 Implementation Since the maximum distance can be w(V – 1), we create wV buckets (more for simplicity of code) for implementation of the algorithm which can be large if w is big. 



C++
Python3
from typing import List, Tuple
INF = 0x3f3f3f3f
 
# This class represents a directed graph using adjacency list representation
class Graph:
    def __init__(self, V: int):
        # No. of vertices
        self.V = V
         
        # In a weighted graph, we need to store vertex and weight pair for every edge
        self.adj = [[] for _ in range(V)]
 
    # function to add an edge to graph
    def addEdge(self, u: int, v: int, w: int):
        self.adj[u].append((v, w))
        self.adj[v].append((u, w))
 
    # Prints shortest paths from src to all other vertices.
    # W is the maximum weight of an edge
    def shortestPath(self, src: int, W: int):
        # With each distance, iterator to that vertex in its bucket is stored so that vertex can be deleted
        # in O(1) at time of updation. So dist[i][0] = distance of ith vertex from src vertex
        # dist[i][1] = iterator to vertex i in bucket number
        dist = [[INF, None] for _ in range(self.V)]
 
        # Initialize distance of source vertex
        dist[src][0] = 0
 
        # Create buckets B[].
        # B[i] keep vertex of distance label i
        B = [[] for _ in range(W * self.V + 1)]
        B[0].append(src)
 
        idx = 0
        while True:
            # Go sequentially through buckets till one non-empty bucket is found
            while len(B[idx]) == 0 and idx < W * self.V:
                idx += 1
 
            # If all buckets are empty, we are done.
            if idx == W * self.V:
                break
 
            # Take top vertex from bucket and pop it
            u = B[idx][0]
            B[idx].pop(0)
 
            # Process all adjacents of extracted vertex
            # 'u' and update their distances if required.
            for v, weight in self.adj[u]:
                du = dist[u][0]
                dv = dist[v][0]
 
                # If there is shorted path to v through u.
                if dv > du + weight:
                    # If dv is not INF then it must be in
                    # B[dv] bucket, so erase its entry using iterator
                    # in O(1)
                    if dv != INF:
                        B[dv].remove(v)
 
                    # updating the distance
                    dist[v][0] = du + weight
                    dv = dist[v][0]
 
                    # pushing vertex v into updated distance's bucket
                    B[dv].append(v)
 
                    # storing updated iterator in dist[v][1]
                    dist[v][1] = len(B[dv]) - 1
 
        # Print shortest distances stored in dist[]
        print("Vertex Distance from Source")
        for i in range(self.V):
            print(f"{i}     {dist[i][0]}")
 
# Driver program to test methods of graph class
def main():
    # create the graph given in above figure
    V = 9
    W = 14
    g = Graph(V)
 
    g.addEdge(0, 1, 4)
    g.addEdge(0, 7, 8)
    g.addEdge(1, 2, 8)
    g.addEdge(1, 7, 11)
    g.addEdge(2, 3, 7)
    g.addEdge(2, 8, 2)
    g.addEdge(2, 5, 4)
    g.addEdge(3, 4, 9)
    g.addEdge(3, 5, 14)
    g.addEdge(4, 5, 10)
    g.addEdge(5, 6, 2)
    g.addEdge(6, 7, 1)
    g.addEdge(6, 8, 6)
    g.addEdge(7, 8, 7)
 
    g.shortestPath(0, W)
 
if __name__ == "__main__":
    main()
     
# This code is contributed by sanjanasikarwar24
C#
Output:

Vertex Distance from Source
0     0
1     4
2     12
3     19
4     21
5     11
6     9
7     8
8     14
 Illustration: Below is the step-by-step illustration taken from here. step1 step2 step3 step4 step5 step6 step7 step8 step10 step11 step12 step13  

This article is contributed by Utkarsh Trivedi. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
9
Previous
Dijkstra's Shortest Path Algorithm | Greedy Algo-7
Next
Correctness of Greedy Algorithms
Related Articles
1.
Find optimal weights which can be used to weigh all the weights in the range [1, X]
2.
Why does Dijkstra's Algorithm fail on negative weights?
3.
Edge Relaxation Property for Dijkstra’s Algorithm and Bellman Ford's Algorithm
4.
Union-Find Algorithm | (Union By Rank and Find by Optimized Path Compression)
5.
Dijkstra’s Algorithm for Adjacency List Representation | Greedy Algo-8
6.
Printing Paths in Dijkstra's Shortest Path Algorithm
7.
Dijkstra’s shortest path algorithm using set in STL
8.
Dijkstra's Shortest Path Algorithm using priority_queue of STL
9.
Java Program for Dijkstra's Algorithm with Path Printing
10.
C / C++ Program for Dijkstra's shortest path algorithm | Greedy Algo-7
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Expert
Easy
Normal
Medium
Hard
Expert
Improved By :
surinderdawra388
adityakumar129
cavi4762
sanjanasikarwar24
Article Tags :
Dijkstra
Shortest Path
Graph
Greedy
Practice Tags :
Graph
Greedy
Shortest Path
Improve Article
Report Issue