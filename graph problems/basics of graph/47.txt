0-1 BFS (Shortest Path in a Binary Weight Graph)

Difficulty Level : Medium
Read
Discuss(30)
Courses
Practice
Video
Given a graph where every edge has weight as either 0 or 1. A source vertex is also given in the graph. Find the shortest path from source vertex to every other vertex. 
Example: 
 

Input : Source Vertex = 0 and below graph 


Output : Shortest distances from given source
         0 0 1 1 2 1 2 1 2

Explanation : 
Shortest distance from 0 to 0 is 0
Shortest distance from 0 to 1 is 0
Shortest distance from 0 to 2 is 1
..................
 

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
In normal BFS of a graph all edges have equal weight but in 0-1 BFS some edges may have 0 weight and some may have 1 weight. In this we will not use bool array to mark visited nodes but at each step we will check for the optimal distance condition. We use double ended queue to store the node. While performing BFS if a edge having weight = 0 is found node is pushed at front of double ended queue and if a edge having weight = 1 is found, it is pushed at back of double ended queue.
The approach is similar to Dijkstra that the if the shortest distance to node is relaxed by the previous node then only it will be pushed in the queue. 
The above idea works in all cases, when pop a vertex (like Dijkstra), it is the minimum weight vertex among remaining vertices. If there is a 0 weight vertex adjacent to it, then this adjacent has same distance. If there is a 1 weight adjacent, then this adjacent has maximum distance among all vertices in dequeue (because all other vertices are either adjacent of currently popped vertex or adjacent of previously popped vertices).
Below is the implementation of the above idea. 
 

C++
Java
Python3
# Python3 program to implement single source
# shortest path for a Binary Graph
from sys import maxsize as INT_MAX
from collections import deque
 
# no.of vertices
V = 9
 
# a structure to represent edges
class node:
    def __init__(self, to, weight):
 
        # two variable one denote the node
        # and other the weight
        self.to = to
        self.weight = weight
 
# vector to store edges
edges = [0] * V
for i in range(V):
    edges[i] = []
 
# Prints shortest distance from
# given source to every other vertex
def zeroOneBFS(src: int):
 
    # Initialize distances from given source
    dist = [0] * V
    for i in range(V):
        dist[i] = INT_MAX
 
    # double ende queue to do BFS.
    Q = deque()
    dist[src] = 0
    Q.append(src)
 
    while Q:
        v = Q[0]
        Q.popleft()
 
        for i in range(len(edges[v])):
 
            # checking for the optimal distance
            if (dist[edges[v][i].to] >
                dist[v] + edges[v][i].weight):
                dist[edges[v][i].to] = dist[v] + edges[v][i].weight
 
                # Put 0 weight edges to front and 1 weight
                # edges to back so that vertices are processed
                # in increasing order of weights.
                if edges[v][i].weight == 0:
                    Q.appendleft(edges[v][i].to)
                else:
                    Q.append(edges[v][i].to)
 
    # printing the shortest distances
    for i in range(V):
        print(dist[i], end = " ")
    print()
 
def addEdge(u: int, v: int, wt: int):
    edges[u].append(node(v, wt))
    edges[u].append(node(v, wt))
 
# Driver Code
if __name__ == "__main__":
 
    addEdge(0, 1, 0)
    addEdge(0, 7, 1)
    addEdge(1, 7, 1)
    addEdge(1, 2, 1)
    addEdge(2, 3, 0)
    addEdge(2, 5, 0)
    addEdge(2, 8, 1)
    addEdge(3, 4, 1)
    addEdge(3, 5, 1)
    addEdge(4, 5, 1)
    addEdge(5, 6, 1)
    addEdge(6, 7, 1)
    addEdge(7, 8, 1)
 
    # source node
    src = 0
    zeroOneBFS(src)
 
# This code is contributed by
# sanjeev2552
Javascript
Output: 
 

0 0 1 1 2 1 2 1 2 
This problem can also be solved by Dijkstra but the time complexity will be O(E + V Log V) whereas by BFS it will be O(V+E).
Reference : 
http://codeforces.com/blog/entry/22276
This article is contributed by Ayush Jha. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
 





Like
34
Previous
Combinatorial Game Theory | Set 1 (Introduction)
Next
Trie | (Insert and Search)
Related Articles
1.
Shortest Path in a weighted Graph where weight of an edge is 1 or 2
2.
Difference between the shortest and second shortest path in an Unweighted Bidirectional Graph
3.
Difference between BFS and Dijkstra's algorithms when looking for shortest path?
4.
Shortest distance between two nodes in Graph by reducing weight of an edge by half
5.
Check if alternate path exists from U to V with smaller individual weight in a given Graph
6.
Path from a given source to a given destination having Kth largest weight in a Graph
7.
Shortest path from source to destination such that edge weights along path are alternatively increasing and decreasing
8.
Shortest path with exactly k edges in a directed and weighted graph
9.
Check if given path between two nodes of a graph represents a shortest paths
10.
Shortest path in a graph from a source S to destination D with exactly K edges for multiple Queries
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
Ankit Bansal 2
sanjeev2552
avanitrachhadiya2155
Article Tags :
BFS
deque
Shortest Path
Graph
Practice Tags :
BFS
Graph
Shortest Path