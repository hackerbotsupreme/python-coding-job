Shortest Path in Directed Acyclic Graph

Difficulty Level : Medium
Last Updated : 23 Jan, 2023
Read
Discuss(70+)
Courses
Practice
Video
Given a Weighted Directed Acyclic Graph and a source vertex in the graph, find the shortest paths from given source to all other vertices.

Recommended Problem
Shortest path from 1 to n
Mathematical
Graph
+3 more
Morgan Stanley
Accolite
+3 more
Solve Problem
Submission count: 47.3K
For a general weighted graph, we can calculate single source shortest distances in O(VE) time using Bellman–Ford Algorithm. For a graph with no negative weights, we can do better and calculate single source shortest distances in O(E + VLogV) time using Dijkstra’s algorithm. Can we do even better for Directed Acyclic Graph (DAG)? We can calculate single source shortest distances in O(V+E) time for DAGs. The idea is to use Topological Sorting.

We initialize distances to all vertices as infinite and distance to source as 0, then we find a topological sorting of the graph. Topological Sorting of a graph represents a linear ordering of the graph (See below, figure (b) is a linear representation of figure (a) ). Once we have topological order (or linear representation), we one by one process all vertices in topological order. For every vertex being processed, we update distances of its adjacent using distance of current vertex.

Following figure is taken from this source. It shows step by step process of finding shortest paths. 
 

TopologicalSort

 

TopologicalSort

Following is complete algorithm for finding shortest distances. 

Initialize dist[] = {INF, INF, ….} and dist[s] = 0 where s is the source vertex. 
Create a topological order of all vertices. 
Do following for every vertex u in topological order. 
………..Do following for every adjacent vertex v of u 
………………if (dist[v] > dist[u] + weight(u, v)) 
………………………dist[v] = dist[u] + weight(u, v) 
 
Implementation:

C++
Java
Python3
# Python program to find single source shortest paths
# for Directed Acyclic Graphs Complexity :O(V+E)
from collections import defaultdict
 
# Graph is represented using adjacency list. Every
# node of adjacency list contains vertex number of
# the vertex to which edge connects. It also contains
# weight of the edge
class Graph:
    def __init__(self,vertices):
 
        self.V = vertices # No. of vertices
 
        # dictionary containing adjacency List
        self.graph = defaultdict(list)
 
    # function to add an edge to graph
    def addEdge(self,u,v,w):
        self.graph[u].append((v,w))
 
 
    # A recursive function used by shortestPath
    def topologicalSortUtil(self,v,visited,stack):
 
        # Mark the current node as visited.
        visited[v] = True
 
        # Recur for all the vertices adjacent to this vertex
        if v in self.graph.keys():
            for node,weight in self.graph[v]:
                if visited[node] == False:
                    self.topologicalSortUtil(node,visited,stack)
 
        # Push current vertex to stack which stores topological sort
        stack.append(v)
 
 
    ''' The function to find shortest paths from given vertex.
        It uses recursive topologicalSortUtil() to get topological
        sorting of given graph.'''
    def shortestPath(self, s):
 
        # Mark all the vertices as not visited
        visited = [False]*self.V
        stack =[]
 
        # Call the recursive helper function to store Topological
        # Sort starting from source vertices
        for i in range(self.V):
            if visited[i] == False:
                self.topologicalSortUtil(s,visited,stack)
 
        # Initialize distances to all vertices as infinite and
        # distance to source as 0
        dist = [float("Inf")] * (self.V)
        dist[s] = 0
 
        # Process vertices in topological order
        while stack:
 
            # Get the next vertex from topological order
            i = stack.pop()
 
            # Update distances of all adjacent vertices
            for node,weight in self.graph[i]:
                if dist[node] > dist[i] + weight:
                    dist[node] = dist[i] + weight
 
        # Print the calculated shortest distances
        for i in range(self.V):
            print (("%d" %dist[i]) if dist[i] != float("Inf") else  "Inf" ,end=" ")
 
 
g = Graph(6)
g.addEdge(0, 1, 5)
g.addEdge(0, 2, 3)
g.addEdge(1, 3, 6)
g.addEdge(1, 2, 2)
g.addEdge(2, 4, 4)
g.addEdge(2, 5, 2)
g.addEdge(2, 3, 7)
g.addEdge(3, 4, -1)
g.addEdge(4, 5, -2)
 
# source = 1
s = 1
 
print ("Following are shortest distances from source %d " % s)
g.shortestPath(s)
 
# This code is contributed by Neelam Yadav
C#
Output
Following are shortest distances from source 1 nINF 0 2 6 5 3 
Time Complexity: Time complexity of topological sorting is O(V+E). After finding topological order, the algorithm process all vertices and for every vertex, it runs a loop for all adjacent vertices. Total adjacent vertices in a graph is O(E). So the inner loop runs O(V+E) times. Therefore, overall time complexity of this algorithm is O(V+E).

Auxiliary Space : O(V+E)



Like
Previous
Johnson's algorithm for All-pairs shortest paths
Next
Shortest path in an unweighted graph
Related Articles
1.
Longest Path in a Directed Acyclic Graph
2.
Longest Path in a Directed Acyclic Graph | Set 2
3.
Longest path in a directed Acyclic graph | Dynamic Programming
4.
Assign directions to edges so that the directed graph remains acyclic
5.
All Topological Sorts of a Directed Acyclic Graph
6.
Clone a Directed Acyclic Graph
7.
Minimum time taken by each job to be completed given by a Directed Acyclic Graph
8.
Find the Dominators for every vertex in a given DAG (Directed Acyclic Graph)
9.
Maximum difference between node and its ancestor in a Directed Acyclic Graph ( DAG )
10.
Number of paths from source to destination in a directed acyclic graph
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
Rajput-Ji
surinderdawra388
simmytarika5
amartyaghoshgfg
siddharthsinghvats
hardikkoriintern
Article Tags :
Shortest Path
Topological Sorting
Graph
Practice Tags :
Graph
Shortest Path
Report Issue