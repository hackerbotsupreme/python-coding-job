Bridges in a graph

Difficulty Level : Hard
Last Updated : 28 Sep, 2022
Read
Discuss(80+)
Courses
Practice
Video
Given an undirected Graph, The task is to find the Bridges in this Graph. 

An edge in an undirected connected graph is a bridge if removing it disconnects the graph. For a disconnected undirected graph, definition is similar, a bridge is an edge removing which increases number of disconnected components. 

Like Articulation Points, bridges represent vulnerabilities in a connected network and are useful for designing reliable networks.

Examples:

Input: 

Bridge1

Output: (0, 3) and (3, 4)



Input:

Bridge2

Output: (1, 6)

Input:

Bridge3

Output: (0, 1), (1, 2), and (2, 3)

Naive Approach: Below is the idea to solve the problem:

One by one remove all edges and see if removal of an edge causes disconnected graph. 

Following the below steps to Implement the idea:

For every edge (u, v), do the following:
Remove (u, v) from the graph 
See if the graph remains connected (either use BFS or DFS) 
Add (u, v) back to the graph.
Time Complexity: O(E*(V+E)) for a graph represented by adjacency list.
Auxiliary Space: O(V+E)

Find Bridges in a graph using DFS traversal
 Below is the idea to solve the problem:

The idea is similar to O(V+E) algorithm for Articulation Points. Do DFS traversal of the given graph. In DFS tree an edge (u, v) (u is parent of v in DFS tree) is bridge if there does not exist any other alternative edge to reach u or an ancestor of u from subtree rooted with v. 

As discussed in the post, the value low[v] indicates the earliest visited vertex reachable from subtree rooted with v. The condition for an edge (u, v) to be a bridge is, low[v] > disc[u]. 

Below is the implementation of the above approach:

C++
Java
Python3
# Python program to find bridges in a given undirected graph
#Complexity : O(V+E)
  
from collections import defaultdict
  
#This class represents an undirected graph using adjacency list representation
class Graph:
  
    def __init__(self,vertices):
        self.V= vertices #No. of vertices
        self.graph = defaultdict(list) # default dictionary to store graph
        self.Time = 0
  
    # function to add an edge to graph
    def addEdge(self,u,v):
        self.graph[u].append(v)
        self.graph[v].append(u)
  
    '''A recursive function that finds and prints bridges
    using DFS traversal
    u --> The vertex to be visited next
    visited[] --> keeps track of visited vertices
    disc[] --> Stores discovery times of visited vertices
    parent[] --> Stores parent vertices in DFS tree'''
    def bridgeUtil(self,u, visited, parent, low, disc):
 
        # Mark the current node as visited and print it
        visited[u]= True
 
        # Initialize discovery time and low value
        disc[u] = self.Time
        low[u] = self.Time
        self.Time += 1
 
        #Recur for all the vertices adjacent to this vertex
        for v in self.graph[u]:
            # If v is not visited yet, then make it a child of u
            # in DFS tree and recur for it
            if visited[v] == False :
                parent[v] = u
                self.bridgeUtil(v, visited, parent, low, disc)
 
                # Check if the subtree rooted with v has a connection to
                # one of the ancestors of u
                low[u] = min(low[u], low[v])
 
 
                ''' If the lowest vertex reachable from subtree
                under v is below u in DFS tree, then u-v is
                a bridge'''
                if low[v] > disc[u]:
                    print ("%d %d" %(u,v))
     
                     
            elif v != parent[u]: # Update low value of u for parent function calls.
                low[u] = min(low[u], disc[v])
 
 
    # DFS based function to find all bridges. It uses recursive
    # function bridgeUtil()
    def bridge(self):
  
        # Mark all the vertices as not visited and Initialize parent and visited,
        # and ap(articulation point) arrays
        visited = [False] * (self.V)
        disc = [float("Inf")] * (self.V)
        low = [float("Inf")] * (self.V)
        parent = [-1] * (self.V)
 
        # Call the recursive helper function to find bridges
        # in DFS tree rooted with vertex 'i'
        for i in range(self.V):
            if visited[i] == False:
                self.bridgeUtil(i, visited, parent, low, disc)
         
  
# Create a graph given in the above diagram
g1 = Graph(5)
g1.addEdge(1, 0)
g1.addEdge(0, 2)
g1.addEdge(2, 1)
g1.addEdge(0, 3)
g1.addEdge(3, 4)
 
  
print ("Bridges in first graph ")
g1.bridge()
 
g2 = Graph(4)
g2.addEdge(0, 1)
g2.addEdge(1, 2)
g2.addEdge(2, 3)
print ("\nBridges in second graph ")
g2.bridge()
 
  
g3 = Graph (7)
g3.addEdge(0, 1)
g3.addEdge(1, 2)
g3.addEdge(2, 0)
g3.addEdge(1, 3)
g3.addEdge(1, 4)
g3.addEdge(1, 6)
g3.addEdge(3, 5)
g3.addEdge(4, 5)
print ("\nBridges in third graph ")
g3.bridge()
 
 
#This code is contributed by Neelam Yadav
C#
Javascript
Output
Bridges in first graph 
3 4
0 3

Bridges in second graph 
2 3
1 2
0 1

Bridges in third graph 
1 6
Time Complexity: O(V+E), 

The above approach uses simple DFS with additional arrays. 
So time complexity is the same as DFS which is O(V+E) for adjacency list representation of the graph.
Auxiliary Space: O(BM) where B is the maximum branching factor of the search tree and M is the maximum depth of the state space.





Like
100
Previous
Fleury's Algorithm for printing Eulerian Path or Circuit
Next
Articulation Points (or Cut Vertices) in a Graph
Related Articles
1.
Maximum number of bridges in a path of a given graph
2.
Minimum bridges required to be crossed to reach Nth city
3.
Paths to travel each nodes using each edge (Seven Bridges of KÃ¶nigsberg)
4.
Detect cycle in the graph using degrees of nodes of graph
5.
Convert the undirected graph into directed graph such that there is no path of length greater than 1
6.
Maximum number of edges that N-vertex graph can have such that graph is Triangle free | Mantel's Theorem
7.
Convert undirected connected graph to strongly connected directed graph
8.
Java Program to Find Independent Sets in a Graph using Graph Coloring
9.
Connect a graph by M edges such that the graph does not contain any cycle and Bitwise AND of connected vertices is maximum
10.
Java Program to Find Independent Sets in a Graph By Graph Coloring
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
FurqanAziz
MatthiasKoerber
Rajput-Ji
avanitrachhadiya2155
varshagumber28
madhavchitlangia
gabaa406
amartyaghoshgfg
simmytarika5
prophet1999
hardikkoriintern
aashutoshparoha
Article Tags :
graph-connectivity
Graph
Practice Tags :
Graph