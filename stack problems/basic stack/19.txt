Create a customized data structure which evaluates functions in O(1)

Difficulty Level : Easy
Last Updated : 08 Sep, 2022
Read
Discuss
Courses
Practice
Video
Create a customized data structure such that it has functions :- 

GetLastElement(); 
RemoveLastElement(); 
AddElement() 
GetMin()
All the functions should be of O(1)

Question Source : amazon interview questions

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Approach : 


create a custom stack of type structure with two elements, (element, min_till_now) 
implement the functions on this custom data type 
Implementation:

C++
Java
Python3
# Program to demonstrate customized data structure
# which supports functions in O(1)
import sys
 
stack = []
Min = sys.maxsize
 
# Utility function for adding a new element
def addElement(x):
     
    global Min, stack
    if (len(stack) == 0 or x < Min):
        Min = x
    pair = [x, Min]
    stack.append(pair)
    print(x, "inserted successfully")
 
# Utility function for returning last
# element of stack
def getLastElement():
     
    global Min, stack
     
    if (len(stack) == 0):
        print("UnderFlow Error")
        return -1
    else:
        return stack[-1][0]
 
# Utility function for removing last
# element successfully;
def removeLastElement():
     
    global Min, stack
    if (len(stack) == 0):
        print("UnderFlow Error")
    elif (len(stack) > 1):
        Min = stack[-2][1]
    else:
        Min = sys.maxsize
    stack.pop()
     
    print("removed successfully")
 
# Utility function for returning min
# element till now;
def getMin():
     
    global Min, stack
    if (len(stack) == 0):
        print("UnderFlow Error")
        return -1
         
    return stack[-1][1]
 
# Driver code
addElement(5)
addElement(7)
addElement(3)
print("min element ::", getMin())
removeLastElement()
addElement(2)
addElement(9)
print("Last element ::", getLastElement())
addElement(0)
print("min element ::", getMin())
removeLastElement()
addElement(11)
print("min element ::", getMin())
 
# This code is contributed by mukesh07
C#
Javascript
Output
5 inserted successfully
7 inserted successfully
3 inserted successfully
min element  :: 3
removed successfully
2 inserted successfully
9 inserted successfully
Last element :: 9
0 inserted successfully
min element  :: 0
removed successfully
11 inserted successfully
min element  :: 2
Time complexity: Each function runs in O(1)



Auxiliary space: O(n) for stack

This article is contributed by Mandeep Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 





Like
21
Previous
Design a stack that supports getMin() in O(1) time and O(1) extra space
Next
Implement a stack using single queue
Related Articles
1.
Find the element before which all the elements are smaller than it, and after which all are greater
2.
Design a data structure that supports insert, delete, search and getRandom in constant time
3.
Introduction to Stack - Data Structure and Algorithm Tutorials
4.
Implement Dynamic Multi Stack (K stacks) using only one Data Structure
5.
What is Data Structure: Types, Classifications and Applications
6.
Design and Implement Special Stack Data Structure | Added Space Optimized Version
7.
Important functions of STL Components in C++
8.
Remove characters from the first string which are present in the second string
9.
Find the maximum element in an array which is first increasing and then decreasing
10.
Find a peak element which is not smaller than its neighbours
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
AakashYadav4
rameshtravel07
mukesh07
divyeshrabadiya07
hardikkoriintern
himanshiyadav7011
Article Tags :
Amazon
Stack
Practice Tags :
Amazon
Stack