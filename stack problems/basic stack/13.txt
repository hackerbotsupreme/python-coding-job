Design and Implement Special Stack Data Structure | Added Space Optimized Version

Difficulty Level : Medium
Last Updated : 27 Jan, 2023
Read
Discuss(180)
Courses
Practice
Video
Question: Design a Data Structure SpecialStack that supports all the stack operations like push(), pop(), isEmpty(), isFull() and an additional operation getMin() which should return minimum element from the SpecialStack. All these operations of SpecialStack must be O(1). To implement SpecialStack, you should only use standard Stack data structure and no other data structure like arrays, list, . etc. 

Example: 

Consider the following SpecialStack
16  --> TOP
15
29
19
18

When getMin() is called it should 
return 15, which is the minimum 
element in the current stack. 

If we do pop two times on stack, 
the stack becomes
29  --> TOP
19
18

When getMin() is called, it should 
return 18 which is the minimum in 
the current stack.
Recommended Problem
Special Stack
Stack
STL
+1 more
Paytm
VMWare
+11 more
Solve Problem
Submission count: 69K
Solution:

 Use two stacks: one to store actual stack elements and the other as an auxiliary stack to store minimum values. The idea is to do push() and pop() operations in such a way that the top of the auxiliary stack is always the minimum. Let us see how push() and pop() operations work.

Push(int x) // inserts an element x to Special Stack 

1) push x to the first stack (the stack with actual elements) 
2) compare x with the top element of the second stack (the auxiliary stack). Let the top element be y. 
If x is smaller than y then push x to the auxiliary stack. 
If x is greater than y then push y to the auxiliary stack.
int Pop() // removes an element from Special Stack and return the removed element 

pop the top element from the auxiliary stack. 
pop the top element from the actual stack and return it. Step 1 is necessary to make sure that the auxiliary stack is also updated for future operations.
int getMin() // returns the minimum element from Special Stack 



Return the top element of the auxiliary stack.
We can see that all the above operations are O(1). 

Let us see an example. Let us assume that both stacks are initially empty and 18, 19, 29, 15, and 16 are inserted to the SpecialStack. 

When we insert 18, both stacks change to following.
Actual Stack
18 <--- top     
Auxiliary Stack
18 <---- top

When 19 is inserted, both stacks change to following.
Actual Stack
19 <--- top     
18
Auxiliary Stack
18 <---- top
18

When 29 is inserted, both stacks change to following.
Actual Stack
29 <--- top     
19
18
Auxiliary Stack
18 <---- top
18
18

When 15 is inserted, both stacks change to following.
Actual Stack
15 <--- top     
29
19 
18
Auxiliary Stack
15 <---- top
18
18
18

When 16 is inserted, both stacks change to following.
Actual Stack
16 <--- top     
15
29
19 
18
Auxiliary Stack
15 <---- top
15
18
18
18
The following is the implementation for SpecialStack class. In the below implementation, SpecialStack inherits from Stack and has one Stack object min which works as an auxiliary stack.

C++
Java
Python3
# Python3 program for the
# above approach
# A simple stack class with 
# basic stack functionalities
class stack:
 
  def __init__(self):
 
    self.array = []
    self.top = -1
    self.max = 100 
 
  # Stack's member method to check
  # if the stack is empty
  def isEmpty(self):
 
    if self.top == -1:
      return True
    else:
      return False 
 
  # Stack's member method to check
  # if the stack is full 
  def isFull(self): 
     
    if self.top == self.max - 1:
      return True
    else:
      return False  
 
  # Stack's member method to
  # insert an element to it  
 
  def push(self, data):
 
    if self.isFull():
      print('Stack OverFlow')
      return
    else:
      self.top += 1
      self.array.append(data)    
 
  # Stack's member method to
  # remove an element from it
  def pop(self):
 
    if self.isEmpty():
      print('Stack UnderFlow')
      return
    else:
      self.top -= 1
      return self.array.pop()
 
# A class that supports all the stack 
# operations and one additional
# operation getMin() that returns the
# minimum element from stack at
# any time.  This class inherits from
# the stack class and uses an
# auxiliary stack that holds
# minimum elements 
class SpecialStack(stack):
 
  def __init__(self):
    super().__init__()
    self.Min = stack() 
 
  # SpecialStack's member method to
  # insert an element to it. This method
  # makes sure that the min stack is also
  # updated with appropriate minimum
  # values
  def push(self, x):
 
    if self.isEmpty():
      super().push(x)
      self.Min.push(x)
    else:
      super().push(x)
      y = self.Min.pop()
      self.Min.push(y)
      if x <= y:
        self.Min.push(x)
      else:
        self.Min.push(y) 
 
  # SpecialStack's member method to 
  # remove an element from it. This
  # method removes top element from
  # min stack also.
  def pop(self):
 
    x = super().pop()
    self.Min.pop()
    return x 
 
  # SpecialStack's member method
  # to get minimum element from it.
  def getmin(self):
 
    x = self.Min.pop()
    self.Min.push(x)
    return x
 
# Driver code
if __name__ == '__main__':
   
  s = SpecialStack()
  s.push(10)
  s.push(20)
  s.push(30)
  print(s.getmin())
  s.push(5)
  print(s.getmin())
 
# This code is contributed by rachitkatiyar99
Javascript
Output
10
5
CPP-STL-Self-Paced-Course

Complexity Analysis: 

Time Complexity: 
For insert operation: O(1) (As insertion ‘push’ in a stack takes constant time)
For delete operation: O(1) (As deletion ‘pop’ in a stack takes constant time)
For ‘Get Min’ operation: O(1) (As we have used an auxiliary stack which has it’s top as the minimum element)
Auxiliary Space: O(n). 
Use of auxiliary stack for storing values.
Space Optimized Version 

The above approach can be optimized. We can limit the number of elements in the auxiliary stack. We can push only when the incoming element of the main stack is smaller than or equal to the top of the auxiliary stack. Similarly during pop, if the pop-off element equal to the top of the auxiliary stack, remove the top element of the auxiliary stack. Following is the modified implementation of push() and pop(). 

C++
Java
Python3
''' SpecialStack's member method to
insert an element to it. This method
makes sure that the min stack is
also updated with appropriate minimum
values '''
 
def push(x):
    if (isEmpty() == True):
        super.append(x);
        min.append(x);
     
    else:
        super.append(x);
        y = min.pop();
        min.append(y);
 
        ''' push only when the incoming
           element of main stack is smaller
        than or equal to top of auxiliary stack '''
        if (x <= y):
            min.append(x);
     
 
 
''' SpecialStack's member method to
   remove an element from it. This method
   removes top element from min stack also. '''
def pop():
    x = super.pop();
    y = min.pop();
 
    ''' Push the popped element y back
       only if it is not equal to x '''
    if (y != x):
        min.append(y);
    return x;
 
 
# This code contributed by umadevi9616
C#
Javascript
Complexity Analysis:  

Time Complexity: 
For Insert operation: O(1) (As insertion ‘push’ in a stack takes constant time)
For Delete operation: O(1) (As deletion ‘pop’ in a stack takes constant time)
For ‘Get Min’ operation: O(1) (As we have used an auxiliary which has it’s top as the minimum element)
Auxiliary Space: O(n). 
The complexity in the worst case is the same as above but in other cases, it will take slightly less space than the above approach as repetition is neglected.
Further optimized O(1) time complexity and O(1) space complexity solution :

The above approach can be optimized further and the solution can be made to work in O(1) time complexity and O(1) space complexity. The idea is to store min element found till current insertion) along with all the elements as a reminder of a DUMMY_VALUE, and the actual element as a multiple of the DUMMY_VALUE.
For example, while pushing an element ‘e’ into the stack, store it as (e * DUMMY_VALUE + minFoundSoFar), this way we know what was the minimum value present in the stack at the time ‘e’ was being inserted.

To pop the actual value just return e/DUMMY_VALUE and set the new minimum as (minFoundSoFar % DUMMY_VALUE).

Note: Following method will fail if we try to insert DUMMY_VALUE in the stack, so we have to make our selection of DUMMY_VALUE carefully.
Let’s say the following elements are being inserted in the stack – 3 2 6 1 8 5

d is dummy value.

s is wrapper stack

top is top element of the stack

min is the minimum value at that instant when the elements were inserted/removed

The following steps shows the current state of the above variables at any instant – 

s.push(3);
min=3 //updated min as stack here is empty 
s = {3*d + 3}
top = (3*d + 3)/d = 3 
 
s.push(2);
min = 2 //updated min as min > current element
s = {3*d + 3-> 2*d + 2}
top = (2*d + 2)/d = 2
 
s.push(6);
min = 2
s = {3*d + 3-> 2*d + 2-> 6*d + 2}
top = (6*d + 2)/d = 6
 
s.push(1);
min = 1 //updated min as min > current element
s = {3*d + 3-> 2*d + 2-> 6*d + 2 -> 1*d + 1}
top = (1*d + 1)/d = 1
 
s.push(8);
min = 1
s = {3*d + 3-> 2*d + 2-> 6*d + 2 -> 1*d + 1 -> 8*d + 1}
top = (8*d + 1)/d = 8
 
s.push(5);
min = 1
s = {3*d + 3-> 2*d + 2-> 6*d + 2 -> 1*d + 1 -> 8*d + 1 -> 5*d + 1}
top = (5*d + 1)/d = 5
 
s.pop();
s = {3*d + 3 -> 2*d + 2 -> 6*d + 2 -> 1*d + 1 -> 8*d + 1 -> 5*d + 1}
top = (5*d + 1)/d = 5
min = (8*d + 1)%d = 1 // min is always remainder of the second top element in stack.
 
s.pop();
s = {3*d + 3 -> 2*d + 2-> 6*d + 2 -> 1*d + 1 -> 8*d + 1}
top = (8*d + 1)/d = 8
min = (1*d + 1)%d = 1
 
s.pop()
s = {3*d + 3 -> 2*d + 2-> 6*d + 2 -> 1*d + 1} 
top = (1*d + 1)/d = 1
min = (6*d + 2)%d = 2
 
s.pop()
s = {3*d + 3-> 2*d + 2-> 6*d + 2}
top = (6*d + 2)/d = 6
min = (2*d + 2)%d = 2
 
s.pop()
s = {3*d + 3-> 2*d + 2}
top = (2*d + 2)/d = 2
min = (3*d + 3)%d = 3
 
s.pop()
s = {3*d + 3}
top = (3*d + 3)/d = 3
min  = -1 // since stack is now empty
C++
Java
Python3
# A special stack having peek() pop() and
# push() along with additional getMin() that
# returns minimum value in a stack without
# using extra space and all operations in O(1)
# time.. ????
class SpecialStack:
 
    def __init__(self):
        # Sentinel value for min
        self.minm = -1
 
        # DEMO_VALUE
        SpecialStack.demoVal = 9999
        self.st = []
 
    def getMin(self):
        print("min is: ", self.minm)
 
    def push(self, val):
 
        # If stack is empty OR current element
        # is less than min, update min.
        if len(self.st) == 0 or val < self.minm:
            self.minm = val
 
        # Encode the current value with
        # demoVal, combine with min and
        # insert into stack
        self.st.append(val*self.demoVal + self.minm)
        print("pushed: ", val)
 
    def pop(self):
 
        # if stack is empty return -1
        if len(self.st) == 0:
            print("stack underflow")
            return -1
 
        val = self.st.pop()
 
        # If stack is empty, there would
        # be no min value present, so
        # make min as -1
        if len(self.st) != 0:
            self.minm = self.st[-1] % self.demoVal
        else:
            self.minm = -1
 
        print("popped: ", val // self.demoVal)
 
        # Decode actual value from
        # encoded value
        return val // self.demoVal
 
    def peek(self):
 
        # Decode actual value
        # from encoded value
        return self.st[-1] // self.demoVal
 
# Driver Code
if __name__ == "__main__":
    s = SpecialStack()
 
    arr = [3, 2, 6, 1, 8, 5, 5, 5, 5]
 
    for i in range(len(arr)):
        s.push(arr[i])
        s.getMin()
 
    print("\n")
    for i in range(len(arr)):
        s.pop()
        s.getMin()
 
        # This code is contributed by pankajkumar70792.
C#
Output
pushed: 3
min is: 3
pushed: 2
min is: 2
pushed: 6
min is: 2
pushed: 1
min is: 1
pushed: 8
min is: 1
pushed: 5
min is: 1
pushed: 5
min is: 1
pushed: 5
min is: 1
pushed: 5
min is: 1

popped: 5
min is: 1
popped: 5
min is: 1
popped: 5
min is: 1
popped: 5
min is: 1
popped: 8
min is: 1
popped: 1
min is: 2
popped: 6
min is: 2
popped: 2
min is: 3
popped: 3
min is: -1
Complexity Analysis:  

For push() operation: O(1) (As insertion ‘push’ in a stack takes constant time)
For pop() operation: O(1) (As pop operation in a stack takes constant time)

For ‘Get Min’ operation: O(1) (As we have maintained min variable throughout the code)

Auxiliary Space: O(1). No extra space is used.

Design a stack that supports getMin() in O(1) time and O(1) extra space
Thanks to @Venki, @swarup, and @Jing Huang for their inputs.
Please write comments if you find the above code incorrect, or find other ways to solve the same problem.





Like
154
Previous
Queue using Stacks
Next
Implement Stack using Queues
Related Articles
1.
Vertical Sum in Binary Tree | Set 2 (Space Optimized)
2.
Implement Dynamic Multi Stack (K stacks) using only one Data Structure
3.
Design a stack to retrieve original elements and return the minimum element in O(1) time and O(1) space
4.
Design a stack that supports getMin() in O(1) time and O(1) extra space
5.
Design a dynamic stack using arrays that supports getMin() in O(1) time and O(1) extra space
6.
Introduction to Stack - Data Structure and Algorithm Tutorials
7.
Design a data structure that supports insert, delete, search and getRandom in constant time
8.
How to implement Stack and Queue using ArrayDeque in Java
9.
Implement Stack and Queue using Deque
10.
Find maximum in a stack in O(1) time and O(1) extra space
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
bidibaaz123
zeekgeek
sinhaiscena
scisaif
vasutiwari409
architgwl2000
GauravRajput1
umadevi9616
germanshephered48
pankajkr_810
hardikkoriintern
Article Tags :
Adobe
Amazon
Linkedin
Paytm
STL
VMWare
Stack
Practice Tags :
Adobe
Amazon
Linkedin
Paytm
VMWare
Stack
STL
Improve Article
Report Issue