Stack | Set 4 (Evaluation of Postfix Expression)

Difficulty Level : Easy
Last Updated : 22 Aug, 2022
Read
Discuss(40+)
Courses
Practice
Video
 
The Postfix notation is used to represent algebraic expressions. The expressions written in postfix form are evaluated faster compared to infix notation as parenthesis is not required in postfix. We have discussed infix to postfix conversion. In this post, the evaluation of postfix expressions is discussed.

 
Recommended Problem
Evaluation of Postfix Expression
Stack
Data Structures
Solve Problem
Submission count: 63.5K
Example: 

Input: str = “2 3 1 * + 9 -“
Output: -4
Explanation: 

Scan 2, it’s a number, so push it to stack. Stack contains ‘2’ 
Scan 3, again a number, push it to stack, stack now contains ‘2 3’ (from bottom to top) 
Scan 1, again a number, push it to stack, stack now contains ‘2 3 1’ 
Scan *, it’s an operator, pop two operands from stack, apply the * operator on operands, we get 3*1 which results in 3. We push the result 3 to stack. The stack now becomes ‘2 3’. 
Scan +, it’s an operator, pop two operands from stack, apply the + operator on operands, we get 3 + 2 which results in 5. We push the result 5 to stack. The stack now becomes ‘5’. 
Scan 9, it’s a number, so we push it to the stack. The stack now becomes ‘5 9’. 
Scan -, it’s an operator, pop two operands from stack, apply the – operator on operands, we get 5 – 9 which results in -4. We push the result -4 to the stack. The stack now becomes ‘-4’. 
There are no more elements to scan, we return the top element from the stack (which is the only element left in a stack).
Input: str = “100 200 + 2 / 5 * 7 +”
Output: 757

Evaluation of Postfix Expression Using Stack:
Follow the steps mentioned below to evaluate postfix expression using stack:

Create a stack to store operands (or values). 
Scan the given expression from left to right and do the following for every scanned element. 
If the element is a number, push it into the stack 
If the element is an operator, pop operands for the operator from the stack. Evaluate the operator and push the result back to the stack 
When the expression is ended, the number in the stack is the final answer                                                                                                            
Below is the implementation of the above approach:

C++
C
Java
Python3
# Python program to evaluate value of a postfix expression
 
# Class to convert the expression
class Evaluate:
     
    # Constructor to initialize the class variables
    def __init__(self, capacity):
        self.top = -1
        self.capacity = capacity
        # This array is used a stack
        self.array = []
     
    # check if the stack is empty
    def isEmpty(self):
        return True if self.top == -1 else False
     
    # Return the value of the top of the stack
    def peek(self):
        return self.array[-1]
     
    # Pop the element from the stack
    def pop(self):
        if not self.isEmpty():
            self.top -= 1
            return self.array.pop()
        else:
            return "$"
     
    # Push the element to the stack
    def push(self, op):
        self.top += 1
        self.array.append(op)
 
 
    # The main function that converts given infix expression
    # to postfix expression
    def evaluatePostfix(self, exp):
         
        # Iterate over the expression for conversion
        for i in exp:
             
            # If the scanned character is an operand
            # (number here) push it to the stack
            if i.isdigit():
                self.push(i)
 
            # If the scanned character is an operator,
            # pop two elements from stack and apply it.
            else:
                val1 = self.pop()
                val2 = self.pop()
                self.push(str(eval(val2 + i + val1)))
 
        return int(self.pop())
                 
 
             
# Driver program to test above function
exp = "231*+9-"
obj = Evaluate(len(exp))
print ("postfix evaluation: %d"%(obj.evaluatePostfix(exp)))
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)
C#
Javascript
Output
postfix evaluation: -4
Time Complexity: O(N) 
Auxiliary Space: O(N)



There are the following limitations of the above implementation. 
It supports only 4 binary operators ‘+’, ‘*’, ‘-‘ and ‘/’. It can be extended for more operators by adding more switch cases. 
The allowed operands are only single-digit operands. The program can be extended for multiple digits by adding a separator-like space between all elements (operators and operands) of the given expression. 
Below given is the extended program which allows operands to have multiple digits. 

C++14
C
Java
Python3
# Python program to evaluate value of a postfix
# expression with integers containing multiple digits
 
class evalpostfix:
    def __init__(self):
        self.stack =[]
        self.top =-1
    def pop(self):
        if self.top ==-1:
            return
        else:
            self.top-= 1
            return self.stack.pop()
    def push(self, i):
        self.top+= 1
        self.stack.append(i)
 
    def centralfunc(self, ab):
        for i in ab:
 
            # if the component of the list is an integer
            try:
                self.push(int(i))
            # if the component of the list is not an integer,
            # it must be an operator. Using ValueError, we can
            # evaluate components of the list other than type int
            except ValueError:
                val1 = self.pop()
                val2 = self.pop()
                if i == '/':
                  self.push(val2 / val1)
                else:       
                # switch statement to perform operation
                  switcher ={'+':val2 + val1, '-':val2-val1, '*':val2 * val1, '^':val2**val1}
                  self.push(switcher.get(i))
        return int(self.pop())
 
str ='100 200 + 2 / 5 * 7 +'
 
# splitting the given string to obtain
# integers and operators into a list
strconv = str.split(' ')
obj = evalpostfix()
print(obj.centralfunc(strconv))
 
# This code is contributed by Amarnath Reddy
C#
Javascript
Output
757
Time Complexity: O(N) 
Auxiliary Space: O(N)





Like
108
Previous
Expression Evaluation
Next
Iterative Tower of Hanoi
Related Articles
1.
Convert Infix expression to Postfix expression
2.
Infix to Postfix using different Precedence Values for In-Stack and Out-Stack
3.
Expression Evaluation
4.
Evaluation of Expression Tree
5.
Arithmetic Expression Evaluation
6.
Postfix to Infix
7.
Postfix to Prefix Conversion
8.
Prefix to Postfix Conversion
9.
Why do we need Prefix and Postfix notations?
10.
Building Expression tree from Prefix Expression
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
andrew1234
SoumikMondal
shrikanth13
rathbhupendra
AmarnathReddy4
surindertarika1234
avanitrachhadiya2155
as5853535
decode2207
niharikatanwar61
amartyaghoshgfg
devendrasalunke
frankiejesse
garvitpr1hev
Article Tags :
Amazon
expression-evaluation
Stack
Practice Tags :
Amazon
Stack