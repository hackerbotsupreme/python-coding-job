Implement Stack and Queue using Deque

Difficulty Level : Easy
Last Updated : 28 Dec, 2022
Read
Discuss
Courses
Practice
Video
Deque also known as double ended queue, as name suggests is a special kind of queue in which insertions and deletions can be done at the last as well as at the beginning.

A link-list representation of deque is such that each node points to the next node as well as the previous node. So that insertion and deletions take constant time at both the beginning and the last.



Now, deque can be used to implement a stack and queue. One simply needs to understand how deque can made to work as a stack or a queue.

The functions of deque to tweak them to work as stack and queue are list below.



Examples: Stack 



Input : Stack : 1 2 3
        Push(4)
Output : Stack : 1 2 3 4

Input : Stack : 1 2 3
        Pop()
Output : Stack : 1 2
Examples: Queue 

Input: Queue : 1 2 3
       Enqueue(4)
Output: Queue : 1 2 3 4

Input: Queue : 1 2 3
       Dequeue()
Output: Queue : 2 3
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Implementation:

C++14
Java
C#
Javascript
Python3
class node:
    def __init__(self,val):
        self.val = val
        self.prev = None
        self.next = None
     
class Deque:
    def __init__(self):
        self.head = self.tail = None
     
    def isEmpty(self):
        if (self.head == None): return True
        return False
     
    def insert_first(self,element):
        newP = node(element)
        if self.head == None:
            self.head = self.tail = newP
            return
        newP.next = self.head
        self.head.prev = newP
        self.head = newP
     
    def insert_last(self,element):
        newP = node(element)
        if self.head == None:
            self.head = self.tail = newP
            return
        newP.prev = self.tail
        self.tail.next = newP
        self.tail = newP
         
    def size(self):
        curr = self.head
        len = 0
        while curr != None:
            len += 1
            curr = curr.next
        return len
         
    def remove_first(self):
        if self.isEmpty():
            print('List is Empty')
            return
        self.head = self.head.next
        if self.head != None: self.head.prev = None
         
    def remove_last(self):
        if self.isEmpty():
            print('List is Empty')
            return
        self.tail =  self.tail.prev
        if self.tail != None: self.tail.next = None
         
    def display(self):
        if self.isEmpty():
            print('List is Empty')
            return
        curr = self.head
        while curr != None:
            print(curr.val,end = ' ')
            curr = curr.next
        print()
             
class Stack:
    def __init__(self):
        self.stack = Deque()
     
    def push(self,element):
        self.stack.insert_last(element)
     
    def pop(self):
        self.stack.remove_last()
         
    def size(self):
        return self.stack.size()
     
    def display(self):
        self.stack.display()
         
class Queue:
    def __init__(self):
        self.que = Deque()
     
    def enqueue(self,element):
        self.que.insert_last(element)
     
    def dequeue(self):
        self.que.remove_first()
         
    def size(self):
        return self.que.size()
         
    def display(self):
        self.que.display()
             
             
stk = Stack()
 
 # push 7 and 8 at top of stack
stk.push(7)
stk.push(8)
print("Stack: ")
stk.display()
 
 # pop an element
stk.pop()
print("Stack: ")
stk.display()
 
 # Object of Queue
que = Queue()
 
 # Insert 12 and 13 in queue
que.enqueue(12)
que.enqueue(13)
print("Queue: ")
que.display()
 
 # Delete an element from queue
que.dequeue()
print("Queue: ")
que.display()
 
print("Size of stack is ",stk.size())
print("Size of queue is ", que.size())
Output
Stack: 7 8 
Stack: 7 
Queue: 12 13 
Queue: 13 
Size of Stack is 1
Size of Queue is 1
Time Complexity: O(n)
Auxiliary Space: O(n)





Like
65
Previous
Applications, Advantages and Disadvantages of Deque
Next
Length of all prefixes that are also the suffixes of given string
Related Articles
1.
Difference between Queue and Deque (Queue vs. Deque)
2.
deque::at() and deque::swap() in C++ STL
3.
Deque::front() and deque::back() in C++ STL
4.
deque::clear() and deque::erase() in C++ STL
5.
deque::operator= and deque::operator[] in C++ STL
6.
Should we declare as Queue or Priority Queue while using Priority Queue in Java?
7.
Stack and Queue in Python using queue Module
8.
How to implement Stack and Queue using ArrayDeque in Java
9.
Check if a queue can be sorted into another queue using a stack
10.
Implement a stack using single queue
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
shubham_rana_77
@shubham_rana_77
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
sujitmeshram
GauravRajput1
adnanirshad158
saurabh1990aror
Edith_3000
patel2127
gabaa406
tasneemsyed2002
polymatir3j
hardikkoriintern
dark_remo
hardikkushwaha
Article Tags :
deque
Queue
Stack
Practice Tags :
Queue
Stack
Improve Article
Report Issue