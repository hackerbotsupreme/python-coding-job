Check if an array is stack sortable

Difficulty Level : Easy
Last Updated : 24 Dec, 2022
Read
Discuss
Courses
Practice
Video
Given an array of N distinct elements where elements are between 1 and N both inclusive, check if it is stack-sortable or not. An array A[] is said to be stack sortable if it can be stored in another array B[], using a temporary stack S. The operations that are allowed on array are:

Remove the starting element of array A[] and push it into the stack.
Remove the top element of the stack S and append it to the end of array B.
If all the element of A[] can be moved to B[] by performing these operations such that array B is sorted in ascending order, then array A[] is stack sortable. 

Examples:

Input : A[] = { 3, 2, 1 }
Output : YES
Explanation : 
Step 1: Remove the starting element of array A[] 
        and push it in the stack S. ( Operation 1)
        That makes A[] = { 2, 1 } ; Stack S = { 3 }
Step 2: Operation 1
        That makes A[] = { 1 } Stack S = { 3, 2 }
Step 3: Operation 1
        That makes A[] = {} Stack S = { 3, 2, 1 }
Step 4: Operation 2
        That makes Stack S = { 3, 2 } B[] = { 1 }
Step 5: Operation 2
        That makes Stack S = { 3 } B[] = { 1, 2 }
Step 6: Operation 2
        That makes Stack S = {} B[] = { 1, 2, 3 }
  
Input : A[] = { 2, 3, 1}
Output : NO
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Given, array A[] is a permutation of [1, …, N], so let us suppose the initially B[] = {0}. Now we can observe that:

We can only push an element in the stack S if the stack is empty or the current element is less than the top of the stack.
We can only pop from the stack only if the top of the stack is B[end] + 1          as the array B[] will contain {1, 2, 3, 4, …, n}.
If we are not able to push the starting element of the array A[], then the given array is Not Stack Sortable. Below is the implementation of above idea: 

C++
Java
Python3
# Python implementation of above approach
 
 
def check(A, N):
 
    # Stack S
    S = []
 
    # Pointer to the end value of array B.
    B_end = 0
 
    # Traversing each element of A[] from starting
    # Checking if there is a valid operation
    # that can be performed.
    for i in range(N):
 
        # if Stack is not empty
        if len(S) != 0:
            # top of the stack
            top = S[-1]
 
            # If the top of the stack is
            # Equal to B_end+1, we will pop it
            # And increment B_end by 1.
            while top == B_end + 1:
 
                # if current top is equal to
                # B_end+1, we will increment
                # B_end to B_end+1
                B_end = B_end + 1
 
                # Pop the top element
                S.pop()
 
                # If the stack is empty We cannot
                # further perform this operation.
                # Therefore break
                if len(S) == 0:
                    break
 
                # Current top
                top = S[-1]
 
            # If stack is empty
            # Push the Current element
            if len(S) == 0:
                S.append(A[i])
            else:
                top = S[-1]
 
                # If the Current element of the array A[]
                # if smaller than the top of the stack
                # We can push it in the Stack.
                if A[i] < top:
                    S.append(A[i])
 
                # Else We cannot sort the array
                # Using any valid operations.
                else:
                    # Not Stack Sortable
                    return False
 
        else:
            # If the stack is empty push the current
            # element in the stack.
            S.append(A[i])
 
    return True
 
 
# Driver's Function
if __name__ == "__main__":
    A = [4, 1, 2, 3]
    N = len(A)
    if check(A, N):
        print("YES")
    else:
        print("NO")
C#
Javascript
Output:

YES
Time Complexity: O(N)



Auxiliary Space: O(N) because using stack





Like
17
Next
Count subarrays where second highest lie before highest
Related Articles
1.
Stack Permutations (Check if an array is stack permutation of other)
2.
Sort a stack using a temporary stack
3.
Infix to Postfix using different Precedence Values for In-Stack and Out-Stack
4.
Find maximum in stack in O(1) without using additional stack
5.
Reversing a Stack with the help of another empty Stack
6.
Check if all array elements are present in a given stack or not
7.
Check if stack elements are pairwise consecutive
8.
Check if a queue can be sorted into another queue using a stack
9.
Check for balanced parenthesis without using stack
10.
Check if the elements of stack are pairwise sorted
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
ShivamKD
@ShivamKD
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
princiraj1992
pankajkr_810
himanshiyadav7011
aadityapburujwale
sagar0719kumar
adityamaharshi21
sagartomar9927
sweetyty
Article Tags :
Sorting Quiz
Arrays
Stack
Practice Tags :
Arrays
Stack
Improve Article
Report Issue