Check if a queue can be sorted into another queue using a stack

Difficulty Level : Medium
Last Updated : 17 Aug, 2022
Read
Discuss(20+)
Courses
Practice
Video
Given a Queue consisting of first n natural numbers (in random order). The task is to check whether the given Queue elements can be arranged in increasing order in another Queue using a stack. The operation allowed are: 

Push and pop elements from the stack 
Pop (Or Dequeue) from the given Queue. 
Push (Or Enqueue) in the another Queue.
Examples :

Input : Queue[] = { 5, 1, 2, 3, 4 } 
Output : Yes 
Pop the first element of the given Queue i.e 5. 
Push 5 into the stack. 
Now, pop all the elements of the given Queue and push them to 
second Queue. 
Now, pop element 5 in the stack and push it to the second Queue. 
  
Input : Queue[] = { 5, 1, 2, 6, 3, 4 } 
Output : No 
Push 5 to stack. 
Pop 1, 2 from given Queue and push it to another Queue. 
Pop 6 from given Queue and push to stack. 
Pop 3, 4 from given Queue and push to second Queue. 
Now, from using any of above operation, we cannot push 5 
into the second Queue because it is below the 6 in the stack. 

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Observe, second Queue (which will contain the sorted element) takes inputs (or enqueue elements) either from given Queue or Stack. So, the next expected (which will initially be 1) element must be present as a front element of a given Queue or top element of the Stack. So, simply simulate the process for the second Queue by initializing the expected element as 1. And check if we can get the expected element from the front of the given Queue or from the top of the Stack. If we cannot take it from either of them then pop the front element of the given Queue and push it in the Stack. 

Also, observe, that the stack must also be sorted at each instance i.e the element at the top of the stack must be the smallest in the stack. For eg. let x > y, then x will always be expected before y. So, x cannot be pushed before y in the stack. Therefore, we cannot push an element with a higher value on the top of the element having a lesser value.

Algorithm: 

Initialize the expected_element = 1 
Check if either front element of given Queue or top element of the stack have expected_element 
If yes, increment expected_element by 1, repeat step 2. 
Else, pop front of Queue and push it to the stack. If the popped element is greater than top of the Stack, return “No”.
Below is the implementation of this approach: 



C++
Java
Python3
# Python Program to check if a queue of first
# n natural number can be sorted using a stack
from queue import Queue
 
# Function to check if given queue element
# can be sorted into another queue using a
# stack.
def checkSorted(n, q):
    st = []
    expected = 1
    fnt = None
 
    # while given Queue is not empty.
    while (not q.empty()):
        fnt = q.queue[0]
        q.get()
 
        # if front element is the
        # expected element
        if (fnt == expected):
            expected += 1
 
        else:
             
            # if stack is empty, put the element
            if (len(st) == 0):
                st.append(fnt)
 
            # if top element is less than element which
            # need to be puted, then return false.
            elif (len(st) != 0 and st[-1] < fnt):
                return False
 
            # else put into the stack.
            else:
                st.append(fnt)
 
        # while expected element are coming
        # from stack, pop them out.
        while (len(st) != 0 and
                   st[-1] == expected):
            st.pop()
            expected += 1
 
    # if the final expected element value is equal
    # to initial Queue size and the stack is empty.
    if (expected - 1 == n and len(st) == 0):
        return True
 
    return False
 
# Driver Code
if __name__ == '__main__':
    q = Queue()
    q.put(5)
    q.put(1)
    q.put(2)
    q.put(3)
    q.put(4)
 
    n = q.qsize()
 
    if checkSorted(n, q):
        print("Yes")
    else:
        print("No")
 
# This code is contributed by PranchalK
C#
Javascript
Output
Yes
Complexity Analysis:

Time Complexity: O(n)
Space Complexity: O(n)
Video Contributed by Parul Shandilya 





Like
29
Previous
Sorting array using Stacks
Next
Count subarrays where second highest lie before highest
Related Articles
1.
Reversing a Stack with the help of another empty Stack
2.
Stack and Queue in Python using queue Module
3.
Reversing a Queue using another Queue
4.
Should we declare as Queue or Priority Queue while using Priority Queue in Java?
5.
Check if an array can be sorted by swapping pairs from indices consisting of unequal elements in another array
6.
Check if two sorted arrays can be merged to form a sorted array with no adjacent pair from the same array
7.
Check whether an array can be fit into another array rearranging the elements in the array
8.
Print array of strings in sorted order without copying one string into another
9.
Check if array can be divided into two subsequences merging whom makes Array sorted
10.
Turn a Queue into a Priority Queue
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
anuj0503
@anuj0503
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
manishshaw1
ParulShandilya
abdulmohsin
PranchalKatiyar
18ucs102
suresh07
simmytarika5
sundara mohan m
gsouvik04
notavacillator
sainitushar438
hardikkoriintern
Article Tags :
Queue
Sorting
Stack
Practice Tags :
Queue
Sorting
Stack
Improve Article
Report Issue