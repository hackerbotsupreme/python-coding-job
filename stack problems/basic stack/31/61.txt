Stack Permutations (Check if an array is stack permutation of other)

Difficulty Level : Medium
Last Updated : 24 Nov, 2022
Read
Discuss(20+)
Courses
Practice
Video
A stack permutation is a permutation of objects in the given input queue which is done by transferring elements from the input queue to the output queue with the help of a stack and the built-in push and pop functions.

The rules are: 

Only dequeue from the input queue.
Use inbuilt push, and pop functions in the single stack.
Stack and input queue must be empty at the end.
Only enqueue to the output queue.
There are a huge number of permutations possible using a stack for a single input queue. 
Given two arrays, both of unique elements. One represents the input queue and the other represents the output queue. Our task is to check if the given output is possible through stack permutation.

Examples: 

Input: arr1[] = [ 1, 2, 3 ] , arr2[] = [ 2, 1, 3 ]
Output: YES
Explanation: 
push 1 from input to stack
push 2 from input to stack
pop 2 from stack to output
pop 1 from stack to output
push 3 from input to stack
pop 3 from stack to output

Input: arr1[] = [ 1, 2, 3 ] , arr2[] = [ 3, 1, 2 ]
Output: Not Possible

Recommended Problem
Stack Permutations
Arrays
Stack
+3 more
Solve Problem
Submission count: 16.4K
Stack Permutation Using Stack
The idea is to try to convert the input queue to the output queue using a stack, if we are able to do so then the queue is permutable otherwise not. 



Follow the steps mentioned below to implement the approach:

Continuously pop elements from the input queue and check if it is equal to the top of output queue or not, if it is not equal to the top of output queue then we will push the element to stack. 
Once we find an element in input queue such the top of input queue is equal to top of output queue, we will pop a single element from both input and output queues, and compare the top of stack and top of output queue now. If top of both stack and output queue are equal then pop element from both stack and output queue. If not equal, go to step 1.
Repeat above two steps until the input queue becomes empty. At the end if both of the input queue and stack are empty then the input queue is permutable otherwise not. 
Below is the implementation of the above approach:

C++
Java
Python3
# Given two arrays, check if one array is
# stack permutation of other.
from queue import Queue
 
# function to check if Input queue
# is permutable to output queue
def checkStackPermutation(ip, op, n):
     
    # Input queue
    Input = Queue()
    for i in range(n):
        Input.put(ip[i])
 
    # output queue
    output = Queue()
    for i in range(n):
        output.put(op[i])
 
    # stack to be used for permutation
    tempStack = []
    while (not Input.empty()):
        ele = Input.queue[0]
        Input.get()
        if (ele == output.queue[0]):
            output.get()
            while (len(tempStack) != 0):
                if (tempStack[-1] == output.queue[0]):
                    tempStack.pop()
                    output.get()
                else:
                    break
        else:
            tempStack.append(ele)
 
    # If after processing, both Input
    # queue and stack are empty then 
    # the Input queue is permutable
    # otherwise not.
    return (Input.empty() and
        len(tempStack) == 0)
 
# Driver Code
if __name__ == '__main__':
 
    # Input Queue
    Input = [1, 2, 3]
 
    # Output Queue
    output = [2, 1, 3]
 
    n = 3
 
    if (checkStackPermutation(Input,
                              output, n)):
        print("Yes")
    else:
        print("Not Possible")
 
# This code is contributed by PranchalK
C#
Javascript
Output
Yes
Time Complexity: O(N)
Auxiliary Space: O(N)

Optimized Approach
The idea to start iterating on the input array and storing its element one by one in a stack and if the top of our stack matches with an element in the output array we will pop that element from the stack and compare the next element of the output array with the top of our stack if again it matches then again pop until our stack isnâ€™t empty 

Below is the implementation of the above approach:

C++
Java
Python3
# Given two arrays, check if one array is
# stack permutation of other.
 
# function to check if input array is
# permutable to output array
def checkStackPermutation(ip, op, n):
 
    # we will be appending elements from input array to stack uptill top of our stack
    # matches with first element of output array
    s = []
     
    # will maintain a variable j to iterate on output array
    j = 0
 
    # will iterate one by one in input array
    for i in range(n):
 
        # appended an element from input array to stack
        s.append(ip[i])
         
        # if our stack isn't empty and top matches with output array
        # then we will keep popping out from stack uptill top matches with
        # output array
        while(len(s) > 0 and s[- 1] == op[j]):
            s.pop()
             
            # increasing j so next time we can compare next element in output array
            j += 1
         
     
    # if output array was a correct permutation of input array then
    # by now our stack should be empty
    if(len(s)  == 0):
        return True
     
    return False
     
# Driver program to test above function
 
# Input Array
input = [4,5,6,7,8]
 
# Output Array
 
output = [8,7,6,5,4]
n = 5
if (checkStackPermutation(input, output, n)):
    print("Yes")
else:
    print("Not Possible")
 
# This code is contributed by shinjanpatra
C#
Javascript
Output
Yes
Time Complexity: O(N)
Auxiliary Space: O(N)





Like
74
Previous
Averages of Levels in Binary Tree
Next
Tracking current Maximum Element in a Stack
Related Articles
1.
Generate all binary permutations such that there are more or equal 1's than 0's before every point in all permutations
2.
Check if two arrays are permutations of each other
3.
Check if permutation of one string can break permutation of another
4.
Check if an array can be formed by merging 2 non-empty permutations
5.
Check if a binary string contains all permutations of length k
6.
Check if the given array is same as its inverse permutation
7.
Print k different sorted permutations of a given array
8.
Iterative approach to print all permutations of an Array
9.
Find the Number of Permutations that satisfy the given condition in an array
10.
Count permutations of given array that generates the same Binary Search Tree (BST)
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
PranchalKatiyar
Vivekkumar Singh
princiraj1992
rameshtravel07
8_bit_spider
surinderdawra388
shinjanpatra
jainlovely450
hardikkoriintern
garvitpr1hev
adityamaharshi21
Article Tags :
Combinatorial
Queue
Stack
Practice Tags :
Combinatorial
Queue
Stack
Improve Article
Report Issue