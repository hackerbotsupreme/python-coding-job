Iterative Postorder Traversal | Set 2 (Using One Stack)

Difficulty Level : Hard
Last Updated : 09 Dec, 2022
Read
Discuss(180+)
Courses
Practice
Video
We have discussed a simple iterative postorder traversal using two stacks in the previous post. In this post, an approach with only one stack is discussed.

The idea is to move down to leftmost node using left pointer. While moving down, push root and root’s right child to stack. Once we reach leftmost node, print it if it doesn’t have a right child. If it has a right child, then change root so that the right child is processed before. 

Following is detailed algorithm. 

1.1 Create an empty stack
2.1 Do following while root is not NULL
    a) Push root's right child and then root to stack.
    b) Set root as root's left child.
2.2 Pop an item from stack and set it as root.
    a) If the popped item has a right child and the right child 
       is at top of stack, then remove the right child from stack,
       push the root back and set root as root's right child.
    b) Else print root's data and set root as NULL.
2.3 Repeat steps 2.1 and 2.2 while stack is not empty.
Let us consider the following tree 
 



Following are the steps to print postorder traversal of the above tree using one stack.

1. Right child of 1 exists. 
   Push 3 to stack. Push 1 to stack. Move to left child.
        Stack: 3, 1

2. Right child of 2 exists. 
   Push 5 to stack. Push 2 to stack. Move to left child.
        Stack: 3, 1, 5, 2

3. Right child of 4 doesn't exist. '
   Push 4 to stack. Move to left child.
        Stack: 3, 1, 5, 2, 4

4. Current node is NULL. 
   Pop 4 from stack. Right child of 4 doesn't exist. 
   Print 4. Set current node to NULL.
        Stack: 3, 1, 5, 2

5. Current node is NULL. 
    Pop 2 from stack. Since right child of 2 equals stack top element, 
    pop 5 from stack. Now push 2 to stack.     
    Move current node to right child of 2 i.e. 5
        Stack: 3, 1, 2

6. Right child of 5 doesn't exist. Push 5 to stack. Move to left child.
        Stack: 3, 1, 2, 5

7. Current node is NULL. Pop 5 from stack. Right child of 5 doesn't exist. 
   Print 5. Set current node to NULL.
        Stack: 3, 1, 2

8. Current node is NULL. Pop 2 from stack. 
   Right child of 2 is not equal to stack top element. 
   Print 2. Set current node to NULL.
        Stack: 3, 1

9. Current node is NULL. Pop 1 from stack. 
   Since right child of 1 equals stack top element, pop 3 from stack. 
   Now push 1 to stack. Move current node to right child of 1 i.e. 3
        Stack: 1

10. Repeat the same as above steps and Print 6, 7 and 3. 
    Pop 1 and Print 1.
Recommended Problem
Postorder Traversal (Iterative)
Stack
Tree
+1 more
Microsoft
Solve Problem
Submission count: 17.9K
C++
C
Java
Python3
# Python3 program for iterative postorder traversal
# using one stack
 
# Stores the answer
ans = []
 
# A Binary tree node
class Node:
     
    # Constructor to create a new node
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 
def peek(stack):
    if len(stack) > 0:
        return stack[-1]
    return None
# A iterative function to do postorder traversal of
# a given binary tree
def postOrderIterative(root):
         
    # Check for empty tree
    if root is None:
        return
 
    stack = []
     
    while(True):
         
        while (root):
            # Push root's right child and then root to stack
            if root.right is not None:
                stack.append(root.right)
            stack.append(root)
 
            # Set root as root's left child
            root = root.left
         
        # Pop an item from stack and set it as root
        root = stack.pop()
 
        # If the popped item has a right child and the
        # right child is not processed yet, then make sure
        # right child is processed before root
        if (root.right is not None and
            peek(stack) == root.right):
            stack.pop() # Remove right child from stack
            stack.append(root) # Push root back to stack
            root = root.right # change root so that the
                            # right childis processed next
 
        # Else print root's data and set root as None
        else:
            ans.append(root.data)
            root = None
 
        if (len(stack) <= 0):
                break
 
# Driver program to test above function
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
root.right.left = Node(6)
root.right.right = Node(7)
 
print("Post Order traversal of binary tree is")
postOrderIterative(root)
print(ans)
 
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)
C#
Javascript
Output


Post order traversal of binary tree is :
[4 5 2 6 7 3 1 ]
Time Complexity: O(n)

Auxiliary Space: O(n)

Method 2: 
Push directly root node two times while traversing to the left. While popping if you find stack top() is same as root then go for root->right else print root.

C++
Java
Python3
# Simple Python3 program to print
# PostOrder Traversal(Iterative)
 
# A binary tree node
class Node:
 
    def __init__(self, x):
         
        self.data = x
        self.right = None
        self.left = None
 
# Create a postorder class
 
# An iterative function to do postorder
# traversal of a given binary tree
def postOrderIterative(root):
     
    stack = []
     
    while(True):
        while(root != None):
            stack.append(root)
            stack.append(root)
            root = root.left
 
        # Check for empty stack
        if (len(stack) == 0):
            return
         
        root = stack.pop()
 
        if (len(stack) > 0 and stack[-1] == root):
            root = root.right
        else:
            print(root.data, end = " ")
            root = None
 
# Driver code
if __name__ == '__main__':
     
    # Let us create trees shown
    # in above diagram
    root = Node(1)
    root.left = Node(2)
    root.right = Node(3)
    root.left.left = Node(4)
    root.left.right = Node(5)
    root.right.left = Node(6)
    root.right.right = Node(7)
     
    print("Post order traversal of binary tree is :")
     
    postOrderIterative(root)
 
# This code is contributed by mohit kumar 29
C#
Javascript
Output
Post order traversal of binary tree is :
4 5 2 6 7 3 1 
Time Complexity: O(n)

Auxiliary Space: O(n)

Method 3 (Iterative PostOrder Traversal Using Stack and Hashing) :  
Create a Stack for finding the postorder traversal and an unordered map for hashing to mark the visited nodes.
Initially push the root node in the stack and follow the below steps until the stack is not empty. The stack will get empty when postorder traversal is stored in our answer container data structure.
Mark the current node (node on the top of stack) as visited in our hashtable.
If the left child of the current node is not NULL and not visited then push it into the stack.
Otherwise, if the right child of the top node is not NULL and not visited push it into the stack
If none of the above two conditions holds true then add the value of the current node to our answer and remove(pop) the current node from the stack.
When the stack gets empty, we will have postorder traversal stored in our answer data structure (array or vector).
C++
Java
Python3
# Simple Python3 program to print
# PostOrder Traversal(Iterative)
 
# A binary tree node
class Node:
 
    def __init__(self, x):
 
        self.data = x
        self.right = None
        self.left = None
 
# Create a postorder class
 
# An iterative function to do postorder
# traversal of a given binary tree
def postOrderIterative(root):
 
    stack = []
 
    while(True):
        while(root != None):
            stack.append(root)
            stack.append(root)
            root = root.left
 
        # Check for empty stack
        if (len(stack) == 0):
            return
 
        root = stack.pop()
 
        if (len(stack) > 0 and stack[-1] == root):
            root = root.right
        else:
            print(root.data, end=" ")
            root = None
 
# Driver code
if __name__ == '__main__':
 
    # Let us create trees shown
    # in above diagram
    root = Node(1)
    root.left = Node(2)
    root.right = Node(3)
    root.left.left = Node(4)
    root.left.right = Node(5)
    root.right.left = Node(6)
    root.right.right = Node(7)
 
    print("Post order traversal of binary tree is :")
 
    postOrderIterative(root)
 
    # This code is contributed by ishankhandelwals.
C#
Javascript
Output
Post order traversal of binary tree is :
4 5 2 6 7 3 1 
Time complexity: O(n) where n is no of nodes in a binary tree

Auxiliary Space: O(n)
This article is compiled by Aashish Barnwal. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above

Method 4:

In this method, the node is only pushed once. 
Travel to the extreme left using a loop until null. 
Then loop again with the right of the top element of the stack(if it exists). The loop used for traversing to the extreme left is only used in this step in future. 
If the right node is null, then pop until that sub-branch is popped from the stack(to avoid an infinite loop of continuously adding and popping the same thing).
The reason why this program works is that after traversing to extreme left in the beginning, further the program has two paths of execution. One is when the right node is given the control and the other is when the right node hits null. When the right node is given the control, just traverse to the extreme left. If null is hit, pop till that sub branch is eliminated from the stack. So a boolean variable is used so that when right node is given control, it sets to true and program changes to travel extreme left mode and other cases just keep on popping.

C++
Java
Python
# Python3 program to print the
# PostOrder Traversal(Iterative)
 
# Binary tree node structure
class Node:
 
    def __init__(self, x):
         
        self.data = x
        self.right = None
        self.left = None
 
# An iterative function to do postorder
# traversal of a given binary tree
def postOrderIterative(root):
     
    stack = []
    check = True
     
    while(True):
        while(root != None):
            stack.append(root)
            root = root.left
 
        # If the stack is empty, the traversal is finished
        if (len(stack) == 0):
            return
        #To avoid infinite looping this check is necessary
        if (root != stack[-1].right):
          root = stack[-1].right
          check = True
          continue
         
        root = stack.pop()
        print(root.data, end = " ")
        check = False
 
# Driver code
if __name__ == '__main__':
     
    # Let us create trees shown
    # in above diagram
    root = Node(1)
    root.left = Node(2)
    root.right = Node(3)
    root.left.left = Node(4)
    root.left.right = Node(5)
    root.right.left = Node(6)
    root.right.right = Node(7)
     
    print("Post order traversal of binary tree is :")
     
    postOrderIterative(root)
#This code is contributed by Ritvik Saran S
C#
Javascript
Output
4 5 2 6 7 3 1 
Time Complexity: O(n), n is the number of nodes of the tree.

Auxiliary Space: O(n), extra stack space is used.





Like
110
Next
Iterative Postorder Traversal | Set 1 (Using Two Stacks)
Related Articles
1.
Iterative Postorder Traversal | Set 1 (Using Two Stacks)
2.
Iterative Postorder traversal | Set 3
3.
Iterative Postorder Traversal of N-ary Tree
4.
Preorder, Postorder and Inorder Traversal of a Binary Tree using a single Stack
5.
Construct a BST from given postorder traversal using Stack
6.
Postorder traversal of Binary Tree without recursion and without stack
7.
Level order traversal in spiral form | Using one stack and one queue
8.
Construct a Complete N-ary Tree from given Postorder Traversal
9.
Find parent of given node in a Binary Tree with given postorder traversal
10.
Morris traversal for Postorder
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
ashishfk
mohit kumar 29
shikhasingrajput
Rajput-Ji
unknown2108
simmytarika5
rdtank
anikakapoor
sumitgumber28
ishankhandelwals
adityakumar129
noviced3vq6
krisania804
codebyritvik
vivekedula
Article Tags :
Stack
Tree
Practice Tags :
Stack
Tree
Improve Article
Report Issue