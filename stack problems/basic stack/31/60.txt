Iterative method to find ancestors of a given binary tree

Difficulty Level : Hard
Last Updated : 14 Jul, 2022
Read
Discuss
Courses
Practice
Video
Given a binary tree, print all the ancestors of a particular key existing in the tree without using recursion.
Here we will be discussing the implementation for the above problem. 

Examples: 

Input : 
            1
        /       \
       2         7
     /   \     /   \
    3     5    8    9 
   /       \       /
  4         6     10 
Key = 6 

Output : 5 2 1
Ancestors of 6 are 5, 2 and 1.
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
The idea is to use iterative postorder traversal of given binary tree.  

Implementation:

C++
Java
Python3
# Python program to print all ancestors of a given key
 
# A class to create a new tree node
class newNode:
    def __init__(self, data):
        self.data = data
        self.left = self.right = None
 
# Iterative Function to print all ancestors of a
# given key
def printAncestors(root, key):
    if (root == None):
        return
 
    # Create a stack to hold ancestors
    st = []
 
    # Traverse the complete tree in postorder way till
    # we find the key
    while (1):
 
        # Traverse the left side. While traversing, push
        # the nodes into the stack so that their right
        # subtrees can be traversed later
        while (root and root.data != key):
            st.append(root) # push current node
            root = root.left # move to next node
 
        # If the node whose ancestors are to be printed
        # is found, then break the while loop.
        if (root and root.data == key):
            break
 
        # Check if right sub-tree exists for the node at top
        # If not then pop that node because we don't need
        # this node any more.
        if (st[-1].right == None):
            root = st[-1]
            st.pop()
 
            # If the popped node is right child of top,
            # then remove the top as well. Left child of
            # the top must have processed before.
            while (len(st) != 0 and st[-1].right == root):
                root = st[-1]
                st.pop()
 
        # if stack is not empty then simply set the root
        # as right child of top and start traversing right
        # sub-tree.
        root = None if len(st) == 0 else st[-1].right
 
    # If stack is not empty, print contents of stack
    # Here assumption is that the key is there in tree
    while (len(st) != 0):
        print(st[-1].data,end = " ")
        st.pop()
 
# Driver code
if __name__ == '__main__':
 
    # Let us construct a binary tree
    root = newNode(1)
    root.left = newNode(2)
    root.right = newNode(7)
    root.left.left = newNode(3)
    root.left.right = newNode(5)
    root.right.left = newNode(8)
    root.right.right = newNode(9)
    root.left.left.left = newNode(4)
    root.left.right.right = newNode(6)
    root.right.right.left = newNode(10)
 
    key = 6
    printAncestors(root, key)
     
# This code is contributed by PranchalK.
C#
Javascript
Output
5 2 1 
Complexity Analysis:

Time Complexity: O(n)
Space Complexity: O(n)
This article is contributed by Gautam Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 







Like
3
Next
Stack Permutations (Check if an array is stack permutation of other)
Related Articles
1.
Print Ancestors of a given node in Binary Tree
2.
Print ancestors of a given binary tree node without recursion
3.
Find most frequent value of ancestors for each Node of given Tree
4.
Count ancestors with smaller value for each node of a Binary Tree
5.
Check whether a binary tree is a full binary tree or not | Iterative Approach
6.
Check if a binary tree is subtree of another binary tree using preorder traversal : Iterative
7.
Count the number of common ancestors of given K nodes in a N-ary Tree
8.
Median of ancestors for each Node of a given tree
9.
Count of ancestors with smaller value for each node of an N-ary Tree
10.
Iterative Method to find Height of Binary Tree
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
prerna saini
PranchalKatiyar
29AjayKumar
divyeshrabadiya07
sainitushar438
hardikkoriintern
Article Tags :
Stack
Tree
Practice Tags :
Stack
Tree