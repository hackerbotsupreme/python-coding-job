Largest Rectangular Area in a Histogram using Stack

Difficulty Level : Hard
Last Updated : 02 Nov, 2022
Read
Discuss(230+)
Courses
Practice
Video
Find the largest rectangular area possible in a given histogram where the largest rectangle can be made of a number of contiguous bars whose heights are given in an array. For simplicity, assume that all bars have the same width and the width is 1 unit. 

Example: 

Input: histogram = {6, 2, 5, 4, 5, 1, 6}
 

histogram

Output: 12

Input: histogram = {3, 5, 1, 7, 5, 9}
Output: 15

Recommended Problem
Maximum Rectangular Area in a Histogram
Stack
Data Structures
Microsoft
Google
Solve Problem
Submission count: 1.3L
To solve the problem follow the below idea:



For every bar ‘x’, we calculate the area with ‘x’ as the smallest bar in the rectangle. If we calculate the such area for every bar ‘x’ and find the maximum of all areas, our task is done. 

How to calculate the area with ‘x’ as the smallest bar? 

We need to know the index of the first smaller (smaller than ‘x’) bar on the left of ‘x’ and the index of the first smaller bar on the right of ‘x’. Let us call these indexes as ‘left index’ and ‘right index’ respectively. We traverse all bars from left to right and maintain a stack of bars. Every bar is pushed to stack once. A bar is popped from the stack when a bar of smaller height is seen. When a bar is popped, we calculate the area with the popped bar as the smallest bar. 

How do we get the left and right indexes of the popped bar?

The current index tells us the right index and the index of the previous item in the stack is the left index

Follow the given steps to solve the problem:

Create an empty stack.
Start from the first bar, and do the following for every bar hist[i] where ‘i‘ varies from 0 to n-1
If the stack is empty or hist[i] is higher than the bar at top of the stack, then push ‘i‘ to stack. 
If this bar is smaller than the top of the stack, then keep removing the top of the stack while the top of the stack is greater. 
Let the removed bar be hist[tp]. Calculate the area of the rectangle with hist[tp] as the smallest bar. 
For hist[tp], the ‘left index’ is previous (previous to tp) item in stack and ‘right index’ is ‘i‘ (current index).
If the stack is not empty, then one by one remove all bars from the stack and do step (2.2 and 2.3) for every removed bar
Below is the implementation of the above approach.

C++
Java
Python3
# Python3 program to find maximum
# rectangular area in linear time
  
  
def max_area_histogram(histogram):
  
    # This function calculates maximum
    # rectangular area under given
    # histogram with n bars
  
    # Create an empty stack. The stack
    # holds indexes of histogram[] list.
    # The bars stored in the stack are
    # always in increasing order of
    # their heights.
    stack = list()
  
    max_area = 0  # Initialize max area
  
    # Run through all bars of
    # given histogram
    index = 0
    while index < len(histogram):
  
        # If this bar is higher
        # than the bar on top
        # stack, push it to stack
  
        if (not stack) or (histogram[stack[-1]] <= histogram[index]):
            stack.append(index)
            index += 1
  
        # If this bar is lower than top of stack,
        # then calculate area of rectangle with
        # stack top as the smallest (or minimum
        # height) bar.'i' is 'right index' for
        # the top and element before top in stack
        # is 'left index'
        else:
            # pop the top
            top_of_stack = stack.pop()
  
            # Calculate the area with
            # histogram[top_of_stack] stack
            # as smallest bar
            area = (histogram[top_of_stack] *
                    ((index - stack[-1] - 1)
                     if stack else index))
  
            # update max area, if needed
            max_area = max(max_area, area)
  
    # Now pop the remaining bars from
    # stack and calculate area with
    # every popped bar as the smallest bar
    while stack:
  
        # pop the top
        top_of_stack = stack.pop()
  
        # Calculate the area with
        # histogram[top_of_stack]
        # stack as smallest bar
        area = (histogram[top_of_stack] *
                ((index - stack[-1] - 1)
                 if stack else index))
  
        # update max area, if needed
        max_area = max(max_area, area)
  
    # Return maximum area under
    # the given histogram
    return max_area
  
  
# Driver Code
if __name__ == '__main__':
    hist = [6, 2, 5, 4, 5, 1, 6]
  
    # Function call
    print("Maximum area is",
          max_area_histogram(hist))
  
# This code is contributed
# by Jinay Shah
C#
Javascript
Output
Maximum area is 12
Time Complexity: O(N), Since every bar is pushed and popped only once
Auxiliary Space: O(N)

Largest Rectangular Area in a Histogram by finding the next and the previous smaller element:
To solve the problem follow the below idea:

Find the previous and the next smaller element for every element of the histogram, as this would help to calculate the length of the subarray in which this current element is the minimum element. So we can create a rectangle of size (current element * length of the subarray) using this element. Take the maximum of all such rectangles.

Follow the given steps to solve the problem:

First, we will take two arrays left_smaller[] and right_smaller[] and initialize them with -1 and n respectively
For every element, we will store the index of the previous smaller and next smaller element in left_smaller[] and right_smaller[] arrays respectively
Now for every element, we will calculate the area by taking this ith element as the smallest in the range left_smaller[i] and right_smaller[i] and multiplying it with the difference of left_smaller[i] and right_smaller[i]
We can find the maximum of all the areas calculated in step 3 to get the desired maximum area
Below is the implementation of the above approach.

C++
Java
Python3
# Python3 code for the above approach
  
  
def getMaxArea(arr):
    s = [-1]
    n = len(arr)
    area = 0
    i = 0
    left_smaller = [-1]*n
    right_smaller = [n]*n
    while i < n:
        while s and (s[-1] != -1) and (arr[s[-1]] > arr[i]):
            right_smaller[s[-1]] = i
            s.pop()
        if((i > 0) and (arr[i] == arr[i-1])):
            left_smaller[i] = left_smaller[i-1]
        else:
            left_smaller[i] = s[-1]
        s.append(i)
        i += 1
    for j in range(0, n):
        area = max(area, arr[j]*(right_smaller[j]-left_smaller[j]-1))
    return area
  
  
# Driver code
if __name__ == '__main__':
    hist = [6, 2, 5, 4, 5, 1, 6]
  
    # Function call
    print("maxArea = ", getMaxArea(hist))
  
# This code is contributed by Arunit Kumar
C#
Javascript
Output
maxArea = 12
Time Complexity: O(N)
Auxiliary Space: O(N)

Related Articles: Divide and Conquer based O(N log N) solution

Thanks to Ashish Anand for suggesting initial solution. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.





Like
362
Previous
Merge Overlapping Intervals
Next
How to Reverse a String using Stack
Related Articles
1.
Largest Rectangular Area in a Histogram using Segment Tree
2.
Sort a stack using a temporary stack
3.
Infix to Postfix using different Precedence Values for In-Stack and Out-Stack
4.
Find maximum in stack in O(1) without using additional stack
5.
Stack Permutations (Check if an array is stack permutation of other)
6.
Reversing a Stack with the help of another empty Stack
7.
Largest area possible after removal of a series of horizontal & vertical bars
8.
How to Reverse a Stack using Recursion
9.
Iterative Postorder Traversal | Set 2 (Using One Stack)
10.
How to Sort a Stack using Recursion
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
JinayShah
shrikanth13
Akanksha_Rai
hisengeek
anikaseth98
simmytarika5
GauravRajput1
shinjanpatra
AnshumanRanjan
janardansthox
Article Tags :
Akosha
Amazon
Facebook
MAQ Software
Microsoft
Paytm
Snapdeal
Stack
Practice Tags :
Amazon
Facebook
MAQ Software
Microsoft
Paytm
Snapdeal
Stack
Improve Article
Report Issue