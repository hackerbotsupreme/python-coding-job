How to create mergeable stack?

Difficulty Level : Medium
Last Updated : 13 Jan, 2023
Read
Discuss
Courses
Practice
Video
Design a stack with the following operations.

push(Stack s, x): Adds an item x to stack s 
pop(Stack s): Removes the top item from stack s 
merge(Stack s1, Stack s2): Merge contents of s2 into s1.
Time Complexity of all above operations should be O(1). 

If we use array implementation of the stack, then merge is not possible to do in O(1) time as we have to do the following steps.

Delete old arrays. 
Create a new array for s1 with a size equal to the size of the old array for s1 plus size of s2. 
Copy old contents of s1 and s2 to new array for s1 
The above operations take O(n) time.

We can use a linked list with two pointers, one pointer to the first node (also used as a top when elements are added and removed from the beginning). The other pointer is needed for the last node so that we can quickly link the linked list of s2 at the end of s1. Following are all operations. 

push(): Adds the new item at the beginning of linked list using the first pointer. 
pop(): Removes an item from the beginning using the first pointer. 
merge(): Links the first pointer second stack as next of the last pointer of the first list.
Can we do it if we are not allowed to use an extra pointer? 

We can do it with a circular linked list. The idea is to keep track of the last node in the linked list. The next of the last node indicates the top of the stack. 



push(): Adds the new item as next of the last node. 
pop(): Removes next of last node. 
merge(): Links the top (next of last) of the second list to the top (next of last) of the first list. And makes last of the second list as last of the whole list.
The code for the above is given below:

C++
Java
Python3
# The Node class for Linked List
class Node():
    def __init__(self,data):
         
        self.next = None
        self.prev = None
        self.data = data
 
class Stack():
     
    # Initialize stack class with
    # its head and tail as None
    def __init__(self):
         
        self.head = None
        self.tail = None
 
    def push(self, data):
         
        new_node = Node(data)
         
        if (self.head == None):
            self.head = new_node
            self.head.next= None
            self.head.prev = None
            self.tail = new_node
 
        else:
            new_node.prev = self.tail
            self.tail.next = new_node
            self.tail = new_node
 
    def pop(self):
         
        if (self.head == None):
            print("Stack underflow")
 
        if (self.head == self.tail):
            self.head = None
            self.tail = None
 
        else:
            node = self.tail
            self.tail = self.tail.prev
            del node
            self.tail.next = None
 
    # self (stack) is linked on top (which is tail here) of stack
    # self becomes the merged stack
    def merge(self, stack):
        if stack.head == None: return  # if stack is empty self stays as it is
        if self.head == None:        # self (stack) is empty -> point to stack
            self.head = stack.head
            self.tail = stack.tail
            return
        self.head.prev = stack.tail # link self on top of stack
        stack.tail.nxt = self.head
        self.head = stack.head      # set new head for self (stack)
 
    def display(self):
         
        if (self.tail != None):
            n = self.tail
             
            while (n != None):
                print(n.data, end = " ")
                n = n.prev
 
            print()
 
        else:
            print("Stack Underflow")
 
# Driver code
ms1 = Stack()
ms2 = Stack()
 
ms1.push(6)
ms1.push(5)
ms1.push(4)
ms2.push(9)
ms2.push(8)
ms2.push(7)
 
ms1.merge(ms2)
ms1.display()
while ms1.head != ms1.tail:
  ms1.pop ()
print ("check pop all elements until head == tail (one element left)")
print ("on merged stack: ", end = "")
ms1.display()
# This code is contributed by maheswaripiyush9
C#
Javascript
Output
4 5 6 7 8 9 
Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
22
Previous
How to efficiently implement k stacks in a single array?
Next
Find maximum depth of nested parenthesis in a string
Related Articles
1.
Sort a stack using a temporary stack
2.
Stack Permutations (Check if an array is stack permutation of other)
3.
Infix to Postfix using different Precedence Values for In-Stack and Out-Stack
4.
Find maximum in stack in O(1) without using additional stack
5.
Reversing a Stack with the help of another empty Stack
6.
How to create an Array of Objects in the Stack memory?
7.
How can I create a parallel stack and run a coroutine on it?
8.
How to Reverse a Stack using Recursion
9.
Spaghetti Stack
10.
Iterative Postorder Traversal | Set 2 (Using One Stack)
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
jayshmi
ayaan_farooqui
maheswaripiyush9
aashish1995
JosefHope
rushalichaurasiya
hardikkoriintern
satwiksuman
Article Tags :
Stack
Practice Tags :
Stack