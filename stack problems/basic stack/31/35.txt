Next Greater Element (NGE) for every element in given Array

Difficulty Level : Medium
Last Updated : 05 Dec, 2022
Read
Discuss(820+)
Courses
Practice
Video
Given an array, print the Next Greater Element (NGE) for every element. 

The Next greater Element for an element x is the first greater element on the right side of x in the array. Elements for which no greater element exist, consider the next greater element as -1. 

Example: 

Input: arr[] = [ 4 , 5 , 2 , 25 ]
Output:  4      –>   5
               5      –>   25
               2      –>   25
              25     –>   -1
Explanation: except 25 every element has an element greater than them present on the right side

Input: arr[] = [ 13 , 7, 6 , 12 ]
Output:  13      –>    -1
                7       –>     12
                6       –>     12
               12      –>     -1
Explanation: 13 and 12 don’t have any element greater than them present on the right side

Recommended Problem
Next Greater Element
Stack
Data Structures
Flipkart
Amazon
+3 more
Solve Problem
Submission count: 2.8L
The idea is to use two loops , The outer loop picks all the elements one by one. The inner loop looks for the first greater element for the element picked by the outer loop. If a greater element is found then that element is printed as next, otherwise, -1 is printed.

 
Complete Interview Preparation - GFG

Follow the steps mentioned below to implement the idea:

Traverse the array from index 0 to end.
For each element start another loop from index i+1 to end.
If a greater element is found in the second loop then print it and break the loop, else print -1.                
Below is the implementation of the above approach:



C++
C
Java
Python
# Function to print element and NGE pair for all elements of list
def printNGE(arr):
 
    for i in range(0, len(arr), 1):
 
        next = -1
        for j in range(i+1, len(arr), 1):
            if arr[i] < arr[j]:
                next = arr[j]
                break
 
        print(str(arr[i]) + " -- " + str(next))
 
 
# Driver program to test above function
arr = [11, 13, 21, 3]
printNGE(arr)
 
# This code is contributed by Sunny Karira
C#
PHP
Javascript
Output
11 --> 13
13 --> 21
21 --> -1
3 --> -1
Time Complexity: O(N2) 
Auxiliary Space: O(1)

Find Next Greater Element using Stack:
The idea is to store the elements for which we have to find the next greater element in a stack and while traversing the array, if we find a greater element, we will pair it with the elements from the stack till the top element of the stack is less than the current element.

illustration:
Below is the illustration of the above approach: 



Follow the steps mentioned below to implement the idea:


Push the first element to stack.
Pick the rest of the elements one by one and follow the following steps in the loop. 
Mark the current element as next.
If the stack is not empty, compare top most element of stack with next.
If next is greater than the top element, Pop element from the stack. next is the next greater element for the popped element.
Keep popping from the stack while the popped element is smaller than next. next becomes the next greater element for all such popped elements.
Finally, push the next in the stack.
After the loop in step 2 is over, pop all the elements from the stack and print -1 as the next element for them.           
Below is the implementation of the above approach:

C++
C
Java
Python
# Python program to print next greater element using stack
 
# Stack Functions to be used by printNGE()
 
 
def createStack():
    stack = []
    return stack
 
 
def isEmpty(stack):
    return len(stack) == 0
 
 
def push(stack, x):
    stack.append(x)
 
 
def pop(stack):
    if isEmpty(stack):
        print("Error : stack underflow")
    else:
        return stack.pop()
 
 
'''prints element and NGE pair for all elements of
   arr[] '''
 
 
def printNGE(arr):
    s = createStack()
    element = 0
    next = 0
 
    # push the first element to stack
    push(s, arr[0])
 
    # iterate for rest of the elements
    for i in range(1, len(arr), 1):
        next = arr[i]
 
        if isEmpty(s) == False:
 
            # if stack is not empty, then pop an element from stack
            element = pop(s)
 
            '''If the popped element is smaller than next, then
                a) print the pair
                b) keep popping while elements are smaller and
                   stack is not empty '''
            while element < next:
                print(str(element) + " -- " + str(next))
                if isEmpty(s) == True:
                    break
                element = pop(s)
 
            '''If element is greater than next, then push
               the element back '''
            if element > next:
                push(s, element)
 
        '''push next to stack so that we can find
           next greater for it '''
        push(s, next)
 
    '''After iterating over the loop, the remaining
       elements in stack do not have the next greater
       element, so print -1 for them '''
 
    while isEmpty(s) == False:
        element = pop(s)
        next = -1
        print(str(element) + " -- " + str(next))
 
 
# Driver code
arr = [11, 13, 21, 3]
printNGE(arr)
 
# This code is contributed by Sunny Karira
C#
Javascript
Output
11 --> 13
13 --> 21
3 --> -1
21 --> -1
Time Complexity: O(N) 
Auxiliary Space: O(N) 

Find Next Greater Element using Map: 
In this particular approach we are using the map as our main stack

This is same as above method but the elements are pushed and popped only once into the stack. The array is changed in place. The array elements are pushed into the stack until it finds a greatest element in the right of array. In other words the elements are popped from stack when top of the stack value is smaller in the current array element.
Once all the elements are processed in the array but stack is not empty. The left out elements in the stack doesn’t encounter any greatest element . So pop the element from stack and change it’s index value as -1 in the array.
C++
Python3
# Python3 code
class Solution:
    def nextLargerElement(self, arr, n):
        # code here
        s = []
        for i in range(len(arr)):
            while s and s[-1].get("value") < arr[i]:
                d = s.pop()
                arr[d.get("ind")] = arr[i]
            s.append({"value": arr[i], "ind": i})
        while s:
            d = s.pop()
            arr[d.get("ind")] = -1
        return arr
 
 
if __name__ == "__main__":
    print(Solution().nextLargerElement([6, 8, 0, 1, 3], 5))
C#
Javascript
Java
Output
8 -1 1 3 -1 
Time Complexity: O(N) 
Auxiliary Space: O(N)





Like
375
Previous
Convert Infix To Prefix Notation
Next
Next Greater Frequency Element
Related Articles
1.
Partition array into two subarrays with every element in the right subarray strictly greater than every element in left subarray
2.
Find next Smaller of next Greater in an array
3.
Construct array B as last element left of every suffix array obtained by performing given operations on every suffix of given array
4.
Minimize replacements to make every element in an array exceed every element in another given array
5.
Closest greater element for every array element from another array
6.
Replace every array element by Bitwise Xor of previous and next element
7.
Replace every element of the array by its next element
8.
Find the next greater element in a Circular Array
9.
Elements greater than the previous and next element in an Array
10.
Find the next greater element in a Circular Array | Set 2
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
Sam007
ashishfk
Akanksha_Rai
shrikanth13
sanskar27jain
IndavarapuAneesh
tornado
ankita bajpai 1
pawki
rdtank
famously
umaparvat
kargiloutlook
splevel62
arorakashish0911
shinjanpatra
phasing17
garvitpr1hev
mitalibhola94
agfro1cac
Article Tags :
Amazon
CouponDunia
Informatica
Payu
Samsung
Snapdeal
Zoho
Arrays
Stack
Practice Tags :
Amazon
CouponDunia
Informatic