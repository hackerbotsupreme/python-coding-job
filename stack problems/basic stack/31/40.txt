Delete middle element of a stack

Difficulty Level : Easy
Last Updated : 25 Jan, 2023
Read
Discuss(20+)
Courses
Practice
Video
Given a stack with push(), pop(), and empty() operations, The task is to delete the middle element of it without using any additional data structure.

Input  : Stack[] = [1, 2, 3, 4, 5]
Output : Stack[] = [1, 2, 4, 5]

Input  : Stack[] = [1, 2, 3, 4, 5, 6]
Output : Stack[] = [1, 2, 4, 5, 6]

Recommended Problem
Delete middle element of a stack
Recursion
Stack
+3 more
Solve Problem
Submission count: 62.5K
The Easy And Brute Force Way To do it:

  The Approach:

       we have the stack we just put all the element of stack into a vector then traverse over the vector and put the print the element/push into stack ignoring the mid element for even (n/2) and for odd (ceil(n/2)).

C++
Java
Python3
import math
 
st = []
st.append('1')
st.append('2')
st.append('3')
st.append('4')
st.append('5')
st.append('6')
st.append('7')
 
v = []
 
while(len(st) > 0):
    v.append(st[0])
    del st[0]
     
n = len(v)
 
if n%2==0:
    target = math.floor(n/2)
    for i in range(0, n):
        if i==target:
            continue
        st.append(v[i])
else:
    target = math.floor(n/2)
    for i in range(0, n):
        if i==target:
            continue
        st.append(v[i])
 
print("Printing stack after deletion of middle:", end = " ")
 
while (len(st) > 0):
    p = st[0]
    del st[0]
    print(p, end = " ")
     
# The code is contributed by Gautam goel.
Output


Printing stack after deletion of middle: 1 2 3 5 6 7 
Time Complexity: O(N), For the Traversing.
Auxiliary Space: O(N), For the Vector.

Delete the middle element of a stack using recursion:

Below is the idea to solve the problem

Remove elements of the stack recursively until the count of removed elements becomes half the initial size of the stack, now the top element is the middle element thus pop it and push the previously removed elements in the reverse order.  

Follow the steps below to implement the idea:

Store the stack size in a variable sizeofstack and a variable current to track the current size of stack.
Recursively pop out the elements of the stack
Pop the element from the stack and increment current by one then recur for the remaining stack.
The base case would be when the current becomes equal to sizeofstack / 2 then pop the top element.
Push the element that was popped before the recursive call. 
Below is the Implementation of the above approach:


C++
Java
Python3
# Python3 code to delete middle of a stack
# without using additional data structure.
  
# Deletes middle of stack of size
# n. Curr is current item number
class Stack:
    def __init__(self):
        self.items = []
      
    def isEmpty(self):
        return self.items == []
      
    def push(self, item):
        self.items.append(item)
      
    def pop(self):
        return self.items.pop()
      
    def peek(self):
        return self.items[len(self.items)-1]
      
    def size(self):
        return len(self.items)
          
def deleteMid(st, n, curr) :
 
    # If stack is empty or all items
    # are traversed
    if (st.isEmpty() or curr == n) :
        return
      
    # Remove current item
    x = st.peek()
    st.pop()
      
    # Remove other items
    deleteMid(st, n, curr+1)
      
    # Put all items back except middle
    if (curr != int(n/2)) :
        st.push(x)
  
# Driver function to test above functions
st = Stack()
  
# push elements into the stack
st.push('1')
st.push('2')
st.push('3')
st.push('4')
st.push('5')
st.push('6')
st.push('7')
  
deleteMid(st, st.size(), 0)
  
# Printing stack after deletion
# of middle.
while (st.isEmpty() == False) :
    p = st.peek()
    st.pop()
    print (str(p) + " ", end="")
 
# This code is contributed by
# Manish Shaw (manishshaw1)
C#
Javascript
Output
7 6 5 3 2 1 
Time Complexity: O(N), For the recursive calls
Auxiliary Space: O(N), For the Recursion call Stack

Delete middle element of a stack using another stack:
Pop the elements above the middle element of the given stack and use a temp stack to store these popped elements. Then pop the middle element and push the elements of the temp stack in the given stack.

Follow the below steps to implement the idea:

Initialize an empty stack temp and a variable count with 0.
Run a while loop till count becomes equal to half the initial size of the given stack 
Pop the element of the given stack and push them in temp.
Pop the top element from the given stack.
Run a while loop till temp becomes empty. 
Push the element of temp and push them in the given stack .
Below is the implementation of the above approach:

C++
Java
Python3
# Python code to delete middle of a stack with iterative method
 
# Deletes middle of stack of size n. Curr is current item number
def deleteMid(st):
    n = len(st)
    tempSt = []
    count = 0
 
    # Put first n/2 element of st in tempSt
    while (count < (n / 2)-1):
        c = st[0]
        st.pop(0)
        tempSt.insert(0, c)
        count = count+1
 
    # Delete middle element
    st.pop(0)
 
    # Put all (n/2) element of tempSt in st
    while (len(tempSt) != 0):
        st.insert(0, tempSt[0])
        tempSt.pop(0)
 
 
# Driver Code
st = []
 
# insert elements into the stack
st.insert(0, 1)
st.insert(0, 2)
st.insert(0, 3)
st.insert(0, 4)
st.insert(0, 5)
st.insert(0, 6)
st.insert(0, 7)
deleteMid(st)
 
# Printing stack after deletion of middle.
while (len(st) != 0):
    p = st[0]
    st.pop(0)
    print(p, " ")
 
# This code is added by adityamaharshi21
C#
Javascript
Output
7 6 5 3 2 1 
Time Complexity: O(N), For the while loop
Auxiliary Space: O(N), for temp stack space.





Like
58
Previous
Reverse a stack without using extra space in O(n)
Next
Sorting array using Stacks
Related Articles
1.
Design a stack with operations on middle element
2.
Delete all even elements from a stack
3.
Sort a stack using a temporary stack
4.
Stack Permutations (Check if an array is stack permutation of other)
5.
stack empty() and stack size() in C++ STL
6.
Infix to Postfix using different Precedence Values for In-Stack and Out-Stack
7.
Find maximum in stack in O(1) without using additional stack
8.
Reversing a Stack with the help of another empty Stack
9.
Traverse Linked List from middle to left-right order using recursion
10.
String formed with middle character of every right substring followed by left sequentially
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
Rohit_ranjan
@Rohit_ranjan
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
manishshaw1
srivastavaharshit848
suresh07
rkumarjnvr
ajaymakvana
jainlovely450
hardikkoriintern
aashutoshparoha
utkarshshirode02
adityamaharshi21
sanketgode0
antikamap37m
Article Tags :
STL
Recursion
Stack
Practice Tags :
Recursion
Stack
STL
Improve Article
Report Issue