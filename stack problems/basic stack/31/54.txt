Print next greater number of Q queries

Difficulty Level : Easy
Last Updated : 12 Oct, 2022
Read
Discuss
Courses
Practice
Video
Given an array of n elements and q queries, for each query that has index i, find the next greater element and print its value. If there is no such greater element to its right then print -1. 
Examples: 
 

Input : arr[] = {3, 4, 2, 7, 5, 8, 10, 6} 
        query indexes = {3, 6, 1}
Output: 8 -1 7 
Explanation : 
For the 1st query index is 3, element is 7 and 
the next greater element at its right is 8 

For the 2nd query index is 6, element is 10 and 
there is no element greater than 10 at right, 
so print -1.

For the 3rd query index is 1, element is 4 and
the next greater element at its right is 7.
 

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Normal Approach: A normal approach will be for every query to move in a loop from index to n and find out the next greater element and print it, but this in worst case will take n iterations, which is a lot if the number of queries are high. 
Time Complexity: O(n^2) 
Auxiliary Space>: O(1)
Efficient Approach: 
An efficient approach is based on next greater element. We store the index of the next greater element in an array and for every query process, answer the query in O(1) that will make it more efficient. 
But to find out the next greater element for every index in array there are two ways. 
One will take o(n^2) and O(n) space which will be to iterate from I+1 to n for each element at index I and find out the next greater element and store it.
But the more efficient one will be to use stack, where we use indexes to compare and store in next[] the next greater element index.
1) Push the first index to stack. 
2) Pick rest of the indexes one by one and follow following steps in loop. 
….a) Mark the current element as i. 
….b) If stack is not empty, then pop an index from stack and compare a[index] with a[I]. 
….c) If a[I] is greater than the a[index], then a[I] is the next greater element for the a[index]. 
….d) Keep popping from the stack while the popped index element is smaller than a[I]. a[I] becomes the next greater element for all such popped elements 
….g) If a[I] is smaller than the popped index element, then push the popped index back.
3) After the loop in step 2 is over, pop all the index from stack and print -1 as next index for them.
 

C++
Java
Python3
# Python3 program to print
# next greater number
# of Q queries
 
# array to store the next
# greater element index
def next_greatest(next, a, n):
 
    # use of stl
    # stack in c++
    s = []
 
    # push the 0th
    # index to the stack
    s.append(0);
 
    # traverse in the
    # loop from 1-nth index
    for  i in range(1, n):
 
        # iterate till loop is empty
        while (len(s) != 0):
 
            # get the topmost
            # index in the stack
            cur = s[-1]
 
            # if the current element is 
            # greater than the top indexth
            # element, then this will be
            # the next greatest index
            # of the top indexth element
            if (a[cur] < a[i]):
                 
                # initialise the cur
                # index position's
                # next greatest as index
                next[cur] = i;
 
                # pop the cur index
                # as its greater
                # element has been found
                s.pop();
 
            # if not greater
            # then break
            else:
                break;
         
        # push the i index so that its
        # next greatest can be found
        s.append(i);
 
    # iterate for all other
    # index left inside stack
    while(len(s) != 0):
        cur = s[-1]
 
        # mark it as -1 as no
        # element in greater
        # then it in right
        next[cur] = -1;
        s.pop();
     
# answers all
# queries in O(1)
def answer_query(a, next, n, index):
 
    # stores the next greater
    # element positions
    position = next[index];
 
    # if position is -1 then no
    # greater element is at right.
    if(position == -1):
        return -1;
 
    # if there is a index that
    # has greater element
    # at right then return its
    # value as a[position]
    else:
        return a[position];
 
# Driver Code
if __name__=='__main__':
 
    a = [3, 4, 2, 7, 5, 8, 10, 6 ]
    n = len(a)
 
    # initializes the
    # next array as 0
    next=[0 for i in range(n)]
 
    # calls the function
    # to pre-calculate
    # the next greatest
    # element indexes
    next_greatest(next, a, n);
 
    # query 1 answered
    print(answer_query(a, next, n, 3), end = ' ')
 
    # query 2 answered
    print(answer_query(a, next, n, 6), end = ' ')
 
    # query 3 answered
    print(answer_query(a, next, n, 1), end = ' ')
 
# This code is contributed by rutvik_56.
C#
Javascript
Output:  

8 -1 7 
Time complexity: max(O(n), O(q)), O(n) for pre-processing the next[] array and O(1) for every query.
Auxiliary Space: O(n)
This article is contributed by Raja Vikramaditya(raj). If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
 





Like
13
Previous
Iterative Tower of Hanoi
Next
Iterative Postorder Traversal | Set 1 (Using Two Stacks)
Related Articles
1.
Find next Smaller of next Greater in an array
2.
Find next greater number with same set of digits
3.
Find next greater number formed with exactly two unique digits for each Array element
4.
Queries to count array elements greater than or equal to a given number with updates
5.
Next Greater Element (NGE) for every element in given Array
6.
Next greater element in same order as input
7.
Maximum product of indexes of next greater on left and right
8.
Find the next greater element in a Circular Array
9.
Elements greater than the previous and next element in an Array
10.
Count of Array elements greater than all elements on its left and next K elements on its right
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
HarshitSood1
shrikanth13
rutvik_56
itsok
simmytarika5
mitalibhola94
Article Tags :
Arrays
Stack
Practice Tags :
Arrays
Stack
Improve Article
Report Issue