Remove brackets from an algebraic string containing + and – operators

Difficulty Level : Medium
Last Updated : 14 Dec, 2022
Read
Discuss(20+)
Courses
Practice
Video
Simplify a given algebraic string of characters, ‘+’, ‘-‘ operators and parentheses. Output the simplified string without parentheses.

Examples: 

Input : "(a-(b+c)+d)"
Output : "a-b-c+d"

Input : "a-(b-c-(d+e))-f"
Output : "a-b+c+d+e-f" 
The idea is to check operators just before starting of bracket, i.e., before character ‘(‘. If operator is -, we need to toggle all operators inside the bracket. A stack is used which stores only two integers 0 and 1 to indicate whether to toggle or not. 

We iterate for every character of input string. Initially push 0 to stack. Whenever the character is an operator (‘+’ or ‘-‘), check top of stack. If top of stack is 0, append the same operator in the resultant string. If top of stack is 1, append the other operator (if ‘+’ append ‘-‘) in the resultant string. 

Implementation:

C++
Java
Python3
# Python3 program to simplify algebraic String
 
# Function to simplify the String
 
 
def simplify(Str):
    Len = len(Str)
 
    # resultant String of max Length
    # equal to Length of input String
    res = [None] * Len
    index = 0
    i = 0
 
    # create empty stack
    s = []
    s.append(0)
 
    while (i < Len):
          if (Str[i] == '(' and i == 0):
                i += 1
                continue
 
        if (Str[i] == '+'):
 
            # If top is 1, flip the operator
            if (s[-1] == 1):
                res[index] = '-'
                index += 1
 
            # If top is 0, append the
            # same operator
            if (s[-1] == 0):
                res[index] = '+'
                index += 1
 
        else if (Str[i] == '-'):
            if (s[-1] == 1):
                res[index] = '+'
                index += 1
            else if (s[-1] == 0):
                res[index] = '-'
                index += 1
        else if (Str[i] == '(' and i > 0):
            if (Str[i - 1] == '-'):
 
                # x is opposite to the top of stack
                x = 0 if (s[-1] == 1) else 1
                s.append(x)
 
            # append value equal to top of the stack
            else if (Str[i - 1] == '+'):
                s.append(s[-1])
 
        # If closing parentheses pop
        # the stack once
        else if (Str[i] == ')'):
            s.pop()
 
        # copy the character to the result
        else:
            res[index] = Str[i]
            index += 1
        i += 1
    return res
 
# Driver Code
if __name__ == '__main__':
 
    s1 = "(a-(b+c)+d)"
    s2 = "a-(b-c-(d+e))-f"
    r1 = simplify(s1)
    for i in r1:
        if i != None:
            print(i, end = " ")
        else:
            break
    print()
    r2 = simplify(s2)
    for i in r2:
        if i != None:
            print(i, end = " ")
        else:
            break
 
# This code is contributed by PranchalK
C#
Javascript
Output
a-b-c+d
a-b+c+d+e-f
Time Complexity: O(N), Where N is the length of the given string.
Auxiliary Space: O(N)



This article is contributed by Chhavi . If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
20
Previous
Interleave the first half of the queue with second half
Next
Reverse a stack without using extra space in O(n)
Related Articles
1.
Check if two expressions with brackets are same
2.
C++ Program To Check For Balanced Brackets In An Expression (Well-Formedness) Using Stack
3.
C Program To Check For Balanced Brackets In An Expression (Well-Formedness) Using Stack
4.
Java Program To Check For Balanced Brackets In An Expression (Well-Formedness) Using Stack
5.
Python Program To Check For Balanced Brackets In An Expression (Well-Formedness) Using Stack
6.
C# Program To Check For Balanced Brackets In An Expression (Well-Formedness) Using Stack
7.
Javascript Program To Check For Balanced Brackets In An Expression (Well-Formedness) Using Stack
8.
Check for Balanced Brackets in an expression (well-formedness) using Stack
9.
Lexicographically largest subsequence containing all distinct characters only once
10.
Remove all duplicate adjacent characters from a string using Stack
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
prerna saini
29AjayKumar
PranchalKatiyar
rag2127
akhilveeramalla
shobhittewari
simmytarika5
hardikkoriintern
factworx4i2
Article Tags :
Stack
Practice Tags :
Stack
Improve Article
Report Issue