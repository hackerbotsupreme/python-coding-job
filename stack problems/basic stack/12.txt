Queue using Stacks

Difficulty Level : Medium
Last Updated : 10 Jan, 2023
Read
Discuss(160+)
Courses
Practice
Video
The problem is opposite of this post. We are given a stack data structure with push and pop operations, the task is to implement a queue using instances of stack data structure and operations on them.
 

Stack and Queue with insert and delete operations

A queue can be implemented using two stacks. Let queue to be implemented be q and stacks used to implement q be stack1 and stack2. q can be implemented in two ways: 

Recommended Problem
Queue using stack
Stack
Queue
+2 more
Microsoft
Solve Problem
Submission count: 12K
Method 1 (By making enQueue operation costly): This method makes sure that oldest entered element is always at the top of stack 1, so that deQueue operation just pops from stack1. To put the element at top of stack1, stack2 is used.

enQueue(q, x): 

While stack1 is not empty, push everything from stack1 to stack2.
Push x to stack1 (assuming size of stacks is unlimited).
Push everything back to stack1.
Here time complexity will be O(n)

deQueue(q): 

If stack1 is empty then error
Pop an item from stack1 and return it
Here time complexity will be O(1)

Below is the implementation of the above approach:  

C++
Java
Python3
# Python3 program to implement Queue using 
# two stacks with costly enQueue() 
  
class Queue: 
    def __init__(self):
        self.s1 = []
        self.s2 = []
  
    def enQueue(self, x):
          
        # Move all elements from s1 to s2 
        while len(self.s1) != 0: 
            self.s2.append(self.s1[-1]) 
            self.s1.pop()
  
        # Push item into self.s1 
        self.s1.append(x) 
  
        # Push everything back to s1 
        while len(self.s2) != 0: 
            self.s1.append(self.s2[-1]) 
            self.s2.pop()
  
    # Dequeue an item from the queue 
    def deQueue(self):
          
            # if first stack is empty 
        if len(self.s1) == 0: 
            print("Q is Empty")
      
        # Return top of self.s1 
        x = self.s1[-1] 
        self.s1.pop() 
        return x
  
# Driver code 
if __name__ == '__main__':
    q = Queue()
    q.enQueue(1) 
    q.enQueue(2) 
    q.enQueue(3) 
  
    print(q.deQueue())
    print(q.deQueue())
    print(q.deQueue())
  
# This code is contributed by PranchalK 
C#
Javascript
Output: 

1
2
3
Complexity Analysis: 

Time Complexity: 
Push operation: O(N). 
In the worst case we have empty whole of stack 1 into stack 2.
Pop operation: O(1). 
Same as pop operation in stack.
Auxiliary Space: O(N). 
Use of stack for storing values.
Method 2 (By making deQueue operation costly): In this method, in en-queue operation, the new element is entered at the top of stack1. In de-queue operation, if stack2 is empty then all the elements are moved to stack2 and finally top of stack2 is returned. 

enQueue(q,  x)
  1) Push x to stack1 (assuming size of stacks is unlimited).
Here time complexity will be O(1)

deQueue(q)
  1) If both stacks are empty then error.
  2) If stack2 is empty
       While stack1 is not empty, push everything from stack1 to stack2.
  3) Pop the element from stack2 and return it.
Here time complexity will be O(n)
Method 2 is definitely better than method 1. 

Method 1 moves all the elements twice in enQueue operation, while method 2 (in deQueue operation) moves the elements once and moves elements only if stack2 empty. So, the amortized complexity of the dequeue operation becomes \Theta (1)

Implementation of method 2:

C++
C
Java
Python3
# Python3 program to implement Queue using 
# two stacks with costly deQueue()
  
class Queue:
    def __init__(self):
        self.s1 = []
        self.s2 = []
  
    # EnQueue item to the queue
    def enQueue(self, x):
        self.s1.append(x)
  
    # DeQueue item from the queue
    def deQueue(self):
  
        # if both the stacks are empty
        if len(self.s1) == 0 and len(self.s2) == 0:
            print("Q is Empty")
            return
  
        # if s2 is empty and s1 has elements
        elif len(self.s2) == 0 and len(self.s1) > 0:
            while len(self.s1):
                temp = self.s1.pop()
                self.s2.append(temp)
            return self.s2.pop()
  
        else:
            return self.s2.pop()
  
    # Driver code
if __name__ == '__main__':
    q = Queue()
    q.enQueue(1)
    q.enQueue(2)
    q.enQueue(3)
  
    print(q.deQueue())
    print(q.deQueue())
    print(q.deQueue())
  
# This code is contributed by Pratyush Kumar 
C#
Javascript
Output: 

1 2 3 
Complexity Analysis: 

Time Complexity: 
Push operation: O(1). 
Same as pop operation in stack.
Pop operation: O(N) in general and O(1) amortized time complexity.
In the worst case we have to empty the whole of stack 1 into stack 2 so its O(N). Amortized time is the way to express the time complexity when an algorithm has the very bad time complexity only once in a while besides the time complexity that happens most of time. So its O(1) amortized time complexity, since we have to empty whole of stack 1 only when stack 2 is empty, rest of the times the pop operation takes O(1) time.
Auxiliary Space: O(N). 
Use of stack for storing values.
Queue can also be implemented using one user stack and one Function Call Stack. Below is modified Method 2 where recursion (or Function Call Stack) is used to implement queue using only one user defined stack. 

enQueue(x)
  1) Push x to stack1.

deQueue:
  1) If stack1 is empty then error.
  2) If stack1 has only one element then return it.
  3) Recursively pop everything from the stack1, store the popped item 
    in a variable res,  push the res back to stack1 and return res
The step 3 makes sure that the last popped item is always returned and since the recursion stops when there is only one item in stack1 (step 2), we get the last element of stack1 in deQueue() and all other items are pushed back in step 

3. Implementation of method 2 using Function Call Stack:  

C++
C
Java
Python3
# Python3 program to implement Queue using  
# one stack and recursive call stack. 
class Queue:
    def __init__(self):
        self.s = []
          
    # Enqueue an item to the queue 
    def enQueue(self, data):
        self.s.append(data)
          
    # Dequeue an item from the queue 
    def deQueue(self):
        # Return if queue is empty
        if len(self.s) <= 0:
            print('Queue is empty')
            return
          
        # pop an item from the stack
        x = self.s[len(self.s) - 1]
        self.s.pop()
          
        # if stack become empty
        # return the popped item
        if len(self.s) <= 0:
            return x
              
        # recursive call
        item = self.deQueue()
          
        # push popped item back to
        # the stack
        self.s.append(x)
          
        # return the result of 
        # deQueue() call
        return item
      
# Driver code  
if __name__ == '__main__':
    q = Queue()
    q.enQueue(1)
    q.enQueue(2)
    q.enQueue(3)
      
    print(q.deQueue())
    print(q.deQueue())
    print(q.deQueue())  
      
# This code is contributed by iArman
C#
Javascript
Output: 

1 2 3 
Complexity Analysis: 

Time Complexity: 
Push operation : O(1). 
Same as pop operation in stack.
Pop operation : O(N). 
The difference from above method is that in this method element is returned and all elements are restored back in a single call.
Auxiliary Space: O(N). 
Use of stack for storing values.
 


 

Asked in: Inmobi, Accolite, Adobe, Amazon, DE Shaw, Flipkart, Goldman Sachs, InfoEdge, MakeMyTrip, Microsoft, Oracle
Please write comments if you find any of the above codes/algorithms incorrect, or find better ways to solve the same problem.
 



Like
Previous
Applications, Advantages and Disadvantages of Stack
Next
Design and Implement Special Stack Data Structure | Added Space Optimized Version
Related Articles
1.
Should we declare as Queue or Priority Queue while using Priority Queue in Java?
2.
Stack and Queue in Python using queue Module
3.
Check if a queue can be sorted into another queue using a stack
4.
Reversing a Queue using another Queue
5.
queue::empty() and queue::size() in C++ STL
6.
queue::front() and queue::back() in C++ STL
7.
Difference between Circular Queue and Priority Queue
8.
Difference Between Linear Queue and Circular Queue
9.
Advantages of circular queue over linear queue
10.
Difference between Queue and Deque (Queue vs. Deque)
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
iamsdhar
ParulShandilya
prerna saini
tufan_gupta2000
PranchalKatiyar
Shailendra Singh 1
29AjayKumar
princi singh
ShayekhBinIslam
iarman
bidibaaz123
pratyushkumar1000
rag2127
nnr223442
hardikkoriintern
siddheshshinde19
adityamaharshi21
surinderdawra388
Article Tags :
Accolite
Adobe
Amazon
D-E-Shaw
Flipkart
Goldman Sachs
InfoEdge
InMobi
MakeMyTrip
MAQ Software
Microsoft
Morgan Stanley
Oracle
STL
Walmart
Queue
Stack
Practice Tags :
Accolite
Adobe
Amazon
D-E-Shaw
Flipkart
Goldman Sachs
InfoEdge
InMobi
MakeMyTrip
MAQ Software
Microsoft
Morgan Stanley
Oracle
Walmart
Queue
Stack
STL
Report Issue