Prefix to Postfix Conversion

Difficulty Level : Easy
Last Updated : 24 May, 2022
Read
Discuss
Courses
Practice
Video
Prefix: An expression is called the prefix expression if the operator appears in the expression before the operands. Simply of the form (operator operand1 operand2). 
Example : *+AB-CD (Infix : (A+B) * (C-D) )

Postfix: An expression is called the postfix expression if the operator appears in the expression after the operands. Simply of the form (operand1 operand2 operator). 
Example : AB+CD-* (Infix : (A+B * (C-D) )
Given a Prefix expression, convert it into a Postfix expression. 
Conversion of Prefix expression directly to Postfix without going through the process of converting them first to Infix and then to Postfix is much better in terms of computation and better understanding the expression (Computers evaluate using Postfix expression). 

Examples: 

Input :  Prefix :  *+AB-CD
Output : Postfix : AB+CD-*
Explanation : Prefix to Infix :  (A+B) * (C-D)
              Infix to Postfix :  AB+CD-*

Input :  Prefix :  *-A/BC-/AKL
Output : Postfix : ABC/-AK/L-*
Explanation : Prefix to Infix :  (A-(B/C))*((A/K)-L)
              Infix to Postfix : ABC/-AK/L-* 
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Algorithm for Prefix to Postfix: 


Read the Prefix expression in reverse order (from right to left)
If the symbol is an operand, then push it onto the Stack
If the symbol is an operator, then pop two operands from the Stack 
Create a string by concatenating the two operands and the operator after them. 
string = operand1 + operand2 + operator 
And push the resultant string back to Stack
Repeat the above steps until end of Prefix expression.
C++
Java
Python 3
# Write Python3 code here
# -*- coding: utf-8 -*-
 
# Example Input
s = "*-A/BC-/AKL"
 
# Stack for storing operands
stack = []
 
operators = set(['+', '-', '*', '/', '^'])
 
# Reversing the order
s = s[::-1]
 
# iterating through individual tokens
for i in s:
 
    # if token is operator
    if i in operators:
 
        # pop 2 elements from stack
        a = stack.pop()
        b = stack.pop()
 
        # concatenate them as operand1 +
        # operand2 + operator
        temp = a+b+i
        stack.append(temp)
 
    # else if operand
    else:
        stack.append(i)
 
# printing final output
print(*stack)
C#
Javascript
Output
Postfix : ABC/-AK/L-*
Time Complexity: O(N), as we are using a loop for traversing the expression.

Auxiliary Space: O(N), as we are using stack for extra space.







Like
79
Previous
Prefix to Infix Conversion
Next
Postfix to Prefix Conversion
Related Articles
1.
Postfix to Prefix Conversion
2.
Why do we need Prefix and Postfix notations?
3.
Prefix to Infix Conversion
4.
Infix to Prefix conversion using two stacks
5.
Stack | Set 4 (Evaluation of Postfix Expression)
6.
Postfix to Infix
7.
Infix to Postfix using different Precedence Values for In-Stack and Out-Stack
8.
Convert Infix expression to Postfix expression
9.
Check if count of substrings in S with string S1 as prefix and S2 as suffix is equal to that with S2 as prefix and S1 as suffix
10.
Case conversion (Lower to Upper and Vice Versa) of a string using BitWise operators in C/C++
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
shubham_rana_77
@shubham_rana_77
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
andrew1234
princiraj1992
geekfreek19
ninja456
akshaysingh98088
suresh07
rohitkumarsinghcna
Article Tags :
expression-evaluation
Stack
Strings
Practice Tags :
Stack
Strings
Improve Article
Report Issue