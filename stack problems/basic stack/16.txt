Design a stack that supports getMin() in O(1) time and O(1) extra space

Difficulty Level : Hard
Last Updated : 23 Dec, 2022
Read
Discuss(170+)
Courses
Practice
Video
Design a Data Structure SpecialStack that supports all the stack operations like push(), pop(), isEmpty(), isFull() and an additional operation getMin() which should return minimum element from the SpecialStack. All these operations of SpecialStack must have a time and space complexity of O(1). 
Note: To implement SpecialStack, you should only use standard Stack data structure and no other data structure like arrays, lists, etc

Example: 

Input: Consider the following SpecialStack

16  –> TOP
15
29
19
18

When getMin() is called it should return 15, 
which is the minimum element in the current stack. 

If we do pop two times on stack, the stack becomes

29  –> TOP
19
18



When getMin() is called, it should return 18 
which is the minimum in the current stack.

Recommended Problem
Get minimum element from stack
Stack
Data Structures
Flipkart
Amazon
+11 more
Solve Problem
Submission count: 2L
Approach: To solve the problem follow the below idea:

We define a variable minEle that stores the current minimum element in the stack. Now the interesting part is, how to handle the case when the minimum element is removed. To handle this, we push “2x – minEle” into the stack instead of x so that the previous minimum element can be retrieved using the current minEle and its value stored in the stack

Follow the given steps to implement the stack operations:

Push(x): Insert x at the top of the stack

If the stack is empty, insert x into the stack and make minEle equal to x.
If the stack is not empty, compare x with minEle. Two cases arise:
If x is greater than or equal to minEle, simply insert x.
If x is less than minEle, insert (2*x – minEle) into the stack and make minEle equal to x. 
For example, let the previous minEle be 3. Now we want to insert 2. We update minEle as 2 and insert 2*2 – 3 = 1 into the stack
Pop(): Removes an element from the top of the stack

Remove the element from the top. Let the removed element be y. Two cases arise:
If y is greater than or equal to minEle, the minimum element in the stack is still minEle.
If y is less than minEle, the minimum element now becomes (2*minEle – y), so update (minEle = 2*minEle – y). This is where we retrieve the previous minimum from the current minimum and its value in the stack. 
For example, let the element to be removed be 1 and minEle be 2. We remove 1 and update minEle as 2*2 – 1 = 3
Important Points: 

Stack doesn’t hold the actual value of an element if it is minimum so far.
The actual minimum element is always stored in the minEle variable
Below is the illustration of the above approach:

Push(x) 

stack_insert 

Number to be Inserted: 3, Stack is empty, so insert 3 into stack and minEle = 3.
Number to be Inserted: 5, Stack is not empty, 5> minEle, insert 5 into stack and minEle = 3.
Number to be Inserted: 2, Stack is not empty, 2< minEle, insert (2*2-3 = 1) into stack and minEle = 2.
Number to be Inserted: 1, Stack is not empty, 1< minEle, insert (2*1-2 = 0) into stack and minEle = 1.
Number to be Inserted: 1, Stack is not empty, 1 = minEle, insert 1 into stack and minEle = 1.
Number to be Inserted: -1, Stack is not empty, -1 < minEle, insert (2*-1 – 1 = -3) into stack and minEle = -1.
Pop() 

stack_removal 

Initially the minimum element minEle in the stack is -1.
Number removed: -3, Since -3 is less than the minimum element the original number being removed is minEle which is -1, and the new minEle = 2*-1 – (-3) = 1
Number removed: 1, 1 == minEle, so number removed is 1 and minEle is still equal to 1.
Number removed: 0, 0< minEle, original number is minEle which is 1 and new minEle = 2*1 – 0 = 2.
Number removed: 1, 1< minEle, original number is minEle which is 2 and new minEle = 2*2 – 1 = 3.
Number removed: 5, 5> minEle, original number is 5 and minEle is still 3
Below is the implementation of the above approach:

C++
Java
Python 3
# Class to make a Node
class Node:
    # Constructor which assign argument to nade's value
    def __init__(self, value):
        self.value = value
        self.next = None
 
    # This method returns the string representation of the object.
    def __str__(self):
        return "Node({})".format(self.value)
 
    # __repr__ is same as __str__
    __repr__ = __str__
 
 
class Stack:
    # Stack Constructor initialise top of stack and counter.
    def __init__(self):
        self.top = None
        self.count = 0
        self.minimum = None
 
    # This method returns the string representation of the object (stack).
    def __str__(self):
        temp = self.top
        out = []
        while temp:
            out.append(str(temp.value))
            temp = temp.next
        out = '\n'.join(out)
        return ('Top {} \n\nStack :\n{}'.format(self.top, out))
 
    # __repr__ is same as __str__
    __repr__ = __str__
 
    # This method is used to get minimum element of stack
    def getMin(self):
        if self.top is None:
            return "Stack is empty"
        else:
            print("Minimum Element in the stack is: {}" .format(self.minimum))
 
    # Method to check if Stack is Empty or not
 
    def isEmpty(self):
        # If top equals to None then stack is empty
        if self.top == None:
            return True
        else:
            # If top not equal to None then stack is empty
            return False
 
    # This method returns length of stack
    def __len__(self):
        self.count = 0
        tempNode = self.top
        while tempNode:
            tempNode = tempNode.next
            self.count += 1
        return self.count
 
    # This method returns top of stack
    def peek(self):
        if self.top is None:
            print("Stack is empty")
        else:
            if self.top.value < self.minimum:
                print("Top Most Element is: {}" .format(self.minimum))
            else:
                print("Top Most Element is: {}" .format(self.top.value))
 
    # This method is used to add node to stack
    def push(self, value):
        if self.top is None:
            self.top = Node(value)
            self.minimum = value
 
        elif value < self.minimum:
            temp = (2 * value) - self.minimum
            new_node = Node(temp)
            new_node.next = self.top
            self.top = new_node
            self.minimum = value
        else:
            new_node = Node(value)
            new_node.next = self.top
            self.top = new_node
        print("Number Inserted: {}" .format(value))
 
    # This method is used to pop top of stack
    def pop(self):
        if self.top is None:
            print("Stack is empty")
        else:
            removedNode = self.top.value
            self.top = self.top.next
            if removedNode < self.minimum:
                print("Top Most Element Removed :{} " .format(self.minimum))
                self.minimum = ((2 * self.minimum) - removedNode)
            else:
                print("Top Most Element Removed : {}" .format(removedNode))
 
 
# Driver program to test above class
if __name__ == '__main__':
   
  stack = Stack()
   
  # Function calls
  stack.push(3)
  stack.push(5)
  stack.getMin()
  stack.push(2)
  stack.push(1)
  stack.getMin()
  stack.pop()
  stack.getMin()
  stack.pop()
  stack.peek()
 
# This code is contributed by Blinkii
C#
Javascript
Output
Number Inserted: 3
Number Inserted: 5
Minimum Element in the stack is: 3
Number Inserted: 2
Number Inserted: 1
Minimum Element in the stack is: 1
Top Most Element Removed: 1
Minimum Element in the stack is: 2
Top Most Element Removed: 2
Top Most Element is: 5
 
cpp-stl-self-paced-course

How does this approach work? 
When the element to be inserted is less than minEle, we insert “2x – minEle”. The important thing to note is, that 2x – minEle will always be less than x (proved below), i.e., new minEle and while popping out this element we will see that something unusual has happened as the popped element is less than the minEle. So we will be updating minEle.

How 2*x – minEle is less than x in push()? 

x < minEle which means x – minEle < 0
 

// Adding x on both sides
x – minEle + x < 0 + x 
2*x – minEle < x 
We can conclude 2*x – minEle < new minEle 

While popping out, if we find the element(y) less than the current minEle, we find the new minEle = 2*minEle – y

How previous minimum element, prevMinEle is, 2*minEle – y
in pop() is y the popped element?

 // We pushed y as 2x – prevMinEle. Here 
// prevMinEle is minEle before y was inserted

y = 2*x – prevMinEle  

// Value of minEle was made equal to x
minEle = x .

new minEle = 2 * minEle – y 
                   = 2*x – (2*x – prevMinEle)
                   = prevMinEle // This is what we wanted

Design a stack that supports getMin() in O(1) time and O(1) extra space by creating a MinStack class:
To solve the problem follow the below idea:

Create a class node that has two variables Val and min.  Val will store the actual value that we are going to insert in the stack, whereas min will store the min value so far seen up to that node

Below is the implementation of the above approach:

C++
Java
Python3
# Python program for the above approach
class MinStack:
   
    # initialize your data structure here.
    def __init__(self):
        self.s = []
 
    class Node:
        def __init__(self, val, Min):
            self.val = val
            self.min = Min
 
    def push(self, x):
        if not self.s:
            self.s.append(self.Node(x, x))
        else:
            Min = min(self.s[-1].min, x)
            self.s.append(self.Node(x, Min))
 
    def pop(self):
        return self.s.pop().val
 
    def top(self):
        return self.s[-1].val
 
    def getMin(self):
        return self.s[-1].min
 
s = MinStack()
 
# Function calls
s.push(-1)
s.push(10)
s.push(-4)
s.push(0)
print(s.getMin())
print(s.pop())
print(s.pop())
print(s.getMin())
 
# This code is contributed by lokesh
C#
Javascript
Output
-4
0
-4
-1
Related Article: An approach that uses O(1) time and O(n) extra space is discussed here.

This article is contributed by Nikhil Tekwani. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.





Like
437
Previous
How to efficiently implement k stacks in a single array?
Next
Create a customized data structure which evaluates functions in O(1)
Related Articles
1.
Design a dynamic stack using arrays that supports getMin() in O(1) time and O(1) extra space
2.
Design a data structure that supports insert, delete, search and getRandom in constant time
3.
Find maximum in a stack in O(1) time and O(1) extra space
4.
Design a stack to retrieve original elements and return the minimum element in O(1) time and O(1) space
5.
Clone a stack without using extra space | Set 2
6.
Reverse a stack without using extra space in O(n)
7.
Clone a stack without extra space
8.
Rearrange positive and negative numbers in O(n) time and O(1) extra space
9.
Python Program to Rearrange positive and negative numbers in O(n) time and O(1) extra space
10.
C++ Program to Rearrange positive and negative numbers in O(n) time and O(1) extra space
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
andrew1234
Blinkii
gireeshgudaparthi
vishalyadavvns12345
GauravRajput1
hardikkoriintern
apxtreme21
pulakeshbag
janardansthox
adityamaharshi21
user_7gr9iodclfx
Article Tags :
Adobe
Amazon
FactSet
Flipkart
Goldman Sachs
GreyOrange
Kuliza
Microsoft
Paytm
SAP Labs
Sapient
Snapdeal
STL
VMWare
Stack
Practice Tags :
Adobe
Amazon
FactSet
Flipkart
Goldman Sachs
GreyOrange
Kuliza
Microsoft
Paytm
SAP Labs
Sapient
Snapdeal
VMWare
Stack
STL
Improve Article
Report Issue