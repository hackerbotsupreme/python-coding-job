Postfix to Prefix Conversion

Difficulty Level : Easy
Last Updated : 03 Aug, 2022
Read
Discuss
Courses
Practice
Video
Postfix: An expression is called the postfix expression if the operator appears in the expression after the operands. Simply of the form (operand1 operand2 operator). 
Example : AB+CD-* (Infix : (A+B) * (C-D) )

Prefix : An expression is called the prefix expression if the operator appears in the expression before the operands. Simply of the form (operator operand1 operand2). 
Example : *+AB-CD (Infix : (A+B) * (C-D) )

Given a Postfix expression, convert it into a Prefix expression. 
Conversion of Postfix expression directly to Prefix without going through the process of converting them first to Infix and then to Prefix is much better in terms of computation and better understanding the expression (Computers evaluate using Postfix expression). 

Examples: 


Input :  Postfix : AB+CD-*
Output : Prefix :  *+AB-CD
Explanation : Postfix to Infix : (A+B) * (C-D)
              Infix to Prefix :  *+AB-CD

Input :  Postfix : ABC/-AK/L-*
Output : Prefix :  *-A/BC-/AKL
Explanation : Postfix to Infix : ((A-(B/C))*((A/K)-L))
              Infix to Prefix :  *-A/BC-/AKL 
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Algorithm for Postfix to Prefix:

Read the Postfix expression from left to right
If the symbol is an operand, then push it onto the Stack
If the symbol is an operator, then pop two operands from the Stack 
Create a string by concatenating the two operands and the operator before them. 
string = operator + operand2 + operand1 
And push the resultant string back to Stack
Repeat the above steps until end of Postfix expression.
 Below is the implementation of the above idea:

C++
Java
Python3
# Python3 Program to convert postfix to prefix
 
# function to check if
# character is operator or not
 
 
def isOperator(x):
 
    if x == "+":
        return True
 
    if x == "-":
        return True
 
    if x == "/":
        return True
 
    if x == "*":
        return True
 
    return False
 
# Convert postfix to Prefix expression
 
 
def postToPre(post_exp):
 
    s = []
 
    # length of expression
    length = len(post_exp)
 
    # reading from right to left
    for i in range(length):
 
        # check if symbol is operator
        if (isOperator(post_exp[i])):
 
            # pop two operands from stack
            op1 = s[-1]
            s.pop()
            op2 = s[-1]
            s.pop()
 
            # concat the operands and operator
            temp = post_exp[i] + op2 + op1
 
            # Push string temp back to stack
            s.append(temp)
 
        # if symbol is an operand
        else:
 
            # push the operand to the stack
            s.append(post_exp[i])
 
    
    ans = ""
    for i in s:
        ans += i
    return ans
 
 
# Driver Code
if __name__ == "__main__":
 
    post_exp = "AB+CD-"
     
    # Function call
    print("Prefix : ", postToPre(post_exp))
 
# This code is contributed by AnkitRai01
C#
Javascript
Output


Prefix : *-A/BC-/AKL
Time Complexity: O(N) where N is the length of the string
Auxiliary Space: O(N) where N is the stack size.





Like
39
Previous
Prefix to Postfix Conversion
Next
Postfix to Infix
Related Articles
1.
Prefix to Postfix Conversion
2.
Why do we need Prefix and Postfix notations?
3.
Find original Array from given Array where each element is sum of prefix and postfix sum
4.
Prefix to Infix Conversion
5.
Infix to Prefix conversion using two stacks
6.
Stack | Set 4 (Evaluation of Postfix Expression)
7.
Postfix to Infix
8.
Infix to Postfix using different Precedence Values for In-Stack and Out-Stack
9.
Convert Infix expression to Postfix expression
10.
Check if count of substrings in S with string S1 as prefix and S2 as suffix is equal to that with S2 as prefix and S1 as suffix
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
shubham_rana_77
@shubham_rana_77
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
andrew1234
brizyyy
bvkhadiravana
ankthon
hunter2000
suresh07
catiksh98
rohitkumarsinghcna
hardikkoriintern
Article Tags :
expression-evaluation
Mathematical
Stack
Strings
Practice Tags :
Mathematical
Stack
Strings
Improve Article
Report Issue