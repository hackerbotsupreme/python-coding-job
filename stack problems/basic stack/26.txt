Convert Infix To Prefix Notation

Difficulty Level : Medium
Last Updated : 27 Jan, 2023
Read
Discuss(50+)
Courses
Practice
Video
Humans use infix expressions on a day-to-day basis, but the nature of infix notation means that compound expressions are generally not evaluated in a linear fashion.  Conventions governing operator precedence—which includes the use of parentheses—are a means of removing the very likely possibility that a given combination of operators and operands would otherwise give rise to ambiguous expressions, such as 12 ÷ 6 × 3, which could evaluate to either 6 or ⅔.  Infix expressions are, therefore, not evaluated in a linear, left-to-right fashion, but in an order of priority determined by the laws of operator precedence.  This doesn’t lend itself to the way computers generally perform operations: sequentially, and one-at-a-time.  Prefix and postfix notations, on the other hand, build compound expressions that are never ambiguous, as they only ever yield a singular possible result that depends solely on the order in which the operators and operands appear in an expression when processed in a linear fashion.  Without the added complication of parentheses and other rules of precedence, computers can evaluate prefix and postfix expressions simply as a set of instructions for them to follow in the order they are given.

Given two operands a                              and b                              and an operator \odot                              , the infix notation implies that O will be placed in between a and b i.e a \odot b                              . When the operator is placed after both operands i.e ab\odot                              , it is called postfix notation. And when the operator is placed before the operands i.e \odot a b                              , the expression in prefix notation.
Given any infix expression, we can obtain the equivalent prefix and postfix format.

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Examples: 

Input : A * B + C / D
Output : + * A B/ C D 

Input : (A - B/C) * (A/K-L)
Output : *-A/BC-/AKL
To convert an infix to postfix expression refer to this article Stack | Set 2 (Infix to Postfix). We use the same to convert Infix to Prefix.

Step 1: Reverse the infix expression i.e A+B*C will become C*B+A. Note while reversing each ‘(‘ will become ‘)’ and each ‘)’ becomes ‘(‘.
Step 2: Obtain the “nearly” postfix expression of the modified expression i.e CB*A+.
Step 3: Reverse the postfix expression. Hence in our example prefix is +A*BC.
Note that for Step 2, we don’t use the postfix algorithm as it is. There is a minor change in the algorithm. As per https://www.geeksforgeeks.org/stack-set-2-infix-to-postfix/ , we have to pop all the operators from the stack which are greater than or equal to in precedence than that of the scanned operator. But here, we have to pop all the operators from the stack which are greater in precedence than that of the scanned operator. Only in the case of “^” operator, we pop operators from the stack which are greater than or equal to in precedence.

Below is the C++ implementation of the algorithm. 

C++
Java
C#
Javascript
Python3
def isOperator(c):
    return (not c.isalpha()) and (not c.isdigit())
 
def getPriority(c):
    if c == '-' or c == '+':
        return 1
    elif c == '*' or c == '/':
        return 2
    elif c == '^':
        return 3
    return 0
 
def infixToPostfix(infix):
    infix = '(' + infix + ')'
    l = len(infix)
    char_stack = []
    output = ""
 
    for i in range(l):
        if infix[i].isalpha() or infix[i].isdigit():
            output += infix[i]
        elif infix[i] == '(':
            char_stack.append(infix[i])
        elif infix[i] == ')':
            while char_stack[-1] != '(':
                output += char_stack.pop()
            char_stack.pop()
        else:
            if isOperator(char_stack[-1]):
                if infix[i] == '^':
                    while getPriority(infix[i]) <= getPriority(char_stack[-1]):
                        output += char_stack.pop()
                else:
                    while getPriority(infix[i]) < getPriority(char_stack[-1]):
                        output += char_stack.pop()
                char_stack.append(infix[i])
 
    while len(char_stack) != 0:
        output += char_stack.pop()
    return output
 
def infixToPrefix(infix):
    l = len(infix)
 
    infix = infix[::-1]
 
    for i in range(l):
        if infix[i] == '(':
            infix[i] = ')'
        elif infix[i] == ')':
            infix[i] = '('
 
    prefix = infixToPostfix(infix)
    prefix = prefix[::-1]
 
    return prefix
 
s = "x+y*z/w+u"
print(infixToPrefix(s))
Output


++x/*yzwu
Time Complexity: O(n)

Stack operations like push() and pop() are performed in constant time. Since we scan all the characters in the expression once the complexity is linear in time i.e \ \mathcal{O}(n)                       

Auxiliary Space: O(n) due to recursive stack space





Like
94
Previous
Delete array elements which are smaller than next or become smaller
Next
Next Greater Element (NGE) for every element in given Array
Related Articles
1.
Program to convert Infix notation to Expression Tree
2.
Prefix to Infix Conversion
3.
Infix to Prefix conversion using two stacks
4.
Convert Infix expression to Postfix expression
5.
Postfix to Infix
6.
Infix to Postfix using different Precedence Values for In-Stack and Out-Stack
7.
Check if count of substrings in S with string S1 as prefix and S2 as suffix is equal to that with S2 as prefix and S1 as suffix
8.
Print all words matching a pattern in CamelCase Notation Dictionary
9.
Maximum length prefix of one string that occurs as subsequence in another
10.
Longest Common Prefix using Word by Word Matching
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
Sayan Mahapatra
@Sayan Mahapatra
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
zen716
sandravsnair
Rajput-Ji
jiaxuantw
i_m_inevitable
202051112
shitalpatil94612
GauravRajput1
rohitkavitake3012
hardikkoriintern
technophpfij
cjk
satwiksuman
Article Tags :
expression-evaluation
Stack
Strings
Practice Tags :
Stack
Strings
Improve Article
Report Issue