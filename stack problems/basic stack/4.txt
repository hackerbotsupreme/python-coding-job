Implement a stack using singly linked list

Difficulty Level : Easy
Last Updated : 11 Jan, 2023
Read
Discuss
Courses
Practice
Video
To implement a stack using the singly linked list concept, all the singly linked list operations should be performed based on Stack operations LIFO(last in first out) and with the help of that knowledge, we are going to implement a stack using a singly linked list. 

So we need to follow a simple rule in the implementation of a stack which is last in first out and all the operations can be performed with the help of a top variable. Let us learn how to perform Pop, Push, Peek, and Display operations in the following article:



In the stack Implementation, a stack contains a top pointer. which is the “head” of the stack where pushing and popping items happens at the head of the list. The first node has a null in the link field and second node-link has the first node address in the link field and so on and the last node address is in the “top” pointer.


The main advantage of using a linked list over arrays is that it is possible to implement a stack that can shrink or grow as much as needed. Using an array will put a restriction on the maximum capacity of the array which can lead to stack overflow. Here each new node will be dynamically allocated. so overflow is not possible.

Stack Operations: 
push(): Insert a new element into the stack i.e just insert a new element at the beginning of the linked list.
pop(): Return the top element of the Stack i.e simply delete the first element from the linked list.
peek(): Return the top element.
display(): Print all elements in Stack.
Push Operation:
Initialise a node
Update the value of that node by data i.e. node->data = data
Now link this node to the top of the linked list
And update top pointer to the current node
Pop Operation:
First Check whether there is any node present in the linked list or not, if not then return
Otherwise make pointer let say temp to the top node and move forward the top node by 1 step
Now free this temp node
Peek Operation:
Check if there is any node present or not, if not then return.
Otherwise return the value of top node of the linked list
Display Operation:
Take a temp node and initialize it with top pointer 
Now start traversing temp till it encounters NULL
Simultaneously print the value of the temp node
 
Below is the implementation of the above operations 

C++
Java
Python3
# python3 program to Implement a stack
# using singly linked list
  
class Node:
  
    # Class to create nodes of linked list
    # constructor initializes node automatically
    def __init__(self, data):
        self.data = data
        self.next = None
  
  
class Stack:
  
    # head is default NULL
    def __init__(self):
        self.head = None
  
    # Checks if stack is empty
    def isempty(self):
        if self.head == None:
            return True
        else:
            return False
  
    # Method to add data to the stack
    # adds to the start of the stack
    def push(self, data):
  
        if self.head == None:
            self.head = Node(data)
  
        else:
            newnode = Node(data)
            newnode.next = self.head
            self.head = newnode
  
    # Remove element that is the current head (start of the stack)
    def pop(self):
  
        if self.isempty():
            return None
  
        else:
            # Removes the head node and makes
            # the preceding one the new head
            poppednode = self.head
            self.head = self.head.next
            poppednode.next = None
            return poppednode.data
  
    # Returns the head node data
    def peek(self):
  
        if self.isempty():
            return None
  
        else:
            return self.head.data
  
    # Prints out the stack
    def display(self):
  
        iternode = self.head
        if self.isempty():
            print("Stack Underflow")
  
        else:
  
            while(iternode != None):
  
                print(iternode.data, end = "")
                iternode = iternode.next
                if(iternode != None):
                    print(" -> ", end = "")
            return
  
  
# Driver code
if __name__ == "__main__":
  MyStack = Stack()
    
  MyStack.push(11)
  MyStack.push(22)
  MyStack.push(33)
  MyStack.push(44)
  
  # Display stack elements
  MyStack.display()
  
  # Print top element of stack
  print("\nTop element is ", MyStack.peek())
  
  # Delete top elements of stack
  MyStack.pop()
  MyStack.pop()
  
  # Display stack elements
  MyStack.display()
  
  # Print top element of stack
  print("\nTop element is ", MyStack.peek())
  
# This code is contributed by Mathew George
C#
Javascript
Output


44 -> 33 -> 22 -> 11
Top element is 44
22 -> 11
Top element is 22
Time Complexity: O(1), for all push(), pop(), and peek(), as we are not performing any kind of traversal over the list. We perform all the operations through the current pointer only.
Auxiliary Space: O(N), where N is the size of the stack

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
123
Previous
Queue - Linked List Implementation
Next
Introduction to Stack - Data Structure and Algorithm Tutorials
Related Articles
1.
Program to implement Singly Linked List in C++ using class
2.
Convert Singly Linked List to XOR Linked List
3.
Difference between Singly linked list and Doubly linked list
4.
Convert singly linked list into circular linked list
5.
How to implement a Stack using list in C++ STL
6.
C program to create copy of a singly Linked List using Recursion
7.
How to insert a Node in a Singly Linked List at a given Position using Recursion
8.
Recursive selection sort for singly linked list | Swapping node links
9.
C Program to reverse each node value in Singly Linked List
10.
Delete all Prime Nodes from a Singly Linked List
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
Rajput-Ji
@Rajput-Ji
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
29AjayKumar
AmAnhasNoName
SumanyuChaudhary
7knight
ryadav2
rag2127
gabaa406
geethika1129
polymatir3j
janardansthox
hardikkoriintern
ishank0106
anand__yadav
sweetyty
sagar0719kumar
Article Tags :
Technical Scripter 2018
Linked List
Stack
Technical Scripter
Practice Tags :
Linked List
Stack