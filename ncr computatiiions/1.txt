Binomial Coefficient | DP-9

Difficulty Level : Medium
Last Updated : 10 Jan, 2023
Read
Discuss(20+)
Courses
Practice
Video
The following are the common definitions of Binomial Coefficients. 

A binomial coefficient C(n, k) can be defined as the coefficient of x^k in the expansion of (1 + x)^n.

A binomial coefficient C(n, k) also gives the number of ways, disregarding order, that k objects can be chosen from among n objects more formally, the number of k-element subsets (or k-combinations) of a n-element set.

The Problem 
Write a function that takes two parameters n and k and returns the value of Binomial Coefficient C(n, k). For example, your function should return 6 for n = 4 and k = 2, and it should return 10 for n = 5 and k = 2.


Recommended Problem
nCr
Dynamic Programming
Mathematical
+1 more
Solve Problem
Submission count: 2.1L
1) Optimal Substructure 
The value of C(n, k) can be recursively calculated using the following standard formula for Binomial Coefficients.  

   C(n, k) = C(n-1, k-1) + C(n-1, k)
   C(n, 0) = C(n, n) = 1
Following is a simple recursive implementation that simply follows the recursive structure mentioned above.  

C++
C
Java
Python3
# A naive recursive Python implementation
 
 
def binomialCoeff(n, k):
 
    if k > n:
        return 0
    if k == 0 or k == n:
        return 1
 
    # Recursive Call
    return binomialCoeff(n-1, k-1) + binomialCoeff(n-1, k)
 
 
# Driver Program to test ht above function
n = 5
k = 2
print ("Value of C(%d,%d) is (%d)" % (n, k,
                                     binomialCoeff(n, k)))
 
# This code is contributed by Nikhil Kumar Singh (nickzuck_007)
C#
PHP
Javascript
Output


Value of C(5, 2) is 10
Time Complexity: O(n*max(k,n-k)) 

Auxiliary Space: O(n*max(k,n-k))

2) Overlapping Subproblems 
It should be noted that the above function computes the same subproblems again and again. See the following recursion tree for n = 5 an k = 2. The function C(3, 1) is called two times. For large values of n, there will be many common subproblems. 
 

Binomial Coefficients Recursion tree 
Binomial Coefficients Recursion tree for C(5,2)

Since the same subproblems are called again, this problem has the Overlapping Subproblems property. So the Binomial Coefficient problem has both properties (see this and this) of a dynamic programming problem. Like other typical Dynamic Programming(DP) problems, re-computations of the same subproblems can be avoided by constructing a temporary 2D-array C[][] in a bottom-up manner. Following is Dynamic Programming-based implementation. 

C++
C
Java
Python3
# A Dynamic Programming based Python
# Program that uses table C[][]
# to calculate the Binomial Coefficient
 
# Returns value of Binomial Coefficient C(n, k)
 
 
def binomialCoef(n, k):
    C = [[0 for x in range(k+1)] for x in range(n+1)]
 
    # Calculate value of Binomial
    # Coefficient in bottom up manner
    for i in range(n+1):
        for j in range(min(i, k)+1):
            # Base Cases
            if j == 0 or j == i:
                C[i][j] = 1
 
            # Calculate value using
            # previously stored values
            else:
                C[i][j] = C[i-1][j-1] + C[i-1][j]
 
    return C[n][k]
 
 
# Driver program to test above function
n = 5
k = 2
print("Value of C[" + str(n) + "][" + str(k) + "] is "
      + str(binomialCoef(n, k)))
 
# This code is contributed by Bhavya Jain
C#
PHP
Javascript
Output
Value of C[5][2] is 10
Time Complexity: O(n*k) 
Auxiliary Space: O(n*k)


Following is a space-optimized version of the above code. The following code only uses O(k). Thanks to AK for suggesting this method. 

C++
C
Java
Python3
# Python program for Optimized
# Dynamic Programming solution to
# Binomial Coefficient. This one
# uses the concept of pascal
# Triangle and less memory
 
 
def binomialCoeff(n, k):
 
    # Declaring an empty array
    C = [0 for i in range(k+1)]
    C[0] = 1  # since nC0 is 1
 
    for i in range(1, n+1):
 
        # Compute next row of pascal triangle using
        # the previous row
        j = min(i, k)
        while (j > 0):
            C[j] = C[j] + C[j-1]
            j -= 1
 
    return C[k]
 
 
# Driver Code
n = 5
k = 2
print ("Value of C(%d,%d) is %d" % (n, k, binomialCoeff(n, k)))
 
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)
C#
PHP
Javascript
Output
Value of C(5, 2) is 10 
Time Complexity: O(n*k) 
Auxiliary Space: O(k)

Explanation: 
1==========>> n = 0, C(0,0) = 1 
1–1========>> n = 1, C(1,0) = 1, C(1,1) = 1 
1–2–1======>> n = 2, C(2,0) = 1, C(2,1) = 2, C(2,2) = 1 
1–3–3–1====>> n = 3, C(3,0) = 1, C(3,1) = 3, C(3,2) = 3, C(3,3)=1 
1–4–6–4–1==>> n = 4, C(4,0) = 1, C(4,1) = 4, C(4,2) = 6, C(4,3)=4, C(4,4)=1 
So here every loop on i, builds i’th row of pascal triangle, using (i-1)th row
At any time, every element of array C will have some value (ZERO or more) and in the next iteration, the value for those elements comes from the previous iteration. 
In statement, 
C[j] = C[j] + C[j-1] 
The right-hand side represents the value coming from the previous iteration (A row of Pascal’s triangle depends on the previous row). The left-Hand side represents the value of the current iteration which will be obtained by this statement. 

Let's say we want to calculate C(4, 3), 
i.e. n=4, k=3:

All elements of array C of size 4 (k+1) are
initialized to ZERO.

i.e. C[0] = C[1] = C[2] = C[3] = C[4] = 0;
Then C[0] is set to 1

For i = 1:
C[1] = C[1] + C[0] = 0 + 1 = 1 ==>> C(1,1) = 1

For i = 2:
C[2] = C[2] + C[1] = 0 + 1 = 1 ==>> C(2,2) = 1
C[1] = C[1] + C[0] = 1 + 1 = 2 ==>> C(2,1) = 2

For i=3:
C[3] = C[3] + C[2] = 0 + 1 = 1 ==>> C(3,3) = 1
C[2] = C[2] + C[1] = 1 + 2 = 3 ==>> C(3,2) = 3
C[1] = C[1] + C[0] = 2 + 1 = 3 ==>> C(3,1) = 3

For i=4:
C[4] = C[4] + C[3] = 0 + 1 = 1 ==>> C(4,4) = 1
C[3] = C[3] + C[2] = 1 + 3 = 4 ==>> C(4,3) = 4
C[2] = C[2] + C[1] = 3 + 3 = 6 ==>> C(4,2) = 6
C[1] = C[1] + C[0] = 3 + 1 = 4 ==>> C(4,1) = 4

C(4,3) = 4 is would be the answer in our example.
Memoization Approach: The idea is to create a lookup table and follow the recursive top-down approach. Before computing any value, we check if it is already in the lookup table. If yes, we return the value. Else we compute the value and store it in the lookup table. Following is the Top-down approach of dynamic programming to finding the value of the Binomial Coefficient. 

C++
Java
Python3
# A Dynamic Programming based solution
# that uses table dp[][] to calculate
# the Binomial Coefficient. A naive
# recursive approach with table
# Python3 implementation
 
# Returns value of Binomial
# Coefficient C(n, k)
def binomialCoeffUtil(n, k, dp):
     
    # If value in lookup table then return
    if dp[n][k] != -1:
        return dp[n][k]
 
    # Store value in a table before return
    if k == 0:
        dp[n][k] = 1
        return dp[n][k]
     
    # Store value in table before return
    if k == n:
        dp[n][k] = 1
        return dp[n][k]
     
    # Save value in lookup table before return
    dp[n][k] = (binomialCoeffUtil(n - 1, k - 1, dp) +
                binomialCoeffUtil(n - 1, k, dp))
                 
    return dp[n][k]
 
def binomialCoeff(n, k):
     
    # Make a temporary lookup table
    dp = [ [ -1 for y in range(k + 1) ]
                for x in range(n + 1) ]
 
    return binomialCoeffUtil(n, k, dp)
 
# Driver code
n = 5
k = 2
 
print("Value of C(" + str(n) +
               ", " + str(k) + ") is",
               binomialCoeff(n, k))
 
# This is code is contributed by Prateek Gupta
C#
Javascript
 Time Complexity: O(n*k)

Auxiliary Space: O(n*k)

Output
Value of C(5, 2) is 10
Cancellation of factors between numerator and denominator:

nCr = (n-r+1)*(n-r+2)*….*n / (r!)

Create an array arr of numbers from n-r+1 to n which will be of size r. As nCr is always an integer, all numbers in the denominator should cancel with the product of the numerator (represented by arr).

for i = 1 to i = r,

        search arr, if arr[j] and i have gcd>1, divide both by the gcd and when i becomes 1, stop the search

Now, the answer is just the product of arr, whose value mod 10^9+7 can be found using a single pass and the formula use (a*b)%mod = (a%mod * b%mod)%mod 

C++
Java
Python3
import math
class GFG:
    def nCr(self, n, r):
        def gcd(a,b): # function to find gcd of two numbers in O(log(min(a,b)))
            if b==0: # base case
                return a
            return gcd(b,a%b)
        if r>n:
            return 0
        if r>n-r: # C(n,r) = C(n,n-r) better time complexity for lesser r value
            r = n-r
        mod = 10**9 + 7
        arr = list(range(n-r+1,n+1)) # array of elements from n-r+1 to n
        ans = 1
        for i in range(1,r+1): # for numbers from 1 to r find arr[j] such that gcd(i,arr[j])>1
            j=0
            while j<len(arr):
                x = gcd(i,arr[j])
                if x>1:
                    arr[j] //= x # if gcd>1, divide both by gcd
                    i //= x
                if arr[j]==1: # if element becomes 1, its of no use anymore so delete from arr
                    del arr[j]
                    j -= 1
                if i==1:
                    break # if i becomes 1, no need to search arr
                j += 1
        for i in arr: # single pass to multiply the numerator
            ans = (ans*i)%mod
        return ans
     # Driver code
n = 5
k = 2
ob = GFG()
print("Value of C(" + str(n) +
               ", " + str(k) + ") is",
               ob.nCr(n, k))
  
# This is code is contributed by Gautam Wadhwani
C#
Javascript
Output
Value of C(5, 2) is 10
Time Complexity: O(( min(r, n-r)^2 ) * log(n)),   useful when n >> r  or  n >> (n-r)

Auxiliary Space: O(min(r, n-r))

See this for GCD in logarithmic time

Prime factorization of every number from 1 to n using Sieve of Eratosthenes :

1. Create an array SPF of size n+1 to the smallest prime factor of each number from 1 to n 

Set SPF[i] = i for all i = 1 to i = n
2. Use Sieve of Eratosthenes:

for i = 2 to i = n:
    if i is prime,
       for all multiples j of i, j<=n:
           if SPF[j] equals j, set SPF[j] = i
3. Once, we know the SPF of each number from 1 to n, we can find the prime factorization of any number from 1 to n in O(log(n)) time using recursive division by SPF until the number becomes 1

Now, nCr  =  (n-r+1)*(r+2)* ... *(n) / (r)!
4. Create a dictionary (or hashmap) to store the frequency of each prime in the prime factorization of the actual value of nCr.

5. So, just calculate the frequency of each prime in nCr and multiply them raised to the power of their frequency.

6. For the numerator, iterate through i = n-r+1 to i = n, and for all prime factors of i, store their frequency in a dictionary.

( prime_pow[prime_factor] += freq_in_i ) 
7. For the denominator, iterate through i = 1 to i = r and now subtract the frequency instead of adding.

8. Now, traverse the dictionary and multiply the answer to (prime ^ prime_pow[prime]) % (10^9 + 7)

ans = (ans * pow(prime, prime_pow[prime], mod) ) % mod 
C++
Java
Python3
# Python code for the above approach
import math
 
class GFG:
    def nCr(self, n, r):
       
        # Base case
        if r > n: 
            return 0
           
        # C(n,r) = C(n,n-r) Complexity for this
        # code is lesser for lower n-r
        if n - r > r: 
            r = n - r
             
        # List to store smallest prime factor
        # of every number from 1 to n
        SPF = [i for i in range(n+1)]
        for i in range(4, n+1, 2):
           
            # set smallest prime factor of
            # all even numbers as 2
            SPF[i] = 2
     
        for i in range(3, n+1, 2): 
         
            if i*i > n:
                break
               
            # Check if i is prime
            if SPF[i] == i: 
                 
                # All multiples of i are composite
                # (and divisible by i) so add i to
                # their prime factorization getpow(j,i) times
                for j in range(i*i, n+1, i):
                    if SPF[j] == j:
                       
                        # set smallest prime factor
                        # of j to i only if it is
                        # not previously set
                        SPF[j] = i
         
         # dictionary to store power of each prime in C(n,r)
        prime_pow = {} 
         
        # For numerator count frequency
        # of each prime factor
        for i in range(r+1, n+1):
            t = i
             
            # Recursive division to
            # find prime factorization of i
            while t > 1:
                if not SPF[t] in prime_pow:
                    prime_pow[SPF[t]] = 1
                else:
                    prime_pow[SPF[t]] += 1
                t //= SPF[t]
         
        # For denominator subtract the
        # power of each prime factor
        for i in range(1, n-r+1): 
            t = i
             
            # Recursive division to
            # find prime factorization of i
            while t > 1: 
                prime_pow[SPF[t]] -= 1
                t //= SPF[t]
        ans = 1
        mod = 10**9 + 7
         
         # Use (a*b)%mod = (a%mod * b%mod)%mod
        for i in prime_pow:
           
            # pow(base,exp,mod) is used to
            # find (base^exp)%mod fast
            ans = (ans*pow(i, prime_pow[i], mod)) % mod
        return ans
 
 
# Driver code
n = 5
k = 2
ob = GFG()
print("Value of C(" + str(n) +
      ", " + str(k) + ") is",
      ob.nCr(n, k))
 
# This is code is contributed by Gautam Wadhwani
C#
Javascript
Output
Value of C(5, 2) is 10
Time Complexity: O(n*log(n)),  so useful when r->n/2

Auxiliary Space: O(n)

See this for Prime factorization in O(log(n))

Another Approach: (Modular Inversion technique)

1. The general formula of nCr is ( n*(n-1)*(n-2)* … *(n-r+1) ) / (r!). We can directly use this formula to find nCr. But that will overflow out of bound. We need to find nCr mod m so that it doesn’t overflow. We can easily do it with modular arithmetic formula. 

for the  n*(n-1)*(n-2)* ... *(n-r+1) part we can use the formula,
(a*b) mod m = ((a % m) * (b % m)) % m
2. and for the 1/r! part, we need to find the modular inverse of every number from 1 to r. Then use the same formula above with a modular inverse of 1 to r. We can find modular inverse in O(r) time using  the formula, 

inv[1] = 1
inv[i] = − ⌊m/i⌋ * inv[m mod i] mod m
To use this formula, m has to be a prime.
In the practice problem, we need to show the answer with modulo 1000000007 which is a prime. 

So, this technique will work.
 

C++
Java
Python3
# Python3 program for the above approach
 
# Function to find binomial
# coefficient
def binomialCoeff(n, r):
     
    if (r > n):
        return 0
         
    m = 1000000007
    inv = [0 for i in range(r + 1)]
    inv[0] = 1;
    if(r+1>=2)
    inv[1] = 1;
 
    # Getting the modular inversion
    # for all the numbers
    # from 2 to r with respect to m
    # here m = 1000000007
    for i in range(2, r + 1):
        inv[i] = m - (m // i) * inv[m % i] % m
 
    ans = 1
 
    # for 1/(r!) part
    for i in range(2, r + 1):
        ans = ((ans % m) * (inv[i] % m)) % m
 
    # for (n)*(n-1)*(n-2)*...*(n-r+1) part
    for i in range(n, n - r, -1):
        ans = ((ans % m) * (i % m)) % m
         
    return ans
 
# Driver code
n = 5
r = 2
 
print("Value of C(" ,n , ", " , r ,
      ") is ",binomialCoeff(n, r))
 
# This code is contributed by rohan07
C#
Javascript
Output
Value of C(5, 2) is 10
Time Complexity: O(n+k)

Auxiliary Space: O(k) 

See this for Space and time-efficient Binomial Coefficient 

References: 
http://www.csl.mtu.edu/cs4321/www/Lectures/Lecture%2015%20-%20Dynamic%20Programming%20Binomial%20Coefficients.htm 

https://cp-algorithms.com/algebra/module-inverse.html

Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.  





Like
131
Previous
Bell Numbers (Number of ways to Partition a Set)
Next
Permutation Coefficient
Related Articles
1.
Space and time efficient Binomial Coefficient
2.
Maximum binomial coefficient term value
3.
Sum of product of r and rth Binomial Coefficient (r * nCr)
4.
Central binomial coefficient
5.
Eggs dropping puzzle (Binomial Coefficient and Binary Search Solution)
6.
Permutation Coefficient
7.
Clustering Coefficient in Graph Theory
8.
Program to find correlation coefficient
9.
Fibonomial coefficient and Fibonomial triangle
10.
Replace the maximum element in the array by coefficient of range
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
jit_t
vt_m
Mithun Kumar
Shivi_Aggarwal
rathbhupendra
Akanksha_Rai
MohammadMudassir
PrateekGupta10
mr_hitman
Rajput-Ji
29AjayKumar
mansimar_anand
divyanshusrivastava1
1505086kmr
gautamsw5
amit143katiyar
divyesh072019
rohan07
jyoti369
surindertarika1234
lokeshpotta20
avanitrachhadiya2155
rag2127
rajsanghavi9
shivanisinghss2110
akshaysingh98088
reenadevi98412200
simmytarika5
GauravRajput1
amartyaghoshgfg
prophet1999
surinderdawra388
kaushallodd62
jainlovely450
Article Tags :
binomial coefficient
Dynamic Programming
Mathematical
Practice Tags :
Dynamic Programming
Mathematical