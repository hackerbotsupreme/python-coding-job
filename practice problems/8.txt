Fast Fourier Transformation for polynomial multiplication

Difficulty Level : Expert
Last Updated : 22 Jul, 2022
Read
Discuss
Courses
Practice
Video
Given two polynomial A(x) and B(x), find the product C(x) = A(x)*B(x). There is already an O(n^2     ) naive approach to solve this problem. here. This approach uses the coefficient form of the polynomial to calculate the product.
A coefficient representation of a polynomial A(x)=\sum_{j=0}^{n-1}a_jx^j     is a = a0, a1, …, an-1.

Example-
A(x) = 6x^3 + 7x^2 - 10x + 9     
B(x) = -2x^3 + 4x - 5     
Coefficient representation of A(x) = (9, -10, 7, 6)
Coefficient representation of B(x) = (-5, 4, 0, -2)

Input :
 A[] = {9, -10, 7, 6}
 B[] = {-5, 4, 0, -2}
Output : 
-12x^6 - 14x^5 + 44x^4 - 20x^3 -75x^2 + 86x - 45
We can do better, if we represent the polynomial in another form.

yes
Idea is to represent polynomial in point-value form and then compute the product. A point-value representation of a polynomial A(x) of degree-bound n is a set of n point-value pairs is{ (x0, y0), (x1, y1), …, (xn-1, yn-1)} such that all of the xi are distinct and yi = A(xi) for i = 0, 1, …, n-1. 


Example

 A(x) = x^3 - 2x + 1 xi    -- 0, 1, 2, 3 A(xi) -- 1, 0, 5, 22
Point-value representation of above polynomial is { (0, 1), (1, 0), (2, 5), (3, 22) }. Using Horner’s method, (discussed here), n-point evaluation takes time O(n^2     ). It’s just calculation of values of A(x) at some x for n different points, so time complexity is O(n^2     ). Now that the polynomial is converted into point value, it can be easily calculated C(x) = A(x)*B(x) again using horner’s method. This takes O(n) time. An important point here is C(x) has degree bound 2n, then n points will give only n points of C(x), so for that case we need 2n different values of x to calculate 2n different values of y. Now that the product is calculated, the answer can to be converted back into coefficient vector form. To get back to coefficient vector form we use inverse of this evaluation. The inverse of evaluation is called interpolation. Interpolation using Lagrange’s formula gives point value-form to coefficient vector form of the polynomial.Lagrange’s formula is – 
A(x) = \sum^{n-1}_{k=0} y_{k} \frac{\prod _{j\neq k}(x-x_{j})}{\prod _{j\neq k}(x_{k}-x_{j})}     
So far we discussed,

What we understand so far !



.
This idea still solves the problem in O(n^2     ) time complexity. We can use any points we want as evaluation points, but by choosing the evaluation points carefully, we can convert between representations in only O(n log n) time. If we choose “complex roots of unity” as the evaluation points, we can produce a point-value representation by taking the discrete Fourier transform (DFT) of a coefficient vector. We can perform the inverse operation, interpolation, by taking the “inverse DFT” of point-value pairs, yielding a coefficient vector. Fast Fourier Transform (FFT) can perform DFT and inverse DFT in time O(nlogn).

DFT 
DFT is evaluating values of polynomial at n complex nth roots of unity \omega ^{0}_{n},\omega ^{1}_{n},\omega ^{2}_{n}......\omega ^{n-1}_{n}     . So, for y_{k}=\omega ^{k}_{n}     k = 0, 1, 2, …, n-1, y = (y0, y1, y2, …, yn-1) is Discrete fourier Transformation (DFT) of given polynomial.
The product of two polynomials of degree-bound n is a polynomial of degree-bound 2n. Before evaluating the input polynomials A and B, therefore, we first double their degree-bounds to 2n by adding n high-order coefficients of 0. Because the vectors have 2n elements, we use “complex 2nth roots of unity, ” which are denoted by the W2n (omega 2n). We assume that n is a power of 2; we can always meet this requirement by adding high-order zero coefficients.

FFT
Here is the Divide-and-conquer strategy to solve this problem.
Define two new polynomials of degree-bound n/2, using even-index and odd-index coefficients of A(x) separately
A0(x) = a0 + a2x + a4x^2 + ... + an-2x^n/2-1.     
A1(x) = a1 + a3x + a5x^2 + ... + an-1x^n/2-1.     
A(x) = A0(x^2) + xA1(x^2)     
The problem of evaluating A(x) at \omega ^{0}_{n},\omega ^{1}_{n},\omega ^{2}_{n}......\omega ^{n-1}_{n}     reduces to evaluating the degree-bound n/2 polynomials A0(x) and A1(x) at the points 
(\omega ^{0}_{n})^{2},(\omega ^{1}_{n})^{2},......(\omega ^{n-1}_{n})^{2}     
Now combining the results by A(x) = A0(x^2) + xA1(x^2) 

The list (\omega ^{0}_{n})^{2},(\omega ^{1}_{n})^{2},......(\omega ^{n-1}_{n})^{2}     does not contain n distinct values, but n/2 complex n/2th roots of unity. Polynomials A0 and A1 are recursively evaluated at the n complex nth roots of unity. Subproblems have exactly the same form as the original problem, but are half the size. So recurrence formed is T(n) = 2T(n/2) + O(n), i.e complexity O(nlogn).

Algorithm
1. Add n higher-order zero coefficients to A(x) and B(x)
2. Evaluate A(x) and B(x) using FFT for 2n points
3. Pointwise multiplication of point-value forms
4. Interpolate C(x) using FFT to compute inverse DFT
Pseudo code of recursive FFT

Recursive_FFT(a){
n = length(a) // a is the input coefficient vector
if n = 1
  then return a

// wn is principle complex nth root of unity.
wn = e^(2*pi*i/n)
w = 1

// even indexed coefficients
A0 = (a0, a2, ..., an-2 )

// odd indexed coefficients
A1 = (a1, a3, ..., an-1 ) 

y0 = Recursive_FFT(A0) // local array
y1 = Recursive-FFT(A1) // local array

for k = 0 to n/2 - 1

  // y array stores values of the DFT 
  // of given polynomial. 
  do y[k] = y0[k] + w*y1[k]  
     y[k+(n/2)] = y0[k] - w*y1[k]
     w = w*wn
return y
}
Recursion Tree of Above Execution-
Fast Fourier Transformation for polynomial multiplication

Why does this work?
y_{k} = y_{k}^{[0]} + \omega ^{k}_{n}y^{[1]}_{k}\newline y_{k} = A^{[0]}(\omega ^{2k}_{n})) + \omega ^{k}_{n}A^{[1]}(\omega ^{2k}_{n}) \newline y_{k} = A( \omega ^{k}_{n}) \newline \newline y_{k+(n/2)} = y_{k}^{[0]} - \omega ^{k}_{n}y^{[1]}_{k}\newline y_{k+(n/2)} = y_{k}^{[0]} + \omega ^{k+(n/2)}_{n} y_{k}^{[1]}\newline y_{k+(n/2)} = A^{[0]}(\omega ^{2k}_{n})) + \omega ^{k+(n/2)}_{n}A^{[1]}(\omega ^{2k}_{n})\newline y_{k+(n/2)} = A^{[0]}(\omega ^{2k+n}_{n})) + \omega ^{k+(n/2)}_{n}A^{[1]}(\omega ^{2k+n}_{n})\newline y_{k+(n/2)} = A^{[0]}(\omega ^{k+(n/2)}_{n}))     
since, \omega ^{k}_{n/2} = \omega ^{2k}_{n} , \omega ^{2k+n}_{n} = \omega ^{2k}_{n} , \omega ^{k+(n/2)}_{n} = -\omega ^{k}_{n}     
Thus, the vector y returned by Recursive-FFT is indeed the DFT of the input
vector a.

C++
Python3
from math import sin,cos,pi
 
# Recursive function of FFT
def fft(a):
 
    n = len(a)
 
    # if input contains just one element
    if n == 1:
        return [a[0]]
 
    # For storing n complex nth roots of unity
    theta = -2*pi/n
    w = list( complex(cos(theta*i), sin(theta*i)) for i in range(n) )
     
    # Separe coefficients
    Aeven = a[0::2]
    Aodd  = a[1::2]
 
    # Recursive call for even indexed coefficients
    Yeven = fft(Aeven)
 
    # Recursive call for odd indexed coefficients
    Yodd = fft(Aodd)
 
    # for storing values of y0, y1, y2, ..., yn-1.
    Y = [0]*n
    
    middle = n//2
    for k in range(n//2):
        w_yodd_k  = w[k] * Yodd[k]
        yeven_k   =  Yeven[k]
         
        Y[k]          =  yeven_k  +  w_yodd_k
        Y[k + middle] =  yeven_k  -  w_yodd_k
     
    return Y
 
 
# Driver code
if __name__ == '__main__':
 
    a = [1, 2, 3, 4]
    b = fft(a)
    for B in b:
        print(B)
Javascript
Input:  1 2 3 4
Output:
(10, 0)
(-2, 2)
(-2, 0)
(-2,-2)
Interpolation 
Switch the roles of a and y.
Replace wn by wn^-1.
Divide each element of the result by n.
Time Complexity: O(nlogn).
 

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
11
Previous
N'th palindrome of K digits
Next
Sgn value of a polynomial
Related Articles
1.
Iterative Fast Fourier Transformation for polynomial multiplication
2.
Python | Inverse Fast Fourier Transformation
3.
Exponential Squaring (Fast Modulo Multiplication)
4.
Karatsuba Algorithm for fast Multiplication of Large Decimal Numbers represented as Strings
5.
Karatsuba algorithm for fast multiplication using Divide and Conquer algorithm
6.
Window to Viewport Transformation in Computer Graphics with Implementation
7.
Python | Box-Cox Transformation
8.
Fast method to calculate inverse square root of a floating point number in IEEE 754 format
9.
Fast inverse square root
10.
Fast Doubling method to find the Nth Fibonacci number
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
rohit_is
@rohit_is
Vote for difficulty
Current difficulty : Expert
Easy
Normal
Medium
Hard
Expert
Improved By :
yuvrajaagwane
surindertarika1234
raafm
phasing17
Article Tags :
Divide and Conquer
Mathematical
Practice Tags :
Divide and Conquer
Mathematical