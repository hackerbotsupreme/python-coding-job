Maximum Product Cutting | DP-36

Difficulty Level : Medium
Last Updated : 21 Jun, 2022
Read
Discuss(20+)
Courses
Practice
Video
Given a rope of length n meters, cut the rope in different parts of integer lengths in a way that maximizes product of lengths of all parts. You must make at least one cut. Assume that the length of rope is more than 2 meters. 

Examples: 

Input: n = 2
Output: 1 (Maximum obtainable product is 1*1)

Input: n = 3
Output: 2 (Maximum obtainable product is 1*2)

Input: n = 4
Output: 4 (Maximum obtainable product is 2*2)

Input: n = 5
Output: 6 (Maximum obtainable product is 2*3)

Input: n = 10
Output: 36 (Maximum obtainable product is 3*3*4)
1) Optimal Substructure: 

This problem is similar to Rod Cutting Problem. We can get the maximum product by making a cut at different positions and comparing the values obtained after a cut. We can recursively call the same function for a piece obtained after a cut.
Let maxProd(n) be the maximum product for a rope of length n. maxProd(n) can be written as following.
maxProd(n) = max(i*(n-i), maxProdRec(n-i)*i) for all i in {1, 2, 3 .. n}

2) Overlapping Subproblems:

Following is simple recursive implementation of the problem. The implementation simply follows the recursive structure mentioned above. 

C++
Java
Python3
# The main function that returns maximum
# product obtainable from a rope of length n
 
def maxProd(n):
     
    # Base cases
    if (n == 0 or n == 1):
        return 0
  
    # Make a cut at different places
    # and take the maximum of all
    max_val = 0
    for i in range(1, n - 1):
        max_val = max(max_val, max(i * (n - i), maxProd(n - i) * i))
  
    #Return the maximum of all values
    return max_val;
 
  
# Driver program to test above functions
print("Maximum Product is ", maxProd(10));
     
# This code is contributed
# by Sumit Sudhakar
C#
PHP
Javascript
Output
Maximum Product is 36
Considering the above implementation, following is recursion tree for a Rope of length 5. 
 

maximium-product-cutting

In the above partial recursion tree, mP(3) is being solved twice. We can see that there are many subproblems which are solved again and again. Since same subproblems are called again, this problem has Overlapping Subproblems property. So the problem has both properties (see this and this) of a dynamic programming problem. Like other typical Dynamic Programming(DP) problems, recomputations of same subproblems can be avoided by constructing a temporary array val[] in bottom up manner.

C++
C
Java
Python3
# A Dynamic Programming solution for Max Product Problem
def maxProd(n):
   val= [0 for i in range(n+1)];
   
   # Build the table val in bottom up manner and return
   # the last entry from the table
   for i in range(1,n+1):
      max_val = 0;
      for j in range(1,i):
         max_val = max(max_val, (i-j)*j, j*val[i-j]);
      val[i] = max_val;
    return val[n];
 
# This code is contributed by gauravrajput1
C#
Javascript
Time Complexity of the Dynamic Programming solution is O(n^2) and it requires O(n) extra space.

A Tricky Solution: 

If we see some examples of this problems, we can easily observe following pattern. 
The maximum product can be obtained be repeatedly cutting parts of size 3 while size is greater than 4, keeping the last part as size of 2 or 3 or 4. For example, n = 10, the maximum product is obtained by 3, 3, 4. For n = 11, the maximum product is obtained by 3, 3, 3, 2. Following is the implementation of this approach. 

C++
Java
Python3
# The main function that returns the
# max possible product
 
def maxProd(n):
     
    # n equals to 2 or 3 must
    # be handled explicitly
    if (n == 2 or n == 3):
        return (n - 1)
  
    # Keep removing parts of size 3
    # while n is greater than 4
    res = 1
    while (n > 4):
        n -= 3;
          
        # Keep multiplying 3 to res
        res *= 3;
     
    # The last part multiplied
    # by previous parts
    return (n * res)
 
# Driver program to test above functions
print("Maximum Product is ", maxProd(10));
     
# This code is contributed
# by Sumit Sudhakar
C#
PHP
Javascript
Output
Maximum Product is 36
Recommended
Solve DSA problems on GfG Practice.

Solve Problems


Like
Next
Cutting a Rod | DP-13
Related Articles
1.
Maximum length possible by cutting N given woods into at least K pieces
2.
Maximum length of all possible K equal length ropes generated by cutting N ropes
3.
Number of ways of cutting a Matrix such that atleast one cell is filled in each part
4.
Cutting a Rod | DP-13
5.
Maximum Product Subarray | Added negative product case
6.
Maximum product from array such that frequency sum of all repeating elements in product is less than or equal to 2 * k
7.
Maximum element in an array such that its previous and next element product is maximum
8.
Split array into maximum possible subsets having product of their length with the maximum element at least K
9.
Maximize product of array by replacing array elements with its sum or product with element from another array
10.
Smallest pair of indices with product of subarray co-prime with product of the subarray on the left or right
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
Shivi_Aggarwal
ukasp
rag2127
avanitrachhadiya2155
hritikbhatnagar2182
sweetyty
umadevi9616
GauravRajput1
singghakshay
19i
sanjoy_62
hardikkoriintern
Article Tags :
Arrays
DSA
Dynamic Programming