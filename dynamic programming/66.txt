Dice Throw | DP-30

Difficulty Level : Hard
Last Updated : 28 Jul, 2022
Read
Discuss(30+)
Courses
Practice
Video
Given n dice each with m faces, numbered from 1 to m, find the number of ways to get sum X. X is the summation of values on each face when all the dice are thrown.

Recommended Problem
Dice throw
Mathematical
Algorithms
Amazon
Microsoft
Solve Problem
Submission count: 21.1K
The Naive approach is to find all the possible combinations of values from n dice and keep on counting the results that sum to X.

This problem can be efficiently solved using Dynamic Programming (DP).  

Let the function to find X from n dice is: Sum(m, n, X)
The function can be represented as:
Sum(m, n, X) = Finding Sum (X - 1) from (n - 1) dice plus 1 from nth dice
               + Finding Sum (X - 2) from (n - 1) dice plus 2 from nth dice
               + Finding Sum (X - 3) from (n - 1) dice plus 3 from nth dice
                  ...................................................
                  ...................................................
                  ...................................................
              + Finding Sum (X - m) from (n - 1) dice plus m from nth dice

So we can recursively write Sum(m, n, x) as following
Sum(m, n, X) = Sum(m, n - 1, X - 1) + 
               Sum(m, n - 1, X - 2) +
               .................... + 
               Sum(m, n - 1, X - m)
Why DP approach? 
The above problem exhibits overlapping subproblems. See the below diagram. Also, see this recursive implementation. Let there be 3 dice, each with 6 faces and we need to find the number of ways to get sum 8:
 

diceThrow2

 

Sum(6, 3, 8) = Sum(6, 2, 7) + Sum(6, 2, 6) + Sum(6, 2, 5) + 
               Sum(6, 2, 4) + Sum(6, 2, 3) + Sum(6, 2, 2)

To evaluate Sum(6, 3, 8), we need to evaluate Sum(6, 2, 7) which can 
recursively written as following:
Sum(6, 2, 7) = Sum(6, 1, 6) + Sum(6, 1, 5) + Sum(6, 1, 4) + 
               Sum(6, 1, 3) + Sum(6, 1, 2) + Sum(6, 1, 1)

We also need to evaluate Sum(6, 2, 6) which can recursively written
as following:
Sum(6, 2, 6) = Sum(6, 1, 5) + Sum(6, 1, 4) + Sum(6, 1, 3) +
               Sum(6, 1, 2) + Sum(6, 1, 1)
..............................................
..............................................
Sum(6, 2, 2) = Sum(6, 1, 1)
Please take a closer look at the above recursion. The sub-problems in RED are solved first time and sub-problems in BLUE are solved again (exhibit overlapping sub-problems). Hence, storing the results of the solved sub-problems saves time.

Following is implementation of Dynamic Programming approach.  

C++
Java
Python3
# Python3 program to find the number of ways to get sum 'x' with 'n' dice
# where every dice has 'm' faces
 
# The main function that returns number of ways to get sum 'x'
# with 'n' dice and 'm' with m faces.
def findWays(m,n,x):
    # Create a table to store results of subproblems. One extra
    # row and column are used for simplicity (Number of dice
    # is directly used as row index and sum is directly used
    # as column index). The entries in 0th row and 0th column
    # are never used.
    table=[[0]*(x+1) for i in range(n+1)] #Initialize all entries as 0
     
    for j in range(1,min(m+1,x+1)): #Table entries for only one dice
        table[1][j]=1
         
    # Fill rest of the entries in table using recursive relation
    # i: number of dice, j: sum
    for i in range(2,n+1):
        for j in range(1,x+1):
            for k in range(1,min(m+1,j)):
                table[i][j]+=table[i-1][j-k]
     
    #print(dt)
    # Uncomment above line to see content of table
     
    return table[-1][-1]
     
# Driver code
print(findWays(4,2,1))
print(findWays(2,2,3))
print(findWays(6,3,8))
print(findWays(4,2,5))
print(findWays(4,3,5))
 
# This code is contributed by MaheshwariPiyush
C#
PHP
Javascript
Output : 
 

0
2
21
4
6
Time Complexity: O(m * n * x) where m is number of faces, n is number of dice and x is given sum.

Auxiliary Space: O(n * x)
We can add the following two conditions at the beginning of findWays() to improve performance of the program for extreme cases (x is too high or x is too low) 

C++
Java
Python3
# Python3 implementation
def condition(m, n, x):
   
    # When x is so high that sum can not go beyond x even when we
    # get maximum value in every dice throw.
    if (m*n <= x):
        return (m*n == x)
 
    # When x is too low
    if (n >= x):
        return (n == x)
 
# This code is contributed by phasing17
C#
Javascript
With above conditions added, time complexity becomes O(1) when x >= m*n or when x <= n.

Following is the implementation of the Optimized Dynamic Programming approach. 

C++
Java
Python3
#  Python program
#  The main function that returns number of ways to get sum 'x'
#  with 'n' dice and 'm' with m faces.
 
 
def findWays(f, d, s):
    # Create a table to store results of subproblems. One extra
    # row and column are used for simplicity (Number of dice
    # is directly used as row index and sum is directly used
    # as column index). The entries in 0th row and 0th column
    # are never used.
    mem = [[0 for i in range(s+1)] for j in range(d+1)]
    # Table entries for no dices
    # If you do not have any data, then the value must be 0, so the result is 1
    mem[0][0] = 1
    # Iterate over dices
    for i in range(1, d+1):
 
        # Iterate over sum
        for j in range(1, s+1):
            # The result is obtained in two ways, pin the current dice and spending 1 of the value,
            # so we have mem[i-1][j-1] remaining combinations, to find the remaining combinations we
            # would have to pin the values ??above 1 then we use mem[i][j-1] to sum all combinations
            # that pin the remaining j-1's. But there is a way, when "j-f-1> = 0" we would be adding
            # extra combinations, so we remove the combinations that only pin the extrapolated dice face and
            # subtract the extrapolated combinations.
            mem[i][j] = mem[i][j - 1] + mem[i - 1][j - 1]
            if j - f - 1 >= 0:
                mem[i][j] -= mem[i - 1][j - f - 1]
    return mem[d][s]
 
# Driver code
 
print(findWays(4, 2, 1))
print(findWays(2, 2, 3))
print(findWays(6, 3, 8))
print(findWays(4, 2, 5))
print(findWays(4, 3, 5))
 
# This code is contributed by ankush_953
C#
Javascript
Output : 
 

0
2
21
4
6
Time Complexity: O(n * x) where n is number of dice and x is given sum.

Space Complexity: O(n * x) where n is number of dice and x is given sum.

Exercise: 
Extend the above algorithm to find the probability to get Sum > X.
This article is compiled by Aashish Barnwal. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above
 



Like
61
Previous
Amazon Interview Experience | On-Campus 2020 for SDE-1
Next
Top 20 Dynamic Programming Interview Questions
Related Articles
1.
Probability of getting more value in third dice throw
2.
Probability of hitting the target Nth time at Mth throw
3.
Maximum number of dots after throwing a dice N times
4.
Puzzle | Choose the game of Rolling Dice
5.
Count ways to obtain given sum by repeated throws of a dice
6.
Probability that the sum of all numbers obtained on throwing a dice N times lies between two given integers
7.
The dice problem
8.
Number of ways whose sum is greater than or equal to K
9.
Count ways to reach each index by taking steps that is multiple of incremented K
10.
Damerauâ€“Levenshtein distance
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
Mithun Kumar
MaheshwariPiyush
pedrohcd
ankush_953
29AjayKumar
rag2127
avanitrachhadiya2155
subhammahato348
umadevi9616
simmytarika5
phasing17
ajaymakvana
Article Tags :
Amazon
Dynamic Programming
Mathematical
Practice Tags :
Amazon
Dynamic Programming
Mathematical
Improve Article
Report Issue