Printing brackets in Matrix Chain Multiplication Problem

Difficulty Level : Hard
Last Updated : 27 Jan, 2023
Read
Discuss
Courses
Practice
Video
Prerequisite : Dynamic Programming | Set 8 (Matrix Chain Multiplication)

Given a sequence of matrices, find the most efficient way to multiply these matrices together. The problem is not actually to perform the multiplications, but merely to decide in which order to perform the multiplications.

We have many options to multiply a chain of matrices because matrix multiplication is associative. In other words, no matter how we parenthesize the product, the result will be the same. For example, if we had four matrices A, B, C, and D, we would have: 

(ABC)D = (AB)(CD) = A(BCD) = ....
However, the order in which we parenthesize the product affects the number of simple arithmetic operations needed to compute the product, or the efficiency. For example, suppose A is a 10 × 30 matrix, B is a 30 × 5 matrix, and C is a 5 × 60 matrix. Then,  

(AB)C = (10×30×5) + (10×5×60) = 1500 + 3000 = 4500 operations
A(BC) = (30×5×60) + (10×30×60) = 9000 + 18000 = 27000 operations.
Clearly the first parenthesization requires less number of operations.

Given an array p[] which represents the chain of matrices such that the ith matrix Ai is of dimension p[i-1] x p[i]. We need to write a function MatrixChainOrder() that should return the minimum number of multiplications needed to multiply the chain. 

Input:  p[] = {40, 20, 30, 10, 30}  
Output: Optimal parenthesization is  ((A(BC))D)
        Optimal cost of parenthesization is 26000
There are 4 matrices of dimensions 40x20, 20x30, 
30x10 and 10x30. Let the input 4 matrices be A, B, 
C and D.  The minimum number of  multiplications are 
obtained by putting parenthesis in following way
(A(BC))D --> 20*30*10 + 40*20*10 + 40*10*30

Input: p[] = {10, 20, 30, 40, 30} 
Output: Optimal parenthesization is (((AB)C)D)
        Optimal cost of parenthesization is 30000
There are 4 matrices of dimensions 10x20, 20x30, 
30x40 and 40x30. Let the input 4 matrices be A, B, 
C and D.  The minimum number of multiplications are 
obtained by putting parenthesis in following way
((AB)C)D --> 10*20*30 + 10*30*40 + 10*40*30

Input: p[] = {10, 20, 30}  
Output: Optimal parenthesization is (AB)
        Optimal cost of parenthesization is 6000
There are only two matrices of dimensions 10x20 
and 20x30. So there is only one way to multiply 
the matrices, cost of which is 10*20*30
This problem is mainly an extension of previous post. In the previous post, we have discussed algorithm for finding optimal cost only. Here we need print parenthesization also.



Recommended Problem
Brackets in Matrix Chain Multiplication
Dynamic Programming
Matrix
+2 more
Microsoft
Solve Problem
Submission count: 10.4K
The idea is to store optimal break point for every subexpression (i, j) in a 2D array bracket[n][n]. Once we have bracket array us constructed, we can print parenthesization using below code. 

// Prints parenthesization in subexpression (i, j)
printParenthesis(i, j, bracket[n][n], name)
{
    // If only one matrix left in current segment
    if (i == j)
    {
        print name;
        name++;
        return;
    }

    print "(";

    // Recursively put brackets around subexpression
    // from i to bracket[i][j].
    printParenthesis(i, bracket[i][j], bracket, name);

    // Recursively put brackets around subexpression
    // from bracket[i][j] + 1 to j.
    printParenthesis(bracket[i][j]+1, j, bracket, name);

    print ")";
}
Below is the implementation of the above steps.

C++
Java
Python3
# Python3 program to print optimal parenthesization
# in matrix chain multiplication.
name = 0;
 
# Function for printing the optimal
# parenthesization of a matrix chain product
def printParenthesis(i , j, n, bracket):
     
    global name
   
    # If only one matrix left in current segment
    if (i == j):
     
        print(name, end = "");
        name = chr(ord(name) + 1)
        return;
     
    print("(", end = "");
 
    # Recursively put brackets around subexpression
    # from i to bracket[i][j].
    # Note that "*((bracket+i*n)+j)" is similar to
    # bracket[i][j]
    printParenthesis(i, bracket[i][j], n, bracket);
 
    # Recursively put brackets around subexpression
    # from bracket[i][j] + 1 to j.
    printParenthesis(bracket[i][j] + 1, j, n, bracket);
    print(")", end = "");
   
# Matrix Ai has dimension p[i-1] x p[i] for i = 1..n
# Please refer below article for details of this
# function
# https:#goo.gl/k6EYKj
def matrixChainOrder( p , n):
     
    global name
   
    '''
         * For simplicity of the program,
         one extra row and one extra column are
         * allocated in m. 0th row and
         0th column of m are not used
         '''
    m = [ [0 for _ in range(n)] for _ in range(n)]
 
    # bracket[i][j] stores optimal break point in
    # subexpression from i to j.
    bracket = [ [0 for _ in range(n)] for _ in range(n)]
 
    '''
         * m[i,j] = Minimum number of scalar
         multiplications needed to compute the
         * matrix A[i]A[i+1]...A[j] = A[i..j] where
         dimension of A[i] is p[i-1] x p[i]
         '''
 
    # cost is zero when multiplying one matrix.
    for  i in range(1, n):
        m[i][i] = 0;
 
    # L is chain length.
    for L in range(2, n):
         
        for i in range(1, n - L + 1):
            j = i + L - 1;
            m[i][j] = 10 ** 8;
            for k in range(i, j):
 
                # q = cost/scalar multiplications
                q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
                if (q < m[i][j]) :
           
                    m[i][j] = q;
 
                # Each entry bracket[i,j]=k shows
                # where to split the product arr
                # i,i+1....j for the minimum cost.
                bracket[i][j] = k;
           
    # The first matrix is printed as 'A', next as 'B',
    # and so on
    name = 'A';
    print("Optimal Parenthesization is : ");
    printParenthesis(1, n - 1, n, bracket);
    print("\nOptimal Cost is :", m[1][n - 1]);
   
# Driver code
arr = [ 40, 20, 30, 10, 30 ];
n = len(arr);
matrixChainOrder(arr, n);
 
# This code is contributed by phasing17
C#
Javascript
Output
Optimal Parenthesization is : ((A(BC))D)nOptimal Cost is : 26000
Time Complexity: O(n3) 
Auxiliary Space: O(n2)

Another Approach:

This solution try to solve the problem using Recursion using permutations.


Let's take example:  {40, 20, 30, 10, 30}
n = 5
Let’s divide that into a Matrix

[ [40, 20], [20, 30], [30, 10], [10, 30] ]

[ A , B , C , D ]

it contains 4 matrices i.e. (n - 1)
We have 3 combinations to multiply  i.e.  (n-2)

AB    or    BC    or     CD
Algorithm:
1) Given array of matrices with length M, Loop through  M – 1 times

2) Merge consecutive matrices in each loop

for (int i = 0; i < M - 1; i++) {
   int cost =  (matrices[i][0] * 
                 matrices[i][1] * matrices[i+1][1]);
   
   // STEP - 3
   // STEP - 4
}
3) Merge the current two matrices into one, and remove merged matrices list from list.

If  A, B merged, then A, B must be removed from the List

and NEW matrix list will be like
newMatrices = [  AB,  C ,  D ]

We have now 3 matrices, in any loop
Loop#1:  [ AB,  C,   D ]
Loop#2:  [ A,   BC,  D ]
Loop#3   [ A,   B,   CD ]
4) Repeat: Go to STEP – 1  with  newMatrices as input M — recursion

5) Stop recursion, when we get 2 matrices in the list.

Workflow
Matrices are reduced in following way, 

and cost’s must be retained and summed-up during recursion with previous values of each parent step.

[ A, B , C, D ]

[(AB), C, D ]
 [ ((AB)C), D ]--> [ (((AB)C)D) ] 
 - return & sum-up total cost of this step.
 [ (AB),  (CD)] --> [ ((AB)(CD)) ] 
 - return .. ditto..

 [ A, (BC), D ]
 [ (A(BC)), D ]--> [ ((A(BC))D) ] 
  - return
 [ A, ((BC)D) ]--> [ (A((BC)D)) ] 
  - return
    
 [ A, B, (CD) ]
 [ A, (B(CD)) ]--> [ (A(B(CD))) ] 
  - return
 [ (AB), (CD) ]--> [ ((AB)(CD)) ] 
  - return .. ditto..
on return i.e. at final step of each recursion, check if  this value smaller than of any other.

Below is JAVA,c# and Javascript implementation of above steps.

C++
Java
Python3
# Python3 code to implement the approach
 
class FinalCost:
    def __init__(self):
        self.label = ""
        self.cost = float("inf")
 
def optimalCost(matrices, labels, prevCost, finalCost):
    length = len(matrices)
    if length < 2:
        finalCost.cost = 0
    elif length == 2:
        cost = prevCost + matrices[0][0] * matrices[0][1] * matrices[1][1]
        # This is where minimal cost has been caught
        # for whole program
        if cost < finalCost.cost:
            finalCost.cost = cost
            finalCost.label = "(" + labels[0] + labels[1] + ")"
    else:
        # recursive Reduce
        for i in range(length - 1):
            newMatrix = [[0] * 2 for i in range(length - 1)]
            newLabels = [0] * (length - 1)
            subIndex = 0
 
            # STEP-1:
            #   - Merge two matrices's into one - in each
            #   loop, you move merge position
            #        - if i = 0 THEN  (AB) C D ...
            #        - if i = 1 THEN  A (BC) D ...
            #        - if i = 2 THEN  A B (CD) ...
            #   - and find the cost of this two matrices
            #   multiplication
            cost = matrices[i][0] * matrices[i][1] * matrices[i + 1][1]
 
            # STEP - 2:
            #    - Build new matrices after merge
            #    - Keep track of the merged labels too
            for j in range(i):
                newMatrix[subIndex] = matrices[j]
                newLabels[subIndex] = labels[j]
                subIndex += 1
             
            newMatrix[subIndex][0] = matrices[i][0];
            newMatrix[subIndex][1] = matrices[i + 1][1];
            newLabels[subIndex] = "(" + str(labels[i]) + str(labels[i + 1]) + ")";
            subIndex+= 1
             
            for j in range(i + 2, length):
                newMatrix[subIndex] = matrices[j];
                newLabels[subIndex] = labels[j];
                subIndex+= 1
            optimalCost(newMatrix, newLabels, prevCost + cost, finalCost);
 
             
def findOptionalCost(arr):
    # STEP -1 : Prepare and convert inout as Matrix
    matrices = [[0] * 2 for i in range(len(arr) - 1)]
    labels = [0] * (len(arr) - 1)
 
    for i in range(len(arr) - 1):
        matrices[i][0] = arr[i]
        matrices[i][1] = arr[i + 1]
        labels[i] = chr(65 + i)
     
    print("matrices =", matrices)
     
     
    finalCost = FinalCost()
    optimalCost(matrices, labels, 0, finalCost)
 
    return finalCost
 
# Driver Code
 
# ======= *** TEST CASES **** ============
 
arr = [40, 20, 30, 10, 30]
 
 
cost = findOptionalCost(arr)
print("Final labels:" + cost.label)
print("Final Cost:" + str(cost.cost))
 
 
 
# This code is contributed by phasing17
C#
Javascript
Output
matrices = 
[[40, 20] [20, 30] [30, 10] [10, 30] ]
Final labels: 
((A(BC))D)
Final Cost:
26000
This article is contributed by Yasin Zafar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.





Like
47
Previous
Matrix Chain Multiplication (A O(N^2) Solution)
Next
Median of two sorted Arrays of different sizes
Related Articles
1.
Printing Matrix Chain Multiplication (A Space Optimized Solution)
2.
Matrix Chain Multiplication | DP-8
3.
Matrix Chain Multiplication (A O(N^2) Solution)
4.
Printing Longest Common Subsequence | Set 2 (Printing All)
5.
Printing all solutions in N-Queen Problem
6.
Check if two expressions with brackets are same
7.
Balanced expressions such that given positions have opening brackets
8.
Balanced expressions such that given positions have opening brackets | Set 2
9.
C++ Program To Check For Balanced Brackets In An Expression (Well-Formedness) Using Stack
10.
C Program To Check For Balanced Brackets In An Expression (Well-Formedness) Using Stack
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
Rishi_Lazy
suvera
sanjeev2552
29AjayKumar
simranarora5sos
hardikkoriintern
phasing17
hkdass001
satwiksuman
lokeshpotta20
Article Tags :
Amazon
matrix-chain-multiplication
Dynamic Programming
Matrix
Practice Tags :
Amazon
Dynamic Programming
Matrix
Improve Article
Report Issue