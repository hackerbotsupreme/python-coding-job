Painting Fence Algorithm

Difficulty Level : Hard
Last Updated : 12 Dec, 2022
Read
Discuss(50+)
Courses
Practice
Video
Given a fence with n posts and k colors, find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color. Since the answer can be large return it modulo 10^9 + 7.

Examples:

Input : n = 2 k = 4
Output : 16
Explanation: We have 4 colors and 2 posts.
Ways when both posts have same color : 4 
Ways when both posts have diff color :4(choices for 1st post) * 3(choices for 2nd post) = 12

Input : n = 3 k = 2
Output : 6

Recommended Problem
Painting the Fence
Arrays
Dynamic Programming
+2 more
Solve Problem
Submission count: 44.1K
The following image depicts the 6 possible ways of painting 3 posts with 2 colors:



Consider the following image in which c, c’ and c” are the respective colors of posts i, i-1, and i -2.





According to the constraint of the problem, c = c’ = c” is not possible simultaneously, so either c’ != c or c” != c or both. There are k – 1 possibility for c’ != c and k – 1 for c” != c.

 diff = no of ways when color of last
        two posts is different
 same = no of ways when color of last 
        two posts is same
 total ways = diff + same

for n = 1
    diff = k, same = 0
    total = k

for n = 2
    diff = k * (k-1) //k choices for
           first post, k-1 for next
    same = k //k choices for common 
           color of two posts
    total = k +  k * (k-1)

for n = 3
    diff = k * (k-1)* (k-1) 
           //(k-1) choices for the first place 
        // k choices for the second place
        //(k-1) choices for the third place
    same = k * (k-1) * 2
        // 2 is multiplied because consider two color R and B
        // R R B or B R R 
        // B B R or R B B  
           c'' != c, (k-1) choices for it

Hence we deduce that,
total[i] = same[i] + diff[i]
same[i]  = diff[i-1]
diff[i]  = (diff[i-1] + diff[i-2]) * (k-1)
         = total[i-1] * (k-1)
Below is the implementation of the problem:

C++
Java
Python3
# Python3 program for Painting Fence Algorithm
# optimised version
 
# Returns count of ways to color k posts
def countWays(n, k):
     
    dp = [0] * (n + 1)
    total = k
    mod = 1000000007
     
    dp[1] = k
    dp[2] = k * k   
     
    for i in range(3,n+1):
        dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod
         
    return dp[n]
   
# Driver code
n = 3
k = 2
print(countWays(n, k))
  
# This code is contributed by shubhamsingh10
C#
Javascript
Output
6
Time Complexity: O(N)
Auxiliary Space: O(N)

Space optimization : 
We can optimize the above solution to use one variable instead of a table.
Below is the implementation of the problem:

C++
Java
Python3
# Python3 program for Painting
# Fence Algorithm
 
# Returns count of ways to color
# k posts using k colors
def countWays(n, k) :
 
    # There are k ways to color first post
    total = k
    mod = 1000000007
 
    # There are 0 ways for single post to
    # violate (same color_ and k ways to
    # not violate (different color)
    same, diff = 0, k
 
    # Fill for 2 posts onwards
    for i in range(2, n + 1) :
         
        # Current same is same as
        # previous diff
        same = diff
 
        # We always have k-1 choices
        # for next post
        diff = total * (k - 1)
        diff = diff % mod
 
        # Total choices till i.
        total = (same + diff) % mod
     
    return total
 
# Driver code
if __name__ == "__main__" :
 
    n, k = 3, 2
    print(countWays(n, k))
 
# This code is contributed by Ryuga
C#
PHP
Javascript
Output
6
Time Complexity: O(N)
Auxiliary Space: O(1)

 
This article is contributed by Aditi Sharma. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.





Like
83
Previous
Cutting a Rod | DP-13
Next
Longest Common Subsequence | DP-4
Related Articles
1.
Minimize cost of painting N houses such that adjacent houses have different colors
2.
Largest Sum Contiguous Subarray (Kadane's Algorithm)
3.
Block swap algorithm for array rotation
4.
Floyd Warshall Algorithm | DP-16
5.
Manacher's Algorithm - Linear Time Longest Palindromic Substring - Part 1
6.
Introduction to Stack - Data Structure and Algorithm Tutorials
7.
Reversal algorithm for right rotation of an array
8.
Distinct elements in subarray using Mo's Algorithm
9.
C Program for Reversal algorithm for array rotation
10.
Java Program for Reversal algorithm for array rotation
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
Sagar Pant 1
ankthon
DrRoot_
Code_Mech
ukasp
Rajput-Ji
yashjaiswal10
SHUBHAMSINGH10
kevinmartin2428
aditosh007
avanitrachhadiya2155
nikheelindanoor123
divyeshrabadiya07
suresh07
rajyavardhanp
sagartomar9927
hianmoyo3s
Article Tags :
Arrays
Dynamic Programming
Practice Tags :
Arrays
Dynamic Programming
Improve Article
Report Issue