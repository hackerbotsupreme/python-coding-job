Printing Items in 0/1 Knapsack

Difficulty Level : Medium
Last Updated : 23 Jun, 2022
Read
Discuss
Courses
Practice
Video
Given weights and values of n items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. In other words, given two integer arrays, val[0..n-1] and wt[0..n-1] represent values and weights associated with n items respectively. Also given an integer W which represents knapsack capacity, find out the items such that sum of the weights of those items of a given subset is smaller than or equal to W. You cannot break an item, either pick the complete item or don’t pick it (0-1 property).
Prerequisite : 0/1 Knapsack
Examples : 
 

Input : val[] = {60, 100, 120};
        wt[] = {10, 20, 30};
        W = 50;
Output : 220 //maximum value that can be obtained
         30 20 //weights 20 and 30 are included. 

Input : val[] = {40, 100, 50, 60};
        wt[] = {20, 10, 40, 30};
        W = 60;
Output : 200
         30 20 10
Approach : 
Let val[] = {1, 4, 5, 7}, wt[] = {1, 3, 4, 5} 
W = 7. 
The 2d knapsack table will look like : 
 

2d knapsack table

Start backtracking from K[n][W].Here K[n][W] is 9.
Since this value comes from the top (shown by grey arrow), the item in this row is not included. Go vertically upward in the table without including this in the knapsack. Now, this value K[n-1][W] which is 9 doesn’t come from the top which means the item in this row is included and go vertically up and then left by the weight of the included item ( shown by black arrow). Continuing this process include weights 3 and 4 with a total value 9 in the knapsack. 
 


Recommended: Please try your approach on {IDE} first, before moving on to the solution.
 

C++
C
Java
Python3
# Python3 code for Dynamic Programming
# based solution for 0-1 Knapsack problem
 
# Prints the items which are put in a
# knapsack of capacity W
def printknapSack(W, wt, val, n):
    K = [[0 for w in range(W + 1)]
            for i in range(n + 1)]
             
    # Build table K[][] in bottom
    # up manner
    for i in range(n + 1):
        for w in range(W + 1):
            if i == 0 or w == 0:
                K[i][w] = 0
            elif wt[i - 1] <= w:
                K[i][w] = max(val[i - 1]
                  + K[i - 1][w - wt[i - 1]],
                               K[i - 1][w])
            else:
                K[i][w] = K[i - 1][w]
 
    # stores the result of Knapsack
    res = K[n][W]
    print(res)
     
    w = W
    for i in range(n, 0, -1):
        if res <= 0:
            break
        # either the result comes from the
        # top (K[i-1][w]) or from (val[i-1]
        # + K[i-1] [w-wt[i-1]]) as in Knapsack
        # table. If it comes from the latter
        # one/ it means the item is included.
        if res == K[i - 1][w]:
            continue
        else:
 
            # This item is included.
            print(wt[i - 1])
             
            # Since this weight is included
            # its value is deducted
            res = res - val[i - 1]
            w = w - wt[i - 1]
 
# Driver code
val = [ 60, 100, 120 ]
wt = [ 10, 20, 30 ]
W = 50
n = len(val)
     
printknapSack(W, wt, val, n)
 
# This code is contributed by Aryan Garg.
C#
PHP
Javascript
Output: 
220
30 20
 

Time complexity: O(n*W)

Space complexity: O(n*W)



Like
Previous
Rencontres Number (Counting partial derangements)
Next
Golomb sequence
Related Articles
1.
Maximum sum of values of N items in 0-1 Knapsack by reducing weight of at most K items in half
2.
Difference between 0/1 Knapsack problem and Fractional Knapsack problem
3.
Unbounded Knapsack (Repetition of items allowed) | Set 2
4.
Unbounded Knapsack (Repetition of items allowed)
5.
Printing Longest Common Subsequence | Set 2 (Printing All)
6.
Arrangements of N and M items of two types when max X and Y items of each can be consecutive
7.
0-1 Knapsack Problem | DP-10
8.
Implementation of 0/1 Knapsack using Branch and Bound
9.
A Space Optimized DP solution for 0-1 Knapsack Problem
10.
Java Program 0-1 Knapsack Problem
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
soumik33
@soumik33
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
aryan21
ankthon
ukasp
avanitrachhadiya2155
shivanisinghss2110
r_c
Article Tags :
knapsack
Dynamic Programming
Practice Tags :
Dynamic Programming
Report Issue