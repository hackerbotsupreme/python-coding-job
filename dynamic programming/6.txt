Overlapping Subproblems Property in Dynamic Programming | DP-1

Difficulty Level : Easy
Last Updated : 22 Aug, 2022
Read
Discuss(20+)
Courses
Practice
Video
 
Dynamic Programming is an algorithmic paradigm that solves a given complex problem by breaking it into subproblems using recursion and storing the results of subproblems to avoid computing the same results again. Following are the two main properties of a problem that suggests that the given problem can be solved using Dynamic programming.

Overlapping Subproblems 
Optimal Substructure
In this post, we will discuss the first property Overlapping Subproblems in detail. The second property of Dynamic programming is discussed in the next post.
 


 

Overlapping Subproblems: 
Like Divide and Conquer, Dynamic Programming combines solutions to sub-problems. Dynamic Programming is mainly used when solutions to the same subproblems are needed again and again. In dynamic programming, computed solutions to subproblems are stored in a table so that these don’t have to be recomputed. So Dynamic Programming is not useful when there are no common (overlapping) subproblems because there is no point in storing the solutions if they are not needed again. For example, Binary Search doesn’t have common subproblems. If we take the example of following a recursive program for Fibonacci Numbers, there are many subproblems that are solved again and again.

C++
C
Java
Python
#  a simple recursive program for Fibonacci numbers
def fib(n):
    if n <= 1:
        return n
 
    return fib(n - 1) + fib(n - 2)
C#
Javascript
Output
13
Time Complexity: O(2N)  
Auxiliary Space: O(1)

Illustration of Recursion tree for the execution of fib(5) :                              

Recursion tree for the execution of fib(5) 

We can see that the function fib(3) is being called 2 times. If we would have stored the value of fib(3), then instead of computing it again, we could have reused the old stored value. There are following two different ways to store the values so that these values can be reused: 

Memoization (Top Down) 
Tabulation (Bottom Up)
Memoization (Top Down): 
The memoized program for a problem is similar to the recursive version with a small modification that looks into a lookup table before computing solutions. We initialize a lookup array with all initial values as NIL. Whenever we need the solution to a subproblem, we first look into the lookup table. If the precomputed value is there then we return that value, otherwise, we calculate the value and put the result in the lookup table so that it can be reused later.

Following is the memoized version for the nth Fibonacci Number. 

C++
C
Java
Python
# a program for Memoized version of nth Fibonacci number
 
# function to calculate nth Fibonacci number
 
 
def fib(n, lookup):
 
    # base case
    if n <= 1:
        lookup[n] = n
 
    # if the value is not calculated previously then calculate it
    if lookup[n] is None:
        lookup[n] = fib(n-1, lookup) + fib(n-2, lookup)
 
    # return the value corresponding to that value of n
    return lookup[n]
# end of function
 
# Driver program to test the above function
 
 
def main():
    n = 34
    # Declaration of lookup table
    # Handles till n = 100
    lookup = [None] * 101
    print "Fibonacci Number is ", fib(n, lookup)
 
 
if __name__ == "__main__":
    main()
 
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)
C#
Javascript
Output
Fibonacci number is 102334155
Tabulation (Bottom Up): 
The tabulated program for a given problem builds a table in a bottom-up fashion and returns the last entry from the table. For example, for the same Fibonacci number, we first calculate fib(0) then fib(1) then fib(2) then fib(3), and so on. So literally, we are building the solutions to subproblems bottom-up. 

Following is the tabulated version for the nth Fibonacci Number.

C
Java
Python
# Python program Tabulated (bottom up) version
def fib(n):
 
    # array declaration
    f = [0] * (n + 1)
 
    # base case assignment
    f[1] = 1
 
    # calculating the fibonacci and storing the values
    for i in xrange(2, n + 1):
        f[i] = f[i - 1] + f[i - 2]
    return f[n]
 
# Driver program to test the above function
 
 
def main():
    n = 9
    print "Fibonacci number is ", fib(n)
 
 
if __name__ == "__main__":
    main()
 
# This code is contributed by Nikhil Kumar Singh (nickzuck_007)
C#
Javascript
PHP
C++
Output
Fibonacci number is 34 
Time Complexity: O(N)
Auxiliary Space: O(N)

Recommended
Solve DSA problems on GfG Practice.

Solve Problems


Like
Previous
Optimal Substructure Property in Dynamic Programming | DP-2
Next
How to solve a Dynamic Programming Problem ?
Related Articles
1.
Optimal Substructure Property in Dynamic Programming | DP-2
2.
Travelling Salesman Problem using Dynamic Programming
3.
Introduction and Dynamic Programming solution to compute nCr%p
4.
Dynamic Programming | High-effort vs. Low-effort Tasks Problem
5.
Top 20 Dynamic Programming Interview Questions
6.
Dynamic Programming | Building Bridges
7.
Introduction to Dynamic Programming on Trees
8.
Print equal sum sets of Array (Partition Problem) using Dynamic Programming
9.
Number of Unique BST with a given key | Dynamic Programming
10.
Dynamic Programming vs Divide-and-Conquer