Min Cost Path | DP-6

Difficulty Level : Easy
Last Updated : 28 Jan, 2023
Read
Discuss(20+)
Courses
Practice
Video
Given a cost matrix cost[][] and a position (M, N) in cost[][], write a function that returns cost of minimum cost path to reach (M, N) from (0, 0). Each cell of the matrix represents a cost to traverse through that cell. The total cost of a path to reach (M, N) is the sum of all the costs on that path (including both source and destination). You can only traverse down, right and diagonally lower cells from a given cell, i.e., from a given cell (i, j), cells (i+1, j), (i, j+1), and (i+1, j+1) can be traversed. 

Note: You may assume that all costs are positive integers.

Example:

Input:




The path with minimum cost is highlighted in the following figure. The path is (0, 0) –> (0, 1) –> (1, 2) –> (2, 2). The cost of the path is 8 (1 + 2 + 2 + 3).  

Output:





Recommended: Please solve it on “PRACTICE” first, before moving on to the solution.
Min cost path using recursion:
To solve the problem follow the below idea:

This problem has the optimal substructure property. The path to reach (m, n) must be through one of the 3 cells: (m-1, n-1) or (m-1, n) or (m, n-1). So minimum cost to reach (m, n) can be written as “minimum of the 3 cells plus cost[m][n]”.
minCost(m, n) = min (minCost(m-1, n-1), minCost(m-1, n), minCost(m, n-1)) + cost[m][n] 

Follow the below steps to solve the problem:

If N is less than zero or M is less than zero then return Integer Maximum(Base Case)
If M is equal to zero and N is equal to zero then return cost[M][N](Base Case)
Return cost[M][N] + minimum of (minCost(M-1, N-1), minCost(M-1, N), minCost(M, N-1))
Below is the implementation of the above approach:

C++
C
Java
Python3
# A Naive recursive implementation of MCP(Minimum Cost Path) problem
import sys
R = 3
C = 3
 
# Returns cost of minimum cost path from (0,0) to (m, n) in mat[R][C]
 
 
def minCost(cost, m, n):
    if (n < 0 or m < 0):
        return sys.maxsize
    elif (m == 0 and n == 0):
        return cost[m][n]
    else:
        return cost[m][n] + min(minCost(cost, m-1, n-1),
                                minCost(cost, m-1, n),
                                minCost(cost, m, n-1))
 
# A utility function that returns minimum of 3 integers */
 
 
def min(x, y, z):
    if (x < y):
        return x if (x < z) else z
    else:
        return y if (y < z) else z
 
 
# Driver code
cost = [[1, 2, 3],
        [4, 8, 2],
        [1, 5, 3]]
print(minCost(cost, 2, 2))
 
# This code is contributed by
# Smitha Dinesh Semwal
C#
PHP
Javascript
Output
 8
Time Complexity: O((M * N)3)
Auxiliary Space: O(M + N), for recursive stack space

Min cost path using Dynamic Programming:
To solve the problem follow the below idea:

It should be noted that the above function computes the same subproblems again and again. See the following recursion tree, there are many nodes which appear more than once. The time complexity of this naive recursive solution is exponential and it is terribly slow. 

mC refers to minCost()
                                    mC(2, 2)
                          /            |           \
                         /             |            \             
                 mC(1, 1)           mC(1, 2)             mC(2, 1)
              /     |     \       /     |     \           /     |     \ 
             /      |      \     /      |      \         /      |       \
       mC(0,0) mC(0,1) mC(1,0) mC(0,1) mC(0,2) mC(1,1) mC(1,0) mC(1,1) mC(2,0)
So the MCP problem has both properties (see this and this) of a dynamic programming problem. Like other typical Dynamic Programming(DP) problems, recomputations of the same subproblems can be avoided by constructing a temporary array tc[][] in a bottom-up manner.

Follow the below steps to solve the problem:

Create a 2-D array ‘tc’ of size R * C
Calculate prefix sum for the first row and first column in ‘tc’ array as there is only one way to reach any cell in the first row or column
Run a nested for loop for i [1, M] and j [1, N]
Set tc[i][j] equal to minimum of (tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j]
Return tc[M][N]
Below is the implementation of the above approach:

C++
C
Java
Python
# Dynamic Programming Python implementation of Min Cost Path
# problem
R = 3
C = 3
 
 
def minCost(cost, m, n):
 
    # Instead of following line, we can use int tc[m+1][n+1] or
    # dynamically allocate memoery to save space. The following
    # line is used to keep te program simple and make it working
    # on all compilers.
    tc = [[0 for x in range(C)] for x in range(R)]
 
    tc[0][0] = cost[0][0]
 
    # Initialize first column of total cost(tc) array
    for i in range(1, m+1):
        tc[i][0] = tc[i-1][0] + cost[i][0]
 
    # Initialize first row of tc array
    for j in range(1, n+1):
        tc[0][j] = tc[0][j-1] + cost[0][j]
 
    # Construct rest of the tc array
    for i in range(1, m+1):
        for j in range(1, n+1):
            tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j]
 
    return tc[m][n]
 
 
# Driver code
cost = [[1, 2, 3],
        [4, 8, 2],
        [1, 5, 3]]
print(minCost(cost, 2, 2))
 
# This code is contributed by Bhavya Jain
C#
PHP
Javascript
Output
 8
Time Complexity: O(M * N)
Auxiliary Space: O(M * N)

Min cost path using Dynamic Programming(Space optimized):
To solve the problem follow the below idea:

The idea is to use the same given/input array to store the solutions of subproblems in the above solution

Follow the below steps to solve the problem:

Calculate prefix sum for the first row and first column in ‘cost’ array as there is only one way to reach any cell in the first row or column
Run a nested for loop for i [1, M-1] and j [1, N-1]
Set cost[i][j] equal to minimum of (cost[i-1][j-1], cost[i-1][j], cost[i][j-1]) + cost[i][j]
Return cost[M-1][N-1]
Below is the implementation of the above approach:

C++
C
Java
Python3
# Python3 program for the
# above approach
 
 
def minCost(cost, row, col):
 
    # For 1st column
    for i in range(1, row):
        cost[i][0] += cost[i - 1][0]
 
    # For 1st row
    for j in range(1, col):
        cost[0][j] += cost[0][j - 1]
 
    # For rest of the 2d matrix
    for i in range(1, row):
        for j in range(1, col):
            cost[i][j] += (min(cost[i - 1][j - 1],
                               min(cost[i - 1][j],
                                   cost[i][j - 1])))
 
    # Returning the value in
    # last cell
    return cost[row - 1][col - 1]
 
 
# Driver code
if __name__ == '__main__':
 
    row = 3
    col = 3
 
    cost = [[1, 2, 3],
            [4, 8, 2],
            [1, 5, 3]]
 
    print(minCost(cost, row, col))
 
# This code is contributed by Amit Katiyar
C#
Javascript
Output
8
Time Complexity: O(N * M), where N is the number of rows and M is the number of columns
Auxiliary Space: O(1), since no extra space has been taken

Min cost path using Dijkstra’s algorithm:
To solve the problem follow the below idea:

We can also use the Dijkstra’s shortest path algorithm to find the path with minimum cost

Follow the below steps to solve the problem:

Create a 2-D dp array to store answer for each cell
Declare a priority queue to perform dijkstra’s algorithm
Return dp[M][N]
Below is the implementation of the approach: 

C++
Java
Python3
# Minimum Cost Path using Dijkstra’s shortest path
#  algorithm with Min Heap by dinglizeng
# Python3
 
# Define the number of rows and the number of columns
R = 4
C = 5
 
# 8 possible moves
dx = [ 1, -1, 0, 0, 1, 1, -1, -1 ]
dy = [ 0, 0, 1, -1, 1, -1, 1, -1 ]
 
# The data structure to store the coordinates of
#  the unit square and the cost of path from the top
#  left.
class Cell():
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.cost = z
 
# To verify whether a move is within the boundary.
def isSafe(x, y):
    return (x >= 0 and x < R and
            y >= 0 and y < C)
 
# This solution is based on Dijkstra’s shortest
#  path algorithm
# For each unit square being visited, we examine all
#  possible next moves in 8 directions,
# calculate the accumulated cost of path for each
#  next move, adjust the cost of path of the adjacent
#  units to the minimum as needed.
# then add the valid next moves into a Min Heap.
# The Min Heap pops out the next move with the minimum
# accumulated cost of path.
# Once the iteration reaches the last unit at the lower
# right corner, the minimum cost path will be returned.
def minCost(cost, m, n):
 
    # the array to store the accumulated cost
    # of path from top left corner
    dp = [[0 for x in range(C)] for x in range(R)]
 
    # the array to record whether a unit
    # square has been visited
    visited = [[False for x in range(C)]
                for x in range(R)]
 
    # Initialize these two arrays, set path cost
    # to maximum integer value, each unit as
    # not visited
    for i in range(R):
        for j in range(C):
            dp[i][j] = float("Inf")
            visited[i][j] = False
 
    # Define a reverse priority queue.
    # Priority queue is a heap based implementation.
    # The default behavior of a priority queue is
    # to have the maximum element at the top.
    # The compare class is used in the definition of
    # the Min Heap.
    pq = []
 
    # initialize the starting top left unit with the
    # cost and add it to the queue as the first move.
    dp[0][0] = cost[0][0]
    pq.append(Cell(0, 0, cost[0][0]))
 
    while(len(pq)):
     
        # pop a move from the queue, ignore the units
        # already visited
        cell = pq[0]
        pq.pop(0)
        x = cell.x
        y = cell.y
        if(visited[x][y]):
            continue
 
        # mark the current unit as visited
        visited[x][y] = True
 
        # examine all non-visited adjacent units in 8
        # directions
        # calculate the accumulated cost of path for
        # each next move from this unit,
        # adjust the cost of path for each next
        # adjacent units to the minimum if possible.
        for i in range(8):
            next_x = x + dx[i]
            next_y = y + dy[i]
            if(isSafe(next_x, next_y) and
                not visited[next_x][next_y]):
                dp[next_x][next_y] = min(dp[next_x][next_y],
                                        dp[x][y] + cost[next_x][next_y])
                pq.append(Cell(next_x, next_y,
                                dp[next_x][next_y]))
 
    # return the minimum cost path at the lower
    # right corner
    return dp[m][n]
 
# Driver code
cost = [[1, 8, 8, 1, 5],
        [4, 1, 1, 8, 1],
        [4, 2, 8, 8, 1],
        [1, 5, 8, 8, 1]]
print(minCost(cost, 3, 4))
Output
 7
Time Complexity: O(V + E * logV), where V is (N*M) and E is also (N*M)
Auxiliary Space: O(N * M)

Asked in: Amazon
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.





Like
156
Previous
Maximum sum in a 2 x n grid such that no two elements are adjacent
Next
Longest Common Substring | DP-29
Related Articles
1.
C Program for Min Cost Path
2.
Java Program for Min Cost Path
3.
Python Program for Min Cost Path
4.
Minimize cost to sort an Array by swapping any pair of element (X, Y) with cost as (X + Y)
5.
Minimize cost to empty given array where cost of removing an element is its absolute difference with Time instant
6.
Minimize cost to sort the Array by moving elements with cost as the value itself
7.
Minimize cost to split an array into K subsets such that the cost of each element is its product with its position in the subset
8.
Minimum cost to complete given tasks if cost of 1, 7 and 30 days are given
9.
Minimize cost to connect the graph by connecting any pairs of vertices having cost at least 0
10.
Minimize cost to convert all 0s to 1s with cost of converting 0s group be X and that of 1 be X/3
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
Sam007
Mithun Kumar
Vishal_Khoda
maveriek
dinglizeng
amit143katiyar
Rajput-Ji
nikhilchhipa9
shivanisinghss2110
GauravRajput1
decode2207
29AjayKumar
subhammahato348
subham348
Code_r
adityakumar129
rishav1329
devesh_yadav
karandeep1234
janardansthox
Article Tags :
Amazon
MakeMyTrip
Samsung
Dynamic Programming
Mathematical
Matrix
Practice Tags :
Amazon
MakeMyTrip
Samsung
Dynamic Programming
Mathematical
Matrix
Improve Article
Report Issue