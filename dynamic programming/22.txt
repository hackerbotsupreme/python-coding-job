Count ways to reach the nth stair using step 1, 2 or 3

Difficulty Level : Easy
Last Updated : 01 Nov, 2022
Read
Discuss(20+)
Courses
Practice
Video
A child is running up a staircase with n steps and can hop either 1 step, 2 steps, or 3 steps at a time. Implement a method to count how many possible ways the child can run up the stairs.

Examples: 

Input : 4
Output : 7
Explanation:
Below are the seven ways
 1 step + 1 step + 1 step + 1 step
 1 step + 2 step + 1 step
 2 step + 1 step + 1 step 
 1 step + 1 step + 2 step
 2 step + 2 step
 3 step + 1 step
 1 step + 3 step

Input : 3
Output : 4
Explanation:
Below are the four ways
 1 step + 1 step + 1 step
 1 step + 2 step
 2 step + 1 step
 3 step
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
There are two methods to solve this problem:  

Recursive Method
Dynamic Programming
Method 1: Recursive. 
There are n stairs, and a person is allowed to jump next stair, skip one stair or skip two stairs. So there are n stairs. So if a person is standing at i-th stair, the person can move to i+1, i+2, i+3-th stair. A recursive function can be formed where at current index i the function is recursively called for i+1, i+2 and i+3 th stair. 
There is another way of forming the recursive function. To reach a stair i, a person has to jump either from i-1, i-2 or i-3 th stair or i is the starting stair.

Algorithm: 

Create a recursive function (count(int n)) which takes only one parameter.
Check the base cases. If the value of n is less than 0 then return 0, and if the value of n is equal to zero then return 1 as it is the starting stair.
Call the function recursively with values n-1, n-2 and n-3 and sum up the values that are returned, i.e. sum = count(n-1) + count(n-2) + count(n-3)
Return the value of the sum.
C++
C
Java
Python
# Python program to find n-th stair
# using step size 1 or 2 or 3.
 
# Returns count of ways to reach n-th
# stair using 1 or 2 or 3 steps.
 
 
def findStep(n):
    if ( n == 0 ):
        return 1
    elif (n < 0):
        return 0
 
    else:
        return findStep(n - 3) + findStep(n - 2) + findStep(n - 1)
 
 
# Driver code
n = 4
print(findStep(n))
 
# This code is contributed by Nikita Tiwari.
C#
PHP
Javascript
Output
7
Working:





Complexity Analysis: 

Time Complexity: O(3n). 
The time complexity of the above solution is exponential, a close upper bound will be O(3n). From each state, 3 recursive function are called. So the upperbound for n states is O(3n).
Space Complexity:O(1). 
As no extra space is required.
Note: The Time Complexity of the program can be optimized using Dynamic Programming.

Method 2: Dynamic Programming.
The idea is similar, but it can be observed that there are n states but the recursive function is called 3 ^ n times. That means that some states are called repeatedly. So the idea is to store the value of states. This can be done in two ways.  

Top-Down Approach: The first way is to keep the recursive structure intact and just store the value in a HashMap and whenever the function is called again return the value store without computing ().
Bottom-Up Approach: The second way is to take an extra space of size n and start computing values of states from 1, 2 .. to n, i.e. compute values of i, i+1, i+2 and then use them to calculate the value of i+3.
Algorithm:  

Create an array of size n + 1 and initialize the first 3 variables with 1, 1, 2. The base cases.
Run a loop from 3 to n.
For each index i, computer value of ith position as dp[i] = dp[i-1] + dp[i-2] + dp[i-3].
Print the value of dp[n], as the Count of the number of ways to reach n th step.
C++
C
Java
Python
# Python program to find n-th stair
# using step size 1 or 2 or 3.
 
# A recursive function used by countWays
 
 
def countWays(n):
    res = [0] * (n + 2)
    res[0] = 1
    res[1] = 1
    res[2] = 2
 
    for i in range(3, n + 1):
        res[i] = res[i - 1] + res[i - 2] + res[i - 3]
 
    return res[n]
 
 
# Driver code
n = 4
print(countWays(n))
 
 
# This code is contributed by Nikita Tiwari.
C#
PHP
Javascript
Output

7
Working:
1 -> 1 -> 1 -> 1
1 -> 1 -> 2
1 -> 2 -> 1
1 -> 3
2 -> 1 -> 1
2 -> 2
3 -> 1

So Total ways: 7
Complexity Analysis: 
Time Complexity: O(n). 
Only one traversal of the array is needed. So Time Complexity is O(n).
Space Complexity: O(n). 
To store the values in a DP, n extra space is needed.
Method 3: Matrix Exponentiation (O(logn) Approach)
Matrix Exponentiation is mathematical ways to solve DP problem in better time complexity. Matrix Exponentiation Technique has Transformation matrix of Size K X K and Functional Vector (K X 1) .By taking n-1th power of Transformation matrix and Multiplying It With functional vector Give Resultant Vector say it Res of Size K X 1. First Element of Res will be Answer for given n value. This Approach Will Take O(K^3logn) Time Complexity Which Is Complexity of Finding (n-1) power of Transformation Matrix.

Key Terms:
K = No of Terms in which F(n) depend ,from Recurrence Relation We can Say That F(n) depend On F(n-1) and F(n-2). => K =3

F1 =  Vector (1D array) that contain F(n) value of First K terms. Since K=3 =>F1 will have F(n) value of first 2 terms. F1=[1,2,4]

T = Transformation Matrix that is a 2D matrix of Size K X K and  Consist Of All 1 After Diagonal And Rest All Zero except last row. Last Row Will have coefficient Of all K terms in which F(n)  depends In Reverse Order. => T =[ [0 1 0] ,[0 0 1], [1 1 1] ].

Algorithms:
1)Take Input N
2)If N < K then Return Precalculated Answer  //Base Condition
3)construct F1 Vector and T (Transformation Matrix)
4)Take N-1th  power of T by using  Optimal Power(T,N) Methods and assign it in T
5)return (TXF)[1]
for Optimal Power(T, N) Methods Refer Following Article: https://www.geeksforgeeks.org/write-a-c-program-to-calculate-powxn/

C++
Java
Python3
k = 3
 
# Multiply Two Matrix Function
 
 
def multiply(A, B):
 
    # third matrix to store multiplication of Two matrix9*
    C = [[0 for x in range(k+1)] for y in range(k+1)]
 
    for i in range(1, k+1):
        for j in range(1, k+1):
            for x in range(1, k+1):
                C[i][j] = (C[i][j] + (A[i][x] * B[x][j]))
 
    return C
 
# Optimal Way For finding pow(t,n)
# If n Is Odd then It Will be t*pow(t,n-1)
# else return pow(t,n/2)*pow(t,n/2)
 
 
def pow(t,  n):
    # base Case
    if (n == 1):
        return t
    # Recurrence Case
    if (n & 1):
        return multiply(t, pow(t, n - 1))
    else:
        X = pow(t, n // 2)
    return multiply(X, X)
 
 
def compute(n):
    # base Case
    if (n == 0):
        return 1
    if (n == 1):
        return 1
    if (n == 2):
        return 2
 
    # Function Vector(indexing 1 )
    # that is [1,2]
    f1 = [0]*(k + 1)
    f1[1] = 1
    f1[2] = 2
    f1[3] = 4
 
    # Constructing Transformation Matrix that will be
    # [[0,1,0],[0,0,1],[3,2,1]]
 
    t = [[0 for x in range(k+1)] for y in range(k+1)]
    for i in range(1, k+1):
        for j in range(1, k+1):
            if (i < k):
                # Store 1 in cell that is next to diagonal of Matrix else Store 0 in
                # cell
                if (j == i + 1):
                    t[i][j] = 1
                else:
                    t[i][j] = 0
                continue
            # Last Row - store the Coefficients in reverse order
            t[i][j] = 1
 
    # Computing T^(n-1) and Setting Transformation matrix T to T^(n-1)
    t = pow(t, n - 1)
    sum = 0
    # Computing first cell (row=1,col=1) For Resultant Matrix TXF
    for i in range(1, k+1):
        sum += t[1][i] * f1[i]
    return sum
 
 
# Driver Code
n = 4
print(compute(n))
 
n = 5
print(compute(n))
 
n = 10
print(compute(n))
 
# This code is contributed by Shubhamsingh10
C#
Javascript
Output
7
13
274
Explanation:
We Know For This Question 
Transformation Matrix M= [[0,1,0],[0,0,1],[1,1,1]]
Functional Vector F1 = [1,2,4]
for n=2 :
    ans = (M X F1)[1]  
    ans = [2,4,7][1]  
    ans = 2 //[2,4,7][1] = First cell value of [2,4,7] i.e 2
for n=3 :
    ans = (M X M X F1)[1]  //M^(3-1) X F1 = M X M X F1
    ans = (M X [2,4,7])[1] 
    ans = [4,7,13][1]
    ans = 4
for n = 4 :
    ans = (M^(4-1) X F1)[1]
    ans = (M X M X M X F1) [1] 
    ans = (M X [4,7,13])[1] 
    ans = [7,13,24][1]
    ans = 7
for n = 5 :
    ans = (M^4 X F1)[1]
    ans = (M X [7,13,24])[1]
    ans = [13,24,44][1]
    ans = 13
Time Complexity:
O(K^3log(n)) //For Computing pow(t,n-1)
For this question K is 3
So Overall Time Complexity is O(27log(n))=O(logn)
Auxiliary Space: O(n^2) because extra space of vector have been used

Method 4: Using four variables

The idea is based on the Fibonacci series but here with 3 sums. we will hold the values of the first three stairs in 3 variables and will use the fourth variable to find the number of ways.

C++
Java
Python3
# A Python program to count number of ways
# to reach nth stair when
# A recursive function used by countWays
def countWays(n):
   
    # declaring three variables
    # and holding the ways
    # for first three stairs
    a = 1
    b = 2
    c = 4
 
    d = 0 # fourth variable
    if (n == 0 or n == 1 or n == 2):
        return n
    if (n == 3):
        return c
         
    for i in range(4,n+1):
       
        # starting from 4 as
        d = c + b + a # already counted for 3 stairs
        a = b
        b = c
        c = d
    return d
 
 
# Driver program to test above functions
n = 4
print(countWays(n))
 
# This code is contributed by shivanisinghss2110
C#
Javascript
Output
7
Time Complexity: O(n) 
Auxiliary Space: O(1), since no extra space has been taken.

Method 5: DP using memoization(Top down approach)

We can avoid the repeated work done in method 1(recursion) by storing the number of ways calculated so far.

We just need to store all the values in an array.

C++
Java
Python3
# Python Program to find n-th stair using step size
# 1 or 2 or 3.
class GFG:
 
    def findStepHelper(self, n, dp):
       
        # Base Case
        if (n == 0):
            return 1
        elif (n < 0):
            return 0
             
        # If subproblems are already calculated
        #then return it
        if (dp[n] != -1):
            return dp[n]
 
        # store the subproblems in the vector
        dp[n] = self.findStepHelper(n - 3, dp) + self.findStepHelper(n - 2, dp) + self.findStepHelper(n - 1, dp)
         
        return dp[n]
 
    # Returns count of ways to reach n-th stair
    # using 1 or 2 or 3 steps.
    def findStep(self, n):
 
        dp = [-1 for i in range(n + 1)]
        return self.findStepHelper(n, dp)
 
# Driver code
g = GFG()
n = 4
 
print(g.findStep(n))
 
# This code is contributed by shinjanpatra.
Javascript
C#
Output
7
Complexity Analysis: 

Time Complexity: O(n). Only one traversal of the array is needed. So Time Complexity is O(n).
Space Complexity: O(n). To store the values in a DP, n extra space is needed. Also, stack space for recursion is needed which is again O(n)




Like
51
Previous
Longest Common Substring | DP-29
Next
Count Balanced Binary Trees of Height h
Related Articles
1.
Count ways to reach the Nth stair using multiple 1 or 2 steps and a single step 3
2.
Find the number of ways to reach Kth step in stair case
3.
Count the number of ways to reach Nth stair by taking jumps of 1 to N
4.
Count ways to reach the Nth stair | Set-2
5.
Count ways to reach Nth Stairs by taking 1 and 2 steps with exactly one 3 step
6.
Count ways to reach the n'th stair
7.
Count ways to reach end from start stone with at most K jumps at each step
8.
Count ways to reach the Nth station
9.
Number of ways to reach Nth floor by taking at-most K leaps
10.
Minimize steps to reach K from 0 by adding 1 or doubling at each step
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
prakhargvp
@prakhargvp
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
jit_t
SoumikMondal
andrew1234
SHUBHAMSINGH10
sudharshan reddy lv
karnalrohit
surbhityagi15
rameshtravel07
vkatiyar60
avanitrachhadiya2155
surindertarika1234
navihere
kk773572498
shivanisinghss2110
ruhelaa48
sagar0719kumar
prasanna1995
lolhellno
shinjanpatra
rishavk61ns
himanshiyadav7011
garg28harsh
Article Tags :
Combinatorial
Dynamic Programming
Practice Tags :
Combinatorial
Dynamic Programming