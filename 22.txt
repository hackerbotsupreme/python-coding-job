Print all possible strings that can be made by placing spaces

Difficulty Level : Medium
Last Updated : 23 Jan, 2023
Read
Discuss(100+)
Courses
Practice
Video
Given a string you need to print all possible strings that can be made by placing spaces (zero or one) in between them. 

Input:  str[] = "ABC"
Output: ABC
        AB C
        A BC
        A B C
Source: Amazon Interview Experience | Set 158, Round 1, Q 1. 

Recommended Problem
Permutation with Spaces
Recursion
Backtracking
+1 more
Amazon
Solve Problem
Submission count: 24.5K
The idea is to use recursion and create a buffer that one by one contains all output strings having spaces. We keep updating the buffer in every recursive call. If the length of the given string is ‘n’ our updated string can have a maximum length of n + (n-1) i.e. 2n-1. So we create a buffer size of 2n (one extra character for string termination). 
We leave 1st character as it is, starting from the 2nd character, we can either fill a space or a character. Thus, one can write a recursive function like below.

Below is the implementation of the above approach: 

C++
Java
Python
# Python program to print permutations
# of a given string with
# spaces.
 
# Utility function
def toString(List):
    s = ""
    for x in List:
        if x == '&# 092;&# 048;':
            break
        s += x
    return s
 
# Function recursively prints the
# strings having space pattern.
# i and j are indices in 'str[]'
# and 'buff[]' respectively
def printPatternUtil(string, buff, i, j, n):
     
    if i == n:
        buff[j] = '&# 092;&# 048;'
        print toString(buff)
        return
 
    # Either put the character
    buff[j] = string[i]
    printPatternUtil(string, buff, i + 1,
                                 j + 1, n)
 
    # Or put a space followed by next character
    buff[j] = ' '
    buff[j + 1] = string[i]
 
    printPatternUtil(string, buff, i + 1,
                                 j + 2, n)
 
# This function creates buf[] to
# store individual output string
# and uses printPatternUtil() to
# print all permutations.
def printPattern(string):
    n = len(string)
 
    # Buffer to hold the string
    # containing spaces
     
    # 2n - 1 characters and 1 string terminator
    buff = [0] * (2 * n)
 
    # Copy the first character as it is,
    # since it will be always
    # at first position
    buff[0] = string[0]
 
    printPatternUtil(string, buff, 1, 1, n)
 
# Driver program
string = "ABCD"
printPattern(string)
 
# This code is contributed by BHAVYA JAIN
C#
PHP
Javascript
Output
ABCD
ABC D
AB CD
AB C D
A BCD
A BC D
A B CD
A B C D
Time Complexity: Since the number of Gaps is n-1, there are total 2^(n-1) patterns each having length ranging from n to 2n-1. Thus overall complexity would be O(n*(2^n)).

Space Complexity:  O(2n-1), as the size of the buffer is 2n-1.



Recursive Java Solution:

Steps:

Take the first character, and append space up the rest of the string; 
First character+”space”+Rest of the spaced up string;
First character+Rest of the spaced up string;
Implementation:

C++
Java
Python3
# Python program for above approach
def spaceString(str):
    strs = [];
     
    # Check if str.length() is 1
    if(len(str) == 1):
        strs.append(str)
        return strs
     
    strsTemp=spaceString(str[1:])
     
    # Iterate over strsTemp
    for i in range(len(strsTemp)):
        strs.append(str[0] + strsTemp[i])
        strs.append(str[0] + " " + strsTemp[i])
     
    # Return strs
    return strs
 
# Driver Code
patterns=[]
 
# Function Call
patterns = spaceString("ABCD")
 
# Print patterns
for s in patterns:
    print(s)
     
# This code is contributed by rag2127
C#
Javascript
Output
ABCD
A BCD
AB CD
A B CD
ABC D
A BC D
AB C D
A B C D




Like
34
Previous
Printing all solutions in N-Queen Problem
Next
Print all longest common sub-sequences in lexicographical order
Related Articles
1.
Print all possible strings that can be made by placing spaces using Power Set
2.
Count all possible strings that can be generated by placing spaces
3.
Check whether two strings can be made equal by reversing substring of equal length from both strings
4.
Check if given strings can be made same by swapping two characters of same or different strings
5.
Check if two strings can be made equal by reversing a substring of one of the strings
6.
Count of strings in Array A that can be made equal to strings in Array B by appending characters
7.
Check if all strings of an array can be made same by interchanging characters
8.
Print all possible strings of length k that can be formed from a set of n characters
9.
Maximize the length of upper boundary formed by placing given N rectangles horizontally or vertically
10.
Count N-digit numbers made up of X or Y whose sum of digits is also made up of X or Y
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
nitin mittal
Chandan_Kumar
sinhasiddharth1998
m0hitv
rdtank
avanitrachhadiya2155
rag2127
sweetyty
GauravRajput1
divyesh072019
hardikkoriintern
Article Tags :
Amazon
Backtracking
Recursion
Strings
Practice Tags :
Amazon
Backtracking
Recursion
Strings