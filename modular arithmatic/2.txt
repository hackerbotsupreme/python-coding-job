Modular multiplicative inverse

Difficulty Level : Hard
Last Updated : 25 Jan, 2023
Read
Discuss(40+)
Courses
Practice
Video
Given two integers A and M, find the modular multiplicative inverse of A under modulo M.
The modular multiplicative inverse is an integer X such that:

A X ≅ 1 (mod M)   

Note: The value of X should be in the range {1, 2, … M-1}, i.e., in the range of integer modulo M. ( Note that X cannot be 0 as A*0 mod M will never be 1). The multiplicative inverse of “A modulo M” exists if and only if A and M are relatively prime (i.e. if gcd(A, M) = 1)

Examples: 

Input: A = 3, M = 11
Output: 4
Explanation: Since (4*3) mod 11 = 1, 4 is modulo inverse of 3(under 11).
One might think, 15 also as a valid output as “(15*3) mod 11” 
is also 1, but 15 is not in range {1, 2, … 10}, so not valid.

Input:  A = 10, M = 17
Output: 12
Explamation: Since (10*12) mod 17 = 1, 12 is modulo inverse of 10(under 17).

Naive Approach:  To solve the problem, follow the below idea:

A naive method is to try all numbers from 1 to m. For every number x, check if (A * X) % M is 1

Below is the implementation of the above approach:

C++
Java
Python3
# Python3 program to find modular
# inverse of A under modulo M
 
# A naive method to find modulor
# multiplicative inverse of A
# under modulo M
 
 
def modInverse(A, M):
 
    for X in range(1, M):
        if (((A % M) * (X % M)) % M == 1):
            return X
    return -1
 
 
# Driver Code
if __name__ == "__main__":
    A = 3
    M = 11
 
    # Function call
    print(modInverse(A, M))
 
# This code is contributed by Nikita Tiwari.
C#
PHP
Javascript
Output
4
Time Complexity: O(M)
Auxiliary Space: O(1)

Modular multiplicative inverse when M and A are coprime or gcd(A, M)=1:
The idea is to use Extended Euclidean algorithms that take two integers ‘a’ and ‘b’, then find their gcd, and also find ‘x’ and ‘y’ such that 

ax + by = gcd(a, b)


To find the multiplicative inverse of ‘A’ under ‘M’, we put b = M in the above formula. Since we know that A and M are relatively prime, we can put the value of gcd as 1.

Ax + My = 1

If we take modulo M on both sides, we get

Ax + My ≅ 1 (mod M)

We can remove the second term on left side as ‘My (mod M)’ would always be 0 for an integer y. 

Ax  ≅ 1 (mod M)

So the ‘x’ that we can find using Extended Euclid Algorithm is the multiplicative inverse of ‘A’

Below is the implementation of the above approach:  

C++
C
Java
Python3
# Python3 program to find multiplicative modulo
# inverse using Extended Euclid algorithm.
 
# Global Variables
x, y = 0, 1
 
# Function for extended Euclidean Algorithm
 
 
def gcdExtended(a, b):
    global x, y
 
    # Base Case
    if (a == 0):
        x = 0
        y = 1
        return b
 
    # To store results of recursive call
    gcd = gcdExtended(b % a, a)
    x1 = x
    y1 = y
 
    # Update x and y using results of recursive
    # call
    x = y1 - (b // a) * x1
    y = x1
 
    return gcd
 
 
def modInverse(A, M):
 
    g = gcdExtended(A, M)
    if (g != 1):
        print("Inverse doesn't exist")
 
    else:
 
        # m is added to handle negative x
        res = (x % M + M) % M
        print("Modular multiplicative inverse is ", res)
 
 
# Driver Code
if __name__ == "__main__":
    A = 3
    M = 11
 
    # Function call
    modInverse(A, M)
 
 
# This code is contributed by phasing17
C#
PHP
Javascript
Output
Modular multiplicative inverse is 4
Time Complexity: O(log M)
Auxiliary Space: O(log M), because of the internal recursion stack.

 Iterative Implementation of the above approach:

C++
C
Java
Python3
# Iterative Python 3 program to find
# modular inverse using extended
# Euclid algorithm
 
# Returns modulo inverse of a with
# respect to m using extended Euclid
# Algorithm Assumption: a and m are
# coprimes, i.e., gcd(A, M) = 1
 
 
def modInverse(A, M):
    m0 = M
    y = 0
    x = 1
 
    if (M == 1):
        return 0
 
    while (A > 1):
 
        # q is quotient
        q = A // M
 
        t = M
 
        # m is remainder now, process
        # same as Euclid's algo
        M = A % M
        A = t
        t = y
 
        # Update x and y
        y = x - q * y
        x = t
 
    # Make x positive
    if (x < 0):
        x = x + m0
 
    return x
 
 
# Driver code
if __name__ == "__main__":
    A = 3
    M = 11
 
    # Function call
    print("Modular multiplicative inverse is",
          modInverse(A, M))
 
# This code is contributed by Nikita tiwari.
C#
PHP
Javascript
Output
Modular multiplicative inverse is 4
Time Complexity: O(log m)
Auxiliary Space: O(1)

Modular multiplicative inverse when M is prime:
If we know M is prime, then we can also use Fermat’s little theorem to find the inverse. 

aM-1 ≅ 1 (mod M)

If we multiply both sides with a-1, we get 

a-1 ≅ a M-2 (mod M)

Below is the implementation of the above approach:

C++
Java
Python3
# Python3 program to find modular
# inverse of A under modulo M
 
# This program works only if M is prime.
 
# Function to find modular
# inverse of A under modulo M
# Assumption: M is prime
 
 
def modInverse(A, M):
 
    g = gcd(A, M)
 
    if (g != 1):
        print("Inverse doesn't exist")
 
    else:
 
        # If A and M are relatively prime,
        # then modulo inverse is A^(M-2) mod M
        print("Modular multiplicative inverse is ",
              power(A, M - 2, M))
 
# To compute x^y under modulo M
 
 
def power(x, y, M):
 
    if (y == 0):
        return 1
 
    p = power(x, y // 2, M) % M
    p = (p * p) % M
 
    if(y % 2 == 0):
        return p
    else:
        return ((x * p) % M)
 
# Function to return gcd of a and b
 
 
def gcd(a, b):
    if (a == 0):
        return b
 
    return gcd(b % a, a)
 
 
# Driver Code
if __name__ == "__main__":
    A = 3
    M = 11
 
    # Function call
    modInverse(A, M)
 
 
# This code is contributed by Nikita Tiwari.
C#
PHP
Javascript
Output
Modular multiplicative inverse is 4
Time Complexity: O(log M)
Auxiliary Space: O(log M), because of the internal recursion stack.

Applications: 
Computation of the modular multiplicative inverse is an essential step in RSA public-key encryption method.

This article is contributed by Ankur. Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above



Like
Previous
Combinatorial Game Theory | Set 1 (Introduction)
Next
Trie | (Insert and Search)
Related Articles
1.
Modular multiplicative inverse from 1 to n
2.
Modular Exponentiation (Power in Modular Arithmetic)
3.
Nearest smaller number to N having multiplicative inverse under modulo N equal to that number
4.
Find the value of P and modular inverse of Q modulo 998244353
5.
Count array elements having modular inverse under given prime number P equal to itself
6.
XOR of array elements whose modular inverse with a given number exists
7.
Multiplicative order
8.
Print all multiplicative primes <= N
9.
Count of multiplicative partitions of N
10.
Multiplicative Congruence method for generating Pseudo Random Numbers
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
vt_m
nitin mittal
Chandan_Kumar
raunak_m17
olivebadger
_emperor
derekallen105
oshosmart
sudhanshu751
nitin_19520
nagulansridhar
_saurabh_jaiswal
subham348
khushboogoyal499
shivanisinghss2110
anikakapoor
prophet1999
phasing17
gautamgoel962
shankarwangwad2018
janardansthox
Article Tags :
Modular Arithmetic
number-theory
Mathematical
Practice Tags :
Mathematical
Modular Arithmetic
modular arithmetic
number-theory
Report Issue