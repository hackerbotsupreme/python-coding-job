Euler’s criterion (Check if square root under modulo p exists)

Difficulty Level : Easy
Last Updated : 20 Dec, 2022
Read
Discuss
Courses
Practice
Video
Given a number ‘n’ and a prime p, find if square root of n under modulo p exists or not. A number x is square root of n under modulo p if (x*x)%p = n%p.

Examples : 

Input:   n = 2, p = 5
Output:  false
There doesn't exist a number x such that 
(x*x)%5 is 2

Input:   n = 2, p = 7
Output:  true
There exists a number x such that (x*x)%7 is
2.  The number is 3.
A Naive Method is to try every number x where x varies from 2 to p-1. For every x, check if (x * x) % p is equal to n % p. 

C++
Java
Python3
# A Simple Python 3 program to
# check if square root of a number
# under modulo p exists or not
 
# Returns true if square root of
# n under modulo p exists
def squareRootExists(n, p):
    n = n % p
 
    # One by one check all numbers
    # from 2 to p-1
    for x in range(2, p, 1):
        if ((x * x) % p == n):
            return True
    return False
 
# Driver Code
if __name__ == '__main__':
    p = 7
    n = 2
    if(squareRootExists(n, p) == True):
        print("Yes")
    else:
        print("No")
 
# This code is contributed by
# Surendra_Gangwar
C#
PHP
Javascript
Output : 

Yes
Time Complexity of this method is O(p).
Space Complexity: O(1) since only constant variables being used

This problem has a direct solution based on Euler’s Criterion. 
Euler’s criterion states that 

Square root of n under modulo p exists if and only if
n(p-1)/2 % p = 1

Here square root of n exists means is, there exist
an integer x such that (x * x) % p = 1
Below is implementation based on above criterion. Refer Modular Exponentiation for power function.

C++
Java
Python3
# Python3 program to check if square root
# of a number under modulo p exists or not
 
# Utility function to do modular
# exponentiation. It returns (x^y) % p.
def power(x, y, p):
    res = 1 # Initialize result
    x = x % p
     
    # Update x if it is more than
    # or equal to p
    while (y > 0):
         
        # If y is odd, multiply
        # x with result
        if (y & 1):
            res = (res * x) % p
             
        # y must be even now
        y = y >> 1 # y = y/2
        x = (x * x) % p
    return res
 
# Returns true if there exists an integer
# x such that (x*x)%p = n%p
def squareRootExists(n, p):
     
    # Check for Euler's criterion that is
    # [n ^ ((p-1)/2)] % p is 1 or not.
    if (power(n, (int)((p - 1) / 2), p) == 1):
        return True
    return False
 
# Driver Code
p = 7
n = 2
if(squareRootExists(n, p) == True):
    print("Yes")
else:
    print("No")
 
# This code is contributed by Rajput-Ji
C#
PHP
Javascript
Output : 

Yes
How does this work? 

If p is a prime, then it must be an odd number and (p-1) 
must be an even, i.e., (p-1)/2 must be an integer.

Suppose a square root of n under modulo p exists, then
there must exist an integer x such that,
      x2 % p = n % p 
or, 
     x2 ? n mod p

Raising both sides to power (p-1)/2,
      (x2)(p-1)/2 ? n(p-1)/2 mod p           
      xp-1 ? n(p-1)/2 mod p

Since p is a prime, from Fermet's theorem, we can say that 
   xp-1 ? 1 mod p

Therefore,
  n(p-1)/2 ? 1 mod p  
Time Complexity: O(logp) 
Auxiliary Space: O(1)
You may like to see below: 
Find Square Root under Modulo p | Set 1 (When p is in form of 4*i + 3)
This article is contributed by Shivam Gupta. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above
 

Recommended
Solve DSA problems on GfG Practice.

Solve Problems


Like
Previous
Find Square Root under Modulo p | Set 2 (Shanks Tonelli algorithm)
Next
Write an iterative O(Log y) function for pow(x, y)
Related Articles
1.
Find Square Root under Modulo p | Set 1 (When p is in form of 4*i + 3)
2.
Find Square Root under Modulo p | Set 2 (Shanks Tonelli algorithm)
3.
Find Square Root under Modulo p | (When p is product of two primes in the form 4*i + 3)
4.
Program to check for irreducibility using Eisenstein’s Irreducibility Criterion
5.
Check if a number is perfect square without finding square root
6.
Compute n! under modulo p
7.
Multiply large integers under large modulo
8.
Equalizing array using increment under modulo 3
9.
Expressing a fraction as a natural number under modulo 'm'
10.
Nearest smaller number to N having multiplicative inverse under modulo N equal to that number
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
Sam007
jit_t
SURENDRA_GANGWAR
Rajput-Ji
_saurabh_jaiswal
decode2207
technophpfij
noviced3vq6
Article Tags :
Modular Arithmetic
Mathematical
Practice Tags :
Mathematical
Modular Arithmetic
modular arithmetic
Report Issue