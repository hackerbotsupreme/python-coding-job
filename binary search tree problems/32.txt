Largest number in BST which is less than or equal to N

Difficulty Level : Easy
Last Updated : 01 Dec, 2022
Read
Discuss(20+)
Courses
Practice
Video
We have a binary search tree and a number N. Our task is to find the greatest number in the binary search tree that is less than or equal to N. Print the value of the element if it exists otherwise print -1. 

BST

Examples: 

For the above given binary search tree- 

Input : N = 24
Output :result = 21
(searching for 24 will be like-5->12->21)

Input  : N = 4
Output : result = 3
(searching for 4 will be like-5->2->3)
Recommended Problem
Closest Neighbour in BST
Binary Search Tree
Tree
+1 more
Solve Problem
Submission count: 12.4K
We follow recursive approach for solving this problem. We start searching for element from root node. If we reach a leaf and its value is greater than N, element does not exist so return -1. Else if node’s value is less than or equal to N and right value is NULL or greater than N, then return the node value as it will be the answer. 

Otherwise if node’s value is greater than N, then search for the element in the left subtree else search for the element in the right subtree by calling the same function by passing the left or right values accordingly. 

Implementation:



C++
Java
Python3
# Python3 code to find the largest
# value smaller than or equal to N
class newNode:
 
    # Constructor to create a new node
    def __init__(self, data):
        self.key = data
        self.left = None
        self.right = None
 
# To insert a new node in BST
def insert(node, key):
     
    # if tree is empty return new node
    if node == None:
        return newNode(key)
 
    # if key is less than or greater than
    # node value then recur down the tree
    if key < node.key:
        node.left = insert(node.left, key)
    elif key > node.key:
        node.right = insert(node.right, key)
         
    # return the (unchanged) node pointer
    return node
 
# function to find max value less than N
def findMaxforN(root, N):
     
    # Base cases
    if root == None:
        return -1
    if root.key == N:
        return N
 
    # If root's value is smaller, try in
    # right subtree
    elif root.key < N:
        k = findMaxforN(root.right, N)
        if k == -1:
            return root.key
        else:
            return k
 
    # If root's key is greater, return
    # value from left subtree.
    elif root.key > N:
        return findMaxforN(root.left, N)
 
# Driver code
if __name__ == '__main__':
    N = 4
 
    # creating following BST
    #
    #             5
    #         / \
    #         2     12
    #     / \ / \
    #     1 3 9 21
    #                 / \
    #             19 25
    root = None
    root = insert(root, 25)
    insert(root, 2)
    insert(root, 1)
    insert(root, 3)
    insert(root, 12)
    insert(root, 9)
    insert(root, 21)
    insert(root, 19)
    insert(root, 25)
    print(findMaxforN(root, N))
 
# This code is contributed by PranchalK
C#
Javascript
Output
3
Time Complexity: O(h), where h is height of BST.
Auxiliary Space: O(h), The extra space is used in recursion call stack.

Iterative Solution: Below is an iterative solution and it does not require extra space for recursion call stack.  

Implementation:

C++
Java
Python3
# Python3 code to find the largest value
# smaller than or equal to N
 
class newNode:
     
    # To create new BST Node
    def __init__(self, data):
         
        self.key = data
        self.left = None
        self.right = None
 
# To insert a new node in BST
def insert(node, key):
     
    # If tree is empty return new node
    if (node == None):
        return newNode(key)
 
    # If key is less then or greater then
    # node value then recur down the tree
    if (key < node.key):
        node.left = insert(node.left, key)
    elif (key > node.key):
        node.right = insert(node.right, key)
 
    # Return the (unchanged) node pointer
    return node
 
# Function to find max value less than N
def findMaxforN(root, N):
     
    # Start from root and keep looking for larger 
    while (root != None and root.right != None):
         
        # If root is smaller go to right side
        if (N > root.key and N >= root.right.key):
            root = root.right
 
        # If root is greater go to left side
        elif (N < root.key):
            root = root.left
        else:
            break
         
    if (root == None or root.key > N):
        print(-1)
    else:
        print(root.key)
 
# Driver code
if __name__ == '__main__':
     
    N = 50
     
    root = None
    root = insert(root, 5)
    insert(root, 2)
    insert(root, 1)
    insert(root, 3)
    insert(root, 12)
    insert(root, 9)
    insert(root, 21)
    insert(root, 19)
    insert(root, 25)
 
    findMaxforN(root, N)
 
# This code is contributed by bgangwar59
C#
Javascript
Output
25
Time Complexity: O(h), where h is height of BST.
Auxiliary Space: O(1), As constant extra space is used.

 This article is contributed by Niteesh Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 





Like
13
Previous
Check if two BSTs contain same set of elements
Next
Maximum Unique Element in every subarray of size K
Related Articles
1.
Largest number less than or equal to N in BST (Iterative Approach)
2.
Smallest number in BST which is greater than or equal to N
3.
Smallest number in BST which is greater than or equal to N ( Iterative Approach)
4.
K'th Largest Element in BST when modification to BST is not allowed
5.
Convert a normal BST to Balanced BST
6.
Two nodes of a BST are swapped, correct the BST
7.
Find k-th smallest element in BST (Order Statistics in BST)
8.
Number of elements smaller than root using preorder traversal of a BST
9.
Find the largest BST subtree in a given Binary Tree | Set 3
10.
Second largest element in BST
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
abhishektayal0
prerna saini
PranchalKatiyar
29AjayKumar
padh_Le_Beta
bgangwar59
simmytarika5
Rajput-Ji
rag2127
surinderdawra388
mitalibhola94
hardikkoriintern
abhijeet19403
Article Tags :
Binary Search Tree
Tree
Practice Tags :
Binary Search Tree
Tree