Lowest Common Ancestor in a Binary Search Tree.

Difficulty Level : Easy
Last Updated : 22 Sep, 2022
Read
Discuss(250+)
Courses
Practice
Video
Given two values n1 and n2 in a Binary Search Tree, find the Lowest Common Ancestor (LCA). You may assume that both values exist in the tree. 

Let T be a rooted tree. The lowest common ancestor between two nodes n1 and n2 is defined as the lowest node in T that has both n1 and n2 as descendants (where we allow a node to be a descendant of itself). The LCA of n1 and n2 in T is the shared ancestor of n1 and n2 that is located farthest from the root [i.e., closest to n1 and n2].

Examples: 

Input Tree: 



Input: LCA of 10 and 14
Output:  12
Explanation: 12 is the closest node to both 10 and 14 
which is a ancestor of both the nodes.

Input: LCA of 8 and 14
Output:  8
Explanation: 8 is the closest node to both 8 and 14 
which is a ancestor of both the nodes.



Recommended Problem
Lowest Common Ancestor in a BST
Binary Search Tree
Tree
+1 more
Flipkart
Accolite
+5 more
Solve Problem
Submission count: 1L
Lowest Common Ancestor in a Binary Search Tree using Recursion:
To solve the problem follow the below idea:

For Binary search tree, while traversing the tree from top to bottom the first node which lies in between the two numbers n1 and n2 is the LCA of the nodes, i.e. the first node n with the lowest depth which lies in between n1 and n2 (n1<=n<=n2) n1 < n2. 

So just recursively traverse the BST , if nodeâ€™s value is greater than both n1 and n2 then our LCA lies in the left side of the node, if it is smaller than both n1 and n2, then LCA lies on the right side. Otherwise, the root is LCA (assuming that both n1 and n2 are present in BST)

Follow the given steps to solve the problem:

Create a recursive function that takes a node and the two values n1 and n2.
If the value of the current node is less than both n1 and n2, then LCA lies in the right subtree. Call the recursive function for the right subtree.
If the value of the current node is greater than both n1 and n2, then LCA lies in the left subtree. Call the recursive function for the left subtree.
If both the above cases are false then return the current node as LCA.
Below is the implementation of the above approach.

C++
C
Java
Python3
# A recursive python program to find LCA of two nodes
# n1 and n2
 
# A Binary tree node
 
 
class Node:
 
    # Constructor to create a new node
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 
# Function to find LCA of n1 and n2. The function assumes
# that both n1 and n2 are present in BST
 
 
def lca(root, n1, n2):
 
    # Base Case
    if root is None:
        return None
 
    # If both n1 and n2 are smaller than root, then LCA
    # lies in left
    if(root.data > n1 and root.data > n2):
        return lca(root.left, n1, n2)
 
    # If both n1 and n2 are greater than root, then LCA
    # lies in right
    if(root.data < n1 and root.data < n2):
        return lca(root.right, n1, n2)
 
    return root
 
# Driver program to test above function
 
 
# Driver code
root = Node(20)
root.left = Node(8)
root.right = Node(22)
root.left.left = Node(4)
root.left.right = Node(12)
root.left.right.left = Node(10)
root.left.right.right = Node(14)
 
 
# Function calls
n1 = 10
n2 = 14
t = lca(root, n1, n2)
print("LCA of %d and %d is %d" % (n1, n2, t.data))
 
n1 = 14
n2 = 8
t = lca(root, n1, n2)
print("LCA of %d and %d is %d" % (n1, n2, t.data))
 
n1 = 10
n2 = 22
t = lca(root, n1, n2)
print("LCA of %d and %d is %d" % (n1, n2, t.data))
 
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)
C#
Javascript
Output

LCA of 10 and 14 is 12 
LCA of 14 and 8 is 8 
LCA of 10 and 22 is 20 
Time Complexity: O(H). where H is the height of the tree.
Auxiliary Space: O(H), If recursive stack space is ignored, the space complexity of the above solution is constant.

Below is the iterative implementation of the above approach:

C++
C
Java
Python3
# A recursive python program to find LCA of two nodes
# n1 and n2
 
# A Binary tree node
 
 
class Node:
 
    # Constructor to create a new node
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 
# Function to find LCA of n1 and n2.
# The function assumes that both
#   n1 and n2 are present in BST
 
 
def lca(root, n1, n2):
    while root:
        # If both n1 and n2 are smaller than root,
        # then LCA lies in left
        if root.data > n1 and root.data > n2:
            root = root.left
 
        # If both n1 and n2 are greater than root,
        # then LCA lies in right
        elif root.data < n1 and root.data < n2:
            root = root.right
 
        else:
            break
 
    return root
 
 
# Driver code
if __name__ == '__main__':
  root = Node(20)
  root.left = Node(8)
  root.right = Node(22)
  root.left.left = Node(4)
  root.left.right = Node(12)
  root.left.right.left = Node(10)
  root.left.right.right = Node(14)
 
  # Function calls
  n1 = 10
  n2 = 14
  t = lca(root, n1, n2)
  print("LCA of %d and %d is %d" % (n1, n2, t.data))
 
  n1 = 14
  n2 = 8
  t = lca(root, n1, n2)
  print("LCA of %d and %d is %d" % (n1, n2, t.data))
 
  n1 = 10
  n2 = 22
  t = lca(root, n1, n2)
  print("LCA of %d and %d is %d" % (n1, n2, t.data))
# This Code is Contributed by Sumit Bhardwaj (Timus)
C#
Javascript
Output
LCA of 10 and 14 is 12 
LCA of 14 and 8 is 8 
LCA of 10 and 22 is 20 
Time Complexity: O(H). where H is the height of the tree
Auxiliary Space: O(1). The space complexity of the above solution is constant.

Related Articles: Lowest Common Ancestor in a Binary Tree, LCA using Parent Pointer, Find LCA in Binary Tree using RMQ

Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
 





Like
132
Previous
Find a pair with given sum in BST
Next
Convert a normal BST to Balanced BST
Related Articles
1.
Lowest Common Ancestor in a Binary Tree
2.
Lowest Common Ancestor in a Binary Tree | Set 3 (Using RMQ)
3.
Lowest Common Ancestor of the deepest leaves of a Binary Tree
4.
Lowest Common Ancestor in a Binary Tree using Parent Pointer
5.
Lowest Common Ancestor for a Set of Nodes in a Rooted Tree
6.
Lowest Common Ancestor in Parent Array Representation
7.
Least Common Ancestor of any number of nodes in Binary Tree
8.
Tarjan's off-line lowest common ancestors algorithm
9.
Complexity of different operations in Binary tree, Binary Search Tree and AVL tree
10.
Maximum difference between node and its ancestor in Binary Tree
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
shrikanth13
rathbhupendra
bhardwajsumit016
SHUBHAMSINGH10
andrew1234
avanitrachhadiya2155
aneema4536
rrrtnx
volumezero9786
sambitskd3
amartyaghoshgfg
technophpfij
janardansthox
Article Tags :
Accolite
Amazon
LCA
MAQ Software
Microsoft
Samsung
Synopsys
Binary Search Tree
Tree
Practice Tags :
Accolite
Amazon
MAQ Software
Microsoft
Samsung
Synopsys
Binary Search Tree
Tree
Improve Article
Report Issue