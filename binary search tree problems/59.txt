Inversion count in Array Using Self-Balancing BST

Difficulty Level : Hard
Last Updated : 15 Dec, 2022
Read
Discuss
Courses
Practice
Video
Inversion Count for an array indicates â€“ how far (or close) the array is from being sorted. If an array is already sorted then the inversion count is 0. If an array is sorted in the reverse order that inversion count is the maximum. 
Two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j. For simplicity, we may assume that all elements are unique.

Example: 

Input: arr[] = {8, 4, 2, 1}
Output: 6

Explanation: Given array has six inversions:
(8,4), (4,2),(8,2), (8,1), (4,1), (2,1).


Input: arr[] = {3, 1, 2}
Output: 2

Explanation:Given array has two inversions:
(3, 1), (3, 2)      
We have already discussed Naive approach and Merge Sort based approaches for counting inversions. 

Complexity Analysis of solution in above mentioned post: 

Time Complexity of the Naive approach is O(n2) 
Time Complexity of merge sort based approach is O(n Log n). 
Please go through AVL tree before reading this article.

There is one more efficient approach to solve the problem. 

Approach: The idea is to use Self-Balancing Binary Search Tree like Red-Black Tree, AVL Tree, etc and augment it so that every node also keeps track of number of nodes in the right subtree. So every node will contain the count of nodes in its right subtree i.e. the number of nodes greater than that number. So it can be seen that the count increases when there is a pair (a,b), where a appears before b in the array and a > b, So as the array is traversed from start to the end, add the elements to the AVL tree and the count of the nodes in its right subtree of the newly inserted node will be the count increased or the number of pairs (a,b) where b is the present element.



Algorithm: 

Create an AVL tree, with a property that every node will contain the size of its subtree.
Traverse the array from start to the end.
For every element insert the element in the AVL tree
The count of the nodes which are greater than the current element can be found out by checking the size of the subtree of its right children, So it can be guaranteed that elements in the right subtree of current node have index less than the current element and their values are greater than the current element. So those elements satisfy the criteria.
So increase the count by size of subtree of right child of the current inserted node.
Display the count.
Implementation:

C++
Java
Python3
# An AVL Tree based Python program to 
# count inversion in an array 
  
# A utility function to get height of 
# the tree rooted with N 
def height(N):
    if N == None: 
        return 0
    return N.height
  
# A utility function to size of the
# tree of rooted with N 
def size(N):
    if N == None: 
        return 0
    return N.size
  
# Helper function that allocates a new 
# Node with the given key and NULL left
# and right pointers. 
class newNode:
    def __init__(self, key):
        self.key = key 
        self.left = self.right = None
        self.height = self.size = 1
  
# A utility function to right rotate
# subtree rooted with y 
def rightRotate(y):
    x = y.left 
    T2 = x.right 
  
    # Perform rotation 
    x.right = y 
    y.left = T2 
  
    # Update heights 
    y.height = max(height(y.left), 
                   height(y.right)) + 1
    x.height = max(height(x.left), 
                   height(x.right)) + 1
  
    # Update sizes 
    y.size = size(y.left) + size(y.right) + 1
    x.size = size(x.left) + size(x.right) + 1
  
    # Return new root 
    return x
  
# A utility function to left rotate 
# subtree rooted with x 
def leftRotate(x):
    y = x.right 
    T2 = y.left 
  
    # Perform rotation 
    y.left = x 
    x.right = T2 
  
    # Update heights 
    x.height = max(height(x.left), 
                   height(x.right)) + 1
    y.height = max(height(y.left), 
                   height(y.right)) + 1
  
    # Update sizes 
    x.size = size(x.left) + size(x.right) + 1
    y.size = size(y.left) + size(y.right) + 1
  
    # Return new root 
    return y
  
# Get Balance factor of Node N 
def getBalance(N):
    if N == None:
        return 0
    return height(N.left) - height(N.right)
  
# Inserts a new key to the tree rotted 
# with Node. Also, updates *result (inversion count) 
def insert(node, key, result):
      
    # 1. Perform the normal BST rotation 
    if node == None: 
        return newNode(key)
  
    if key < node.key:
        node.left = insert(node.left, key, result) 
  
        # UPDATE COUNT OF GREATER ELEMENTS FOR KEY 
        result[0] = result[0] + size(node.right) + 1
    else:
        node.right = insert(node.right, key, result) 
  
    # 2. Update height and size of this ancestor node 
    node.height = max(height(node.left),    
                      height(node.right)) + 1
    node.size = size(node.left) + size(node.right) + 1
  
    # 3. Get the balance factor of this ancestor
    #     node to check whether this node became 
    #    unbalanced 
    balance = getBalance(node) 
  
    # If this node becomes unbalanced,  
    # then there are 4 cases 
  
    # Left Left Case 
    if (balance > 1 and key < node.left.key): 
        return rightRotate(node) 
  
    # Right Right Case 
    if (balance < -1 and key > node.right.key):
        return leftRotate(node) 
  
    # Left Right Case 
    if balance > 1 and key > node.left.key:
        node.left = leftRotate(node.left) 
        return rightRotate(node)
  
    # Right Left Case 
    if balance < -1 and key < node.right.key:
        node.right = rightRotate(node.right) 
        return leftRotate(node)
  
    # return the (unchanged) node pointer 
    return node
  
# The following function returns 
# inversion count in arr[] 
def getInvCount(arr, n):
    root = None # Create empty AVL Tree 
  
    result = [0] # Initialize result 
  
    # Starting from first element, insert all 
    # elements one by one in an AVL tree. 
    for i in range(n): 
  
        # Note that address of result is passed 
        # as insert operation updates result by 
        # adding count of elements greater than 
        # arr[i] on left of arr[i] 
        root = insert(root, arr[i], result) 
  
    return result[0]
  
# Driver Code
if __name__ == '__main__':
    arr = [8, 4, 2, 1] 
    n = len(arr) 
    print("Number of inversions count are :",
                         getInvCount(arr, n))
  
# This code is contributed by PranchalK
C#
Javascript
Output
Number of inversions count are : 6
Complexity Analysis:

Time Complexity: O(n Log n). 
Insertion in an AVL insert takes O(log n) time and n elements are inserted in the tree so time complexity is O(n log n).
Space Complexity: O(n). 
To create a AVL tree with max n nodes O(n) extra space is required.
Counting Inversions using Set in C++ STL.
We will soon be discussing Binary Indexed Tree based approach for the same.

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
22
Previous
Two nodes of a BST are swapped, correct the BST
Related Articles
1.
Inversion count in Array using BIT
2.
Inversion count in Array using Merge Sort
3.
Construct lexicographically smallest Binary array of size N with A 0s and X inversion count
4.
Inversion Count using Policy Based Data Structure
5.
K'th Largest Element in BST when modification to BST is not allowed
6.
Convert a normal BST to Balanced BST
7.
Two nodes of a BST are swapped, correct the BST
8.
Find k-th smallest element in BST (Order Statistics in BST)
9.
Count permutations of given array that generates the same Binary Search Tree (BST)
10.
Convert BST into a Min-Heap without using array
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
PranchalKatiyar
andrew1234
mysticpeaks
GauravRajput1
aashish1995
simmytarika5
hardikkoriintern
Article Tags :
inversion
Binary Search Tree
Practice Tags :
Binary Search Tree