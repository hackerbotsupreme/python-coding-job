Shortest distance between two nodes in BST

Difficulty Level : Easy
Last Updated : 02 Jan, 2023
Read
Discuss
Courses
Practice
Video
Given a Binary Search Tree and two keys in it. Find the distance between two nodes with given two keys. It may be assumed that both keys exist in BST.

BST

Examples:  

Input:  Root of above tree
         a = 3, b = 9
Output: 4
Distance between 3 and 9 in 
above BST is 4.

Input: Root of above tree
         a = 9, b = 25
Output: 3
Distance between 9 and 25 in 
above BST is 3.
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
We have discussed distance between two nodes in binary tree. The time complexity of this solution is O(n)
In the case of BST, we can find the distance faster. We start from the root and for every node, we do following. 

If both keys are greater than the current node, we move to the right child of the current node.
If both keys are smaller than current node, we move to left child of current node.
If one keys is smaller and other key is greater, current node is Lowest Common Ancestor (LCA) of two nodes. We find distances of current node from two keys and return sum of the distances.
Implementation:

C++
Java
Python3
# Python3 program to find distance between
# two nodes in BST
class newNode:
 
    # Constructor to create a new node
    def __init__(self, data):
        self.key = data
        self.left = None
        self.right = None
 
# Standard BST insert function
def insert(root, key):
    if root == None:
        root = newNode(key)
    else if root.key > key:
        root.left = insert(root.left, key)
    else if root.key < key:
        root.right = insert(root.right, key)
    return root
 
# This function returns distance of x from
# root. This function assumes that x exists
# in BST and BST is not NULL.
def distanceFromRoot(root, x):
    if root.key == x:
        return 0
    else if root.key > x:
        return 1 + distanceFromRoot(root.left, x)
    return 1 + distanceFromRoot(root.right, x)
 
# Returns minimum distance between a and b.
# This function assumes that a and b exist
# in BST.
def distanceBetween2(root, a, b):
    if root == None:
        return 0
 
    # Both keys lie in left
    if root.key > a and root.key > b:
        return distanceBetween2(root.left, a, b)
 
    # Both keys lie in right
    if root.key < a and root.key < b: # same path
        return distanceBetween2(root.right, a, b)
 
    # Lie in opposite directions
    # (Root is LCA of two nodes)
    if root.key >= a and root.key <= b:
        return (distanceFromRoot(root, a) +
                distanceFromRoot(root, b))
 
# This function make sure that a is smaller
# than b before making a call to findDistWrapper()
def findDistWrapper(root, a, b):
    if a > b:
        a, b = b, a
    return distanceBetween2(root, a, b)
 
# Driver code
if __name__ == '__main__':
    root = None
    root = insert(root, 20)
    insert(root, 10)
    insert(root, 5)
    insert(root, 15)
    insert(root, 30)
    insert(root, 25)
    insert(root, 35)
    a, b = 5, 55
    print(findDistWrapper(root, 5, 35))
 
# This code is contributed by PranchalK
C#
Javascript
Output
4
Time Complexity: O(h) where h is the height of the Binary Search Tree.
Auxiliary Space: O(h) as well, since we need a recursive stack of size h.

This article is contributed by Shweta Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 



Like
Previous
Iterative searching in Binary Search Tree
Next
Find distance between two nodes of a Binary Tree
Related Articles
1.
Two nodes of a BST are swapped, correct the BST
2.
Sum of all nodes with smaller values at a distance K from a given node in a BST
3.
Maximum element between two nodes of BST
4.
K'th Largest Element in BST when modification to BST is not allowed
5.
Convert a normal BST to Balanced BST
6.
Find k-th smallest element in BST (Order Statistics in BST)
7.
Correct BST whose two nodes are swapped (using Morris Traversal)
8.
Queries to find distance between two nodes of a Binary tree
9.
Queries to find distance between two nodes of a Binary tree - O(logn) method
10.
Find distance between two nodes in the given Binary tree for Q queries
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
prerna saini
PranchalKatiyar
Rajput-Ji
Akanksha_Rai
todaysgaurav
sagartomar9927
surinderdawra388
hardikkoriintern
factworx4i2
Article Tags :
Amazon
LCA
Ola Cabs
Qualcomm
Samsung
Binary Search Tree
Practice Tags :
Amazon
Ola Cabs
Qu