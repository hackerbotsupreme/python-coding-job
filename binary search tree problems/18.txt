Convert BST to Min Heap

Difficulty Level : Medium
Last Updated : 06 Sep, 2022
Read
Discuss(20)
Courses
Practice
Video
Given a binary search tree which is also a complete binary tree. The problem is to convert the given BST into a Min Heap with the condition that all the values in the left subtree of a node should be less than all the values in the right subtree of the node. This condition is applied to all the nodes, in the resultant converted Min Heap. 

Examples: 

Input:       4
                /   \
              2     6
            /  \   /  \
          1   3  5    7  
Output:  1
               /   \
             2     5
           /  \   /  \
         3   4  6    7 
Explanation: The given BST has been transformed into a Min Heap. All the nodes in the Min Heap satisfies the given condition, that is, values in the left subtree of a node should be less than the values in the right subtree of the node. 

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Approach: To solve the problem using this approach follow the below idea:

Store the inorder traversal of the BST in array and then do preorder traversal of the BST and while doing preorder traversal copy the values of inorder traversal into the current node, as copying the sorted elements while doing preorder traversal will make sure that a Min-Heap is constructed with the condition that all the values in the left subtree of a node are less than all the values in the right subtree of the node.

Follow the given steps to solve the problem:

Create an array arr[] of size N, where N is the number of nodes in the given BST.
Perform the inorder traversal of the BST and copy the node values in the arr[] in sorted order.
Now perform the preorder traversal of the tree.
While traversing the root during the preorder traversal, one by one copy the values from the array arr[] to the nodes of the BST.
Below is the implementation of the above approach:



C++
Java
Python3
# Python3 implementation to convert the
# given BST to Min Heap
 
# structure of a node of BST
 
 
class Node:
 
    # Constructor to create a new node
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 
# function for the inorder traversal
# of the tree so as to store the node
# values in 'arr' in sorted order
 
 
def inorderTraversal(root, arr):
    if root == None:
        return
 
    # first recur on left subtree
    inorderTraversal(root.left, arr)
 
    # then copy the data of the node
    arr.append(root.data)
 
    # now recur for right subtree
    inorderTraversal(root.right, arr)
 
# function to convert the given
# BST to MIN HEAP performs preorder
# traversal of the tree
 
 
def BSTToMinHeap(root, arr, i):
    if root == None:
        return
 
    # first copy data at index 'i' of
    # 'arr' to the node
    i[0] += 1
    root.data = arr[i[0]]
 
    # then recur on left subtree
    BSTToMinHeap(root.left, arr, i)
 
    # now recur on right subtree
    BSTToMinHeap(root.right, arr, i)
 
# utility function to convert the
# given BST to MIN HEAP
 
 
def convertToMinHeapUtil(root):
 
    # vector to store the data of
    # all the nodes of the BST
    arr = []
    i = [-1]
 
    # inorder traversal to populate 'arr'
    inorderTraversal(root, arr)
 
    # BST to MIN HEAP conversion
    BSTToMinHeap(root, arr, i)
 
# function for the preorder traversal
# of the tree
 
 
def preorderTraversal(root):
    if root == None:
        return
 
    # first print the root's data
    print(root.data, end=" ")
 
    # then recur on left subtree
    preorderTraversal(root.left)
 
    # now recur on right subtree
    preorderTraversal(root.right)
 
 
# Driver's Code
if __name__ == '__main__':
 
    # BST formation
    root = Node(4)
    root.left = Node(2)
    root.right = Node(6)
    root.left.left = Node(1)
    root.left.right = Node(3)
    root.right.left = Node(5)
    root.right.right = Node(7)
 
    # Function call
    convertToMinHeapUtil(root)
    print("Preorder Traversal:")
    preorderTraversal(root)
 
# This code is contributed
# by PranchalK
C#
Javascript
Output
Preorder Traversal:
1 2 3 4 5 6 7 
Time Complexity: O(N) 
Auxiliary Space: O(N)   

This article is contributed by Ayush Jauhari. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 





Like
102
Previous
Merge two binary Max Heaps
Next
Minimum sum of two numbers formed from digits of an array
Related Articles
1.
Convert Min Heap to Max Heap
2.
Convert BST into a Min-Heap without using array
3.
Difference between Binary Heap, Binomial Heap and Fibonacci Heap
4.
Heap Sort for decreasing order using min heap
5.
Difference between Min Heap and Max Heap
6.
Convert BST to Max Heap
7.
Convert a normal BST to Balanced BST
8.
When building a Heap, is the structure of Heap unique?
9.
Why is Binary Heap Preferred over BST for Priority Queue?
10.
K'th Largest Element in BST when modification to BST is not allowed
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
PranchalKatiyar
aashish1995
Rajput-Ji
mahi_07
rdtank
rahulchintawar
hardikkoriintern
janardansthox
mitalibhola94
Article Tags :
Binary Search Tree
Heap
Practice Tags :
Binary Search Tree
Heap
Improve Article
Report Issue