Find if there is a triplet in a Balanced BST that adds to zero

Difficulty Level : Hard
Last Updated : 20 Jun, 2022
Read
Discuss(60+)
Courses
Practice
Video
Given a Balanced Binary Search Tree (BST), write a function isTripletPresent() that returns true if there is a triplet in given BST with sum equals to 0, otherwise returns false. Expected time complexity is O(n^2) and only O(Logn) extra space can be used. You can modify given Binary Search Tree. Note that height of a Balanced BST is always O(Logn) 
For example, isTripletPresent() should return true for following BST because there is a triplet with sum 0, the triplet is {-13, 6, 7}.
 



 

Recommended: Please solve it on “PRACTICE” first, before moving on to the solution.
The Brute Force Solution is to consider each triplet in BST and check whether the sum adds upto zero. The time complexity of this solution will be O(n^3).
A Better Solution is to create an auxiliary array and store Inorder traversal of BST in the array. The array will be sorted as Inorder traversal of BST always produces sorted data. Once we have the Inorder traversal, we can use method 2 of this post to find the triplet with sum equals to 0. This solution works in O(n^2) time, but requires O(n) auxiliary space.


Following is the solution that works in O(n^2) time and uses O(Logn) extra space: 

Convert given BST to Doubly Linked List (DLL) 
Now iterate through every node of DLL and if the key of node is negative, then find a pair in DLL with sum equal to key of current node multiplied by -1. To find the pair, we can use the approach used in hasArrayTwoCandidates() in method 1 of this post. 
Implementation:
 

C++
C
Java
Python3
# A Python program to check if there
# is a triplet with sum equal to 0 in
# a given BST
 
# A BST Node has key, and left and right pointers
class Node:
    def __init__(self):
        self.key = 0;
        self.left = None;
        self.right = None;
head = Node();
tail = Node();
 
# A function to convert given BST to Doubly
# Linked List. left pointer is used
# as previous pointer and right pointer
# is used as next pointer. The function
# sets *head to point to first and *tail
# to point to last Node of converted DLL
def convertBSTtoDLL(root):
 
    # Base case
    if (root == None):
        return;
    global tail;
    global head;
     
    # First convert the left subtree
    if (root.left != None):
        convertBSTtoDLL(root.left);
 
    # Then change left of current root
    # as last Node of left subtree
    root.left = tail;
 
    # If tail is not None, then set right
    # of tail as root, else current
    # Node is head
    if (tail != None):
        (tail).right = root;
    else:
        head = root;
 
    # Update tail
    tail = root;
 
    # Finally, convert right subtree
    if (root.right != None):
        convertBSTtoDLL(root.right);
 
# This function returns True if there
# is pair in DLL with sum equal to given
# sum. The algorithm is similar to hasArrayTwoCandidates()
# in method 1 of http:#tinyurl.com/dy6palr
def isPresentInDLL(head, tail, s):
    while (head != tail):
        curr = head.key + tail.key;
        if (curr == s):
            return True;
        elif(curr > s):
            tail = tail.left;
        else:
            head = head.right;
     
    return False;
 
# The main function that returns
# True if there is a 0 sum triplet in
# BST otherwise returns False
def isTripletPresent(root):
   
    # Check if the given BST is empty
    if (root == None):
        return False;
 
    # Convert given BST to doubly linked list. head and tail store the
    # pointers to first and last Nodes in DLLL
    global tail;
    global head;
    head = None;
    tail = None;
    convertBSTtoDLL(root);
 
    # Now iterate through every Node and
    # find if there is a pair with sum
    # equal to -1 * head.key where head is current Node
    while ((head.right != tail) and (head.key < 0)):
       
        # If there is a pair with sum
        # equal to -1*head.key, then return
        # True else move forward
        if (isPresentInDLL(head.right, tail, -1 * head.key)):
            return True;
        else:
            head = head.right;
     
 
    # If we reach here, then
    # there was no 0 sum triplet
    return False;
 
# A utility function to create
# a new BST Node with key as given num
def newNode(num):
    temp = Node();
    temp.key = num;
    temp.left = temp.right = None;
    return temp;
 
# A utility function to insert a given key to BST
def insert(root, key):
    if (root == None):
        return newNode(key);
    if (root.key > key):
        root.left = insert(root.left, key);
    else:
        root.right = insert(root.right, key);
    return root;
 
# Driver code
if __name__ == '__main__':
    root = None;
    root = insert(root, 6);
    root = insert(root, -13);
    root = insert(root, 14);
    root = insert(root, -8);
    root = insert(root, 15);
    root = insert(root, 13);
    root = insert(root, 7);
    if (isTripletPresent(root)):
        print("Present");
    else:
        print("Not Present");
 
# This code is contributed by Rajput-Ji
C#
Javascript
Output


Present
Note that the above solution modifies given BST.

Time Complexity: Time taken to convert BST to DLL is O(n) and time taken to find triplet in DLL is O(n^2).
Auxiliary Space: The auxiliary space is needed only for function call stack in recursive function convertBSTtoDLL(). Since given tree is balanced (height is O(Logn)), the number of functions in call stack will never be more than O(Logn).

We can also find triplet in same time and extra space without modifying the tree. See next post. The code discussed there can be used to find triplet also.





Like
19
Previous
Convert a BST to a Binary Tree such that sum of all greater keys is added to every key
Next
Find a pair with given sum in a Balanced BST
Related Articles
1.
Convert a normal BST to Balanced BST
2.
Find a pair with given sum in a Balanced BST
3.
Check if a triplet with given sum exists in BST
4.
Triplet with a given sum in BST | Set 2
5.
Find k-th smallest element in BST (Order Statistics in BST)
6.
Sorted Array to Balanced BST
7.
Check if the Binary Tree contains a balanced BST of size K
8.
Create a balanced BST using vector in C++ STL
9.
Split a BST into two balanced BSTs based on a value K
10.
Sorted Linked List to Balanced BST
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
rathbhupendra
aashish1995
GauravRajput1
simranarora5sos
Rajput-Ji
surinderdawra388
simmytarika5
hardikkoriintern
Article Tags :
Binary Search Tree
Practice Tags :
Binary Search Tree
Improve Article
Report Issue