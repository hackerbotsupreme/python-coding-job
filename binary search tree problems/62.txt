Special two digit numbers in a Binary Search Tree

Difficulty Level : Easy
Last Updated : 01 Dec, 2022
Read
Discuss
Courses
Practice
Video
Given a Binary Search Trees, the task is to count the number of nodes which are having special two-digit numbers.
Prerequisite : Special Two Digit Number | Binary Search Tree 

Examples :  

Input : 15 7 987 21
Output : 0

Input : 19 99 57 1 22
Output : 2
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Algorithm: Iterate through each node of tree recursively with a variable count, and check each nodeâ€™s data for a special two-digit number. If it is then increment the variable count. In the end, return count.

Implementation:


C++
C
Java
Python3
# Python3 program to count number of nodes in
# BST containing two digit special number
 
# A Tree node
class Node:
     
    def __init__(self, x):
         
        self.data = x
        self.left = None
        self.right = None
 
# Function to create a new node
def insert(node, data):
     
    global succ
     
    # If the tree is empty, return
    # a new node
    root = node
 
    if (node == None):
        return Node(data)
 
    # If key is smaller than root's key,
    # go to left subtree and set successor
    # as current node
    if (data < node.data):
        root.left = insert(node.left, data)
 
    # Go to right subtree
    elif (data > node.data):
        root.right = insert(node.right, data)
         
    return root
 
# Function to find if number
# is special or not
def check(num):
     
    sum = 0
    i = num
    #sum_of_digits, prod_of_digits
 
    # Check if number is two digit or not
    if (num < 10 or num > 99):
        return 0
    else:
        sum_of_digits = (i % 10) + (i // 10)
        prod_of_digits = (i % 10) * (i // 10)
        sum = sum_of_digits + prod_of_digits
 
    if (sum == num):
        return 1
    else:
        return 0
 
# Function to count number of special
# two digit number
def countSpecialDigit(rt):
     
    global c
     
    if (rt == None):
        return
    else:
        x = check(rt.data)
        if (x == 1):
            c += 1
             
        countSpecialDigit(rt.left)
        countSpecialDigit(rt.right)
 
# Driver code
if __name__ == '__main__':
     
    root = None
 
    # Initialize result
    c = 0
 
    # Function call to insert() to
    # insert nodes
    root = insert(root, 50)
    root = insert(root, 29)
    root = insert(root, 59)
    root = insert(root, 19)
    root = insert(root, 53)
    root = insert(root, 556)
    root = insert(root, 56)
    root = insert(root, 94)
    root = insert(root, 13)
 
    # Function call, to check each node
    # for special two digit number
    countSpecialDigit(root)
     
    print(c)
 
# This code is contributed by mohit kumar 29
C#
Javascript
Output
3
Time Complexity: O(N), Where N is the number of nodes in Tree.
Auxiliary Space: O(h), Here h is the height of the tree and this extra space is used due to the recursion call stack.





Like
4
Previous
Binary Tree to Binary Search Tree Conversion using STL set
Next
K'th Largest element in BST using constant extra space
Related Articles
1.
Binary Tree to Binary Search Tree Conversion
2.
Binary Tree to Binary Search Tree Conversion using STL set
3.
Difference between Binary Tree and Binary Search Tree
4.
Search N elements in an unbalanced Binary Search Tree in O(N * logM) time
5.
Binary Search Tree | Set 1 (Search and Insertion)
6.
Convert a Binary Search Tree into a Skewed tree in increasing or decreasing order
7.
Flatten a Binary Search Tree to convert the tree into a wave list in place only
8.
Difference between Binary Search Tree and AVL Tree
9.
Count the Number of Binary Search Trees present in a Binary Tree
10.
Maximum sub-tree sum in a Binary Tree such that the sub-tree is also a BST
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
AmishTandon
@AmishTandon
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
mysticpeaks
mohit kumar 29
avanitrachhadiya2155
unknown2108
itsok
hardikkoriintern
abhijeet19403
Article Tags :
Binary Search Trees
Binary Search Tree
Practice Tags :
Binary Search Tree
Improve Article
Report Issue