Remove all leaf nodes from the binary search tree

Difficulty Level : Easy
Last Updated : 28 Nov, 2022
Read
Discuss
Courses
Practice
Video
We have given a binary search tree and we want to delete the leaf nodes from the binary search tree. 

Examples: 

Input : 20 10 5 15 30 25 35
Output : Inorder before Deleting the leaf node
         5 10 15 20 25 30 35
         Inorder after Deleting the leaf node
         10 20 30

        This is the binary search tree where we
        want to delete the leaf node.
              20
           /     \
          10      30
         /  \    /  \
       5     15 25   35 

      After deleting the leaf node the binary 
      search tree looks like
              20
           /     \
          10      30
     
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
We traverse given Binary Search Tree in inorder way. During traversal, we check if current node is leaf, if yes, we delete it. Else we recur for left and right children. An important thing to remember is, we must assign new left and right children if there is any modification in roots of subtrees. 

Implementation:

C++
Java
Python3
# Python 3 program to delete leaf
# Node from binary search tree.
 
# Create a newNode in binary search tree.
class newNode:
 
    # Constructor to create a new node
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 
# Insert a Node in binary search tree.
def insert(root, data):
    if root == None:
        return newNode(data)
    if data < root.data:
        root.left = insert(root.left, data)
    else if data > root.data:
        root.right = insert(root.right, data)
    return root
 
# Function for inorder traversal in a BST.
def inorder(root):
    if root != None:
        inorder(root.left)
        print(root.data, end = " ")
        inorder(root.right)
 
# Delete leaf nodes from binary search tree.
def leafDelete(root):
    if root == None:
        return None
    if root.left == None and root.right == None:
        return None
 
    # Else recursively delete in left
    # and right subtrees.
    root.left = leafDelete(root.left)
    root.right = leafDelete(root.right)
 
    return root
 
# Driver code
if __name__ == '__main__':
    root = None
    root = insert(root, 20)
    insert(root, 10)
    insert(root, 5)
    insert(root, 15)
    insert(root, 30)
    insert(root, 25)
    insert(root, 35)
    print("Inorder before Deleting the leaf Node.")
    inorder(root)
    leafDelete(root)
    print()
    print("INorder after Deleting the leaf Node.")
    inorder(root)    
 
# This code is contributed by PranchalK
C#
Javascript
Output
Inorder before Deleting the leaf Node.
5 10 15 20 25 30 35 
INorder after Deleting the leaf Node.
10 20 30 
Time Complexity: O(n), As we are visiting every node just once. Here n is the number of nodes in the tree.
Auxiliary Space: O(h), Here h is the height of the tree and the extra space is used in the recursion call stack.

This article is contributed by Dharmendra kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 







Like
14
Previous
Count BST subtrees that lie in given range
Next
Sum of k smallest elements in BST
Related Articles
1.
Leaf nodes from Preorder of a Binary Search Tree
2.
Create Balanced Binary Tree using its Leaf Nodes without using extra space
3.
Print all even nodes of Binary Search Tree
4.
Pre-Order Successor of all nodes in Binary Search Tree
5.
Median of all nodes from a given range in a Binary Search Tree ( BST )
6.
Print all odd nodes of Binary Search Tree
7.
Binary Tree to Binary Search Tree Conversion
8.
Binary Tree to Binary Search Tree Conversion using STL set
9.
Difference between Binary Tree and Binary Search Tree
10.
Binary Search Tree | Set 1 (Search and Insertion)
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
prerna saini
PranchalKatiyar
princiraj1992
RajBhise
Ankur_Agarwal
gp6
todaysgaurav
simmytarika5
hardikkoriintern
abhijeet19403
Article Tags :
Binary Search Tree
Practice Tags :
Binary Search Tree