Convert a normal BST to Balanced BST

Difficulty Level : Medium
Last Updated : 28 Nov, 2022
Read
Discuss
Courses
Practice
Video
Given a BST (Binary Search Tree) that may be unbalanced, convert it into a balanced BST that has minimum possible height.

Examples : 

Input:
       30
      /
     20
    /
   10
Output:
     20
   /   \
 10     30


Input:
         4
        /
       3
      /
     2
    /
   1
Output:
      3            3           2
    /  \         /  \        /  \
   1    4   OR  2    4  OR  1    3   OR ..
    \          /                   \
     2        1                     4 

Input:
          4
        /   \
       3     5
      /       \
     2         6 
    /           \
   1             7
Output:
       4
    /    \
   2      6
 /  \    /  \
1    3  5    7 
Recommended Problem
Normal BST to Balanced BST
Binary Search Tree
Data Structures
Paytm
Solve Problem
Submission count: 17.1K
A Simple Solution is to traverse nodes in Inorder and one by one insert into a self-balancing BST like AVL tree. Time complexity of this solution is O(n Log n) and this solution doesnâ€™t guarantee the minimum possible height as in the worst case the height of the AVL tree can be 1.44*log2n.

An Efficient Solution can be to construct a balanced BST in O(n) time with minimum possible height. Below are steps. 

Traverse given BST in inorder and store result in an array. This step takes O(n) time. Note that this array would be sorted as inorder traversal of BST always produces sorted sequence.
Build a balanced BST from the above created sorted array using the recursive approach discussed here. This step also takes O(n) time as we traverse every element exactly once and processing an element takes O(1) time.
Below is the implementation of above steps. 

C++
Java
Python3
# Python3 program to convert a left
# unbalanced BST to a balanced BST
import sys
import math
 
# A binary tree node has data, pointer to left child
# and a pointer to right child
class Node:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None
 
# This function traverse the skewed binary tree and
# stores its nodes pointers in vector nodes[]
def storeBSTNodes(root,nodes):
     
    # Base case
    if not root:
        return
     
    # Store nodes in Inorder (which is sorted
    # order for BST)
    storeBSTNodes(root.left,nodes)
    nodes.append(root)
    storeBSTNodes(root.right,nodes)
 
# Recursive function to construct binary tree
def buildTreeUtil(nodes,start,end):
     
    # base case
    if start>end:
        return None
 
    # Get the middle element and make it root
    mid=(start+end)//2
    node=nodes[mid]
 
    # Using index in Inorder traversal, construct
    # left and right subtress
    node.left=buildTreeUtil(nodes,start,mid-1)
    node.right=buildTreeUtil(nodes,mid+1,end)
    return node
 
# This functions converts an unbalanced BST to
# a balanced BST
def buildTree(root):
     
    # Store nodes of given BST in sorted order
    nodes=[]
    storeBSTNodes(root,nodes)
 
    # Constructs BST from nodes[]
    n=len(nodes)
    return buildTreeUtil(nodes,0,n-1)
 
# Function to do preorder traversal of tree
def preOrder(root):
    if not root:
        return
    print("{} ".format(root.data),end="")
    preOrder(root.left)
    preOrder(root.right)
 
# Driver code
if __name__=='__main__':
    # Constructed skewed binary tree is
    #         10
    #         /
    #         8
    #         /
    #     7
    #     /
    #     6
    #     /
    # 5
    root = Node(10)
    root.left = Node(8)
    root.left.left = Node(7)
    root.left.left.left = Node(6)
    root.left.left.left.left = Node(5)
    root = buildTree(root)
    print("Preorder traversal of balanced BST is :")
    preOrder(root)
     
# This code has been contributed by Vikash Kumar 37
C#
Javascript
Output
Preorder traversal of balanced BST is : 
7 5 6 8 10 
Time Complexity: O(n), As we are just traversing the tree twice. Once in inorder traversal and then in construction of the balanced tree.
Auxiliary space: O(n), The extra space is used to store the nodes of the inorder traversal in the vector. Also the extra space taken by recursion call stack is O(h) where h is the height of the tree.





This article is contributed Aditya Goel. If you likeGeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.





Like
108
Previous
Lowest Common Ancestor in a Binary Search Tree.
Next
Sorted Array to Balanced BST
Related Articles
1.
Comparison between Height Balanced Tree and Weight Balanced Tree
2.
Sorted Array to Balanced BST
3.
Find if there is a triplet in a Balanced BST that adds to zero
4.
Check if the Binary Tree contains a balanced BST of size K
5.
Create a balanced BST using vector in C++ STL
6.
Find a pair with given sum in a Balanced BST
7.
Split a BST into two balanced BSTs based on a value K
8.
Sorted Linked List to Balanced BST
9.
K'th Largest Element in BST when modification to BST is not allowed
10.
Two nodes of a BST are swapped, correct the BST
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
shrikanth13
Vikash Kumar 37
suresh07
clintra
hardikkoriintern
abhijeet19403
Article Tags :
Binary Search Tree
Tree
Practice Tags :
Binary Search Tree
Tree
Improve Article
Report Issue