Construct BST from given preorder traversal | Set 1

Difficulty Level : Hard
Last Updated : 13 Jan, 2023
Read
Discuss(260+)
Courses
Practice
Video
Given the preorder traversal of a binary search tree, construct the BST.

Examples:

 Input: {10, 5, 1, 7, 40, 50}
Output:   10
               /   \
            5     40
          /  \       \
       1    7       50

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Naive approach: To solve the problem follow the below idea:

The first element of preorder traversal is always the root. We first construct the root. Then we find the index of the first element which is greater than the root. Let the index be ‘i’. The values between root and ‘i’ will be part of the left subtree, and the values between ‘i'(inclusive) and ‘n-1’ will be part of the right subtree. Divide the given pre[] at index “i” and recur for left and right sub-trees. 

For example in {10, 5, 1, 7, 40, 50}, 10 is the first element, so we make it root. Now we look for the first element greater than 10, we find 40. So we know the structure of BST is as follows.:

             10
           /    \
{5, 1, 7}     {40, 50}



We recursively follow the above steps for subarrays {5, 1, 7} and {40, 50}, and get the complete tree.

Below is the implementation of the above approach:

C++
C
Java
Python3
# A O(n^2) Python3 program for
# construction of BST from preorder traversal
 
# A binary tree node
 
 
class Node():
 
    # A constructor to create a new node
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 
 
# constructTreeUtil.preIndex is a static variable of
# function constructTreeUtil
 
# Function to get the value of static variable
# constructTreeUtil.preIndex
def getPreIndex():
    return constructTreeUtil.preIndex
 
# Function to increment the value of static variable
# constructTreeUtil.preIndex
 
 
def incrementPreIndex():
    constructTreeUtil.preIndex += 1
 
# A recursive function to construct Full from pre[].
# preIndex is used to keep track of index in pre[[].
 
 
def constructTreeUtil(pre, low, high):
 
        # Base Case
    if(low > high):
        return None
 
    # The first node in preorder traversal is root. So take
    # the node at preIndex from pre[] and make it root,
    # and increment preIndex
    root = Node(pre[getPreIndex()])
    incrementPreIndex()
 
    # If the current subarray has only one element,
    # no need to recur
    if low == high:
        return root
 
    r_root = -1
 
    # Search for the first element greater than root
    for i in range(low, high+1):
        if (pre[i] > root.data):
            r_root = i
            break
 
    # If no elements are greater than the current root,
    # all elements are left children
    # so assign root appropriately
    if r_root == -1:
        r_root = getPreIndex() + (high - low)
 
    # Use the index of element found in preorder to divide
    # preorder array in two parts. Left subtree and right
    # subtree
    root.left = constructTreeUtil(pre, getPreIndex(), r_root-1)
 
    root.right = constructTreeUtil(pre, r_root, high)
 
    return root
 
# The main function to construct BST from given preorder
# traversal. This function mainly uses constructTreeUtil()
 
 
def constructTree(pre):
    size = len(pre)
    constructTreeUtil.preIndex = 0
    return constructTreeUtil(pre, 0, size-1)
 
 
def printInorder(root):
    if root is None:
        return
    printInorder(root.left)
    print(root.data, end=' ')
    printInorder(root.right)
 
 
# Driver code
if __name__ == '__main__':
  pre = [10, 5, 1, 7, 40, 50]
 
  root = constructTree(pre)
   
  printInorder(root)
 
# This code is contributed by Nikhil Kumar Singh(nickzuck_007) and Rhys Compton
C#
Javascript
Output
Inorder traversal of the constructed tree: 
1 5 7 10 40 50 
Time Complexity: O(N2)
Auxiliary Space: O(N)

Approach: To solve the problem follow the below idea:

 Using the recursion concept and iterating through the array of the given elements we can generate the BST

Follow the below steps to solve the problem:

Create a new Node for every value in the array
Create a BST using these new Nodes and insert them according to the rules of the BST
Print the inorder of the BST
Below is the implementation of the above approach:

C++
Java
Python3
# Construct a BST from given pre-order traversal
# for example if the given traversal is {10, 5, 1, 7, 40, 50},
# then the output should be the root of the following tree.
#     10
#   /   \
#  5     40
# /  \      \
# 1    7      50
 
 
class Node:
    data = 0
    left = None
    right = None
 
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 
 
class CreateBSTFromPreorder:
    node = None
    # This will create the BST
 
    @staticmethod
    def createNode(node,  data):
        if (node == None):
            node = Node(data)
        if (node.data > data):
            node.left = CreateBSTFromPreorder.createNode(node.left, data)
        if (node.data < data):
            node.right = CreateBSTFromPreorder.createNode(node.right, data)
        return node
 
    # A wrapper function of createNode
    @staticmethod
    def create(data):
        CreateBSTFromPreorder.node = CreateBSTFromPreorder.createNode(
            CreateBSTFromPreorder.node, data)
 
    # A function to print BST in inorder
    @staticmethod
    def inorderRec(root):
        if (root != None):
            CreateBSTFromPreorder.inorderRec(root.left)
            print(root.data)
            CreateBSTFromPreorder.inorderRec(root.right)
 
    # Driver Code
    @staticmethod
    def main(args):
        nodeData = [10, 5, 1, 7, 40, 50]
        i = 0
        while (i < len(nodeData)):
            CreateBSTFromPreorder.create(nodeData[i])
            i += 1
        CreateBSTFromPreorder.inorderRec(CreateBSTFromPreorder.node)
 
 
if __name__ == "__main__":
    CreateBSTFromPreorder.main([])
 
# This code is contributed by mukulsomukesh
C#
Javascript
Output
1
5
7
10
40
50
Time Complexity: O(N * log N)
Auxiliary Space: O(N)

Efficient Approach: To solve the problem follow the below idea:

The trick is to set a range {min .. max} for every node. 

Follow the below steps to solve the problem:

Initialize the range as {INT_MIN .. INT_MAX}
The first node will definitely be in range, so create a root node. 
To construct the left subtree, set the range as {INT_MIN …root->data}. 
If a value is in the range {INT_MIN .. root->data}, the values are part of the left subtree. 
To construct the right subtree, set the range as {root->data..max .. INT_MAX}. 
Below is the implementation of the above approach:

C++
C
Java
Python3
# Python3 program for the above approach
 
INT_MIN = -float("inf")
INT_MAX = float("inf")
 
# A Binary tree node
 
 
class Node:
 
    # Constructor to created a new node
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 
# Methods to get and set the value of static variable
# constructTreeUtil.preIndex for function construcTreeUtil()
 
 
def getPreIndex():
    return constructTreeUtil.preIndex
 
 
def incrementPreIndex():
    constructTreeUtil.preIndex += 1
 
# A recursive function to construct BST from pre[].
# preIndex is used to keep track of index in pre[]
 
 
def constructTreeUtil(pre, key, mini, maxi, size):
 
    # Base Case
    if(getPreIndex() >= size):
        return None
 
    root = None
 
    # If current element of pre[] is in range, then
    # only it is part of current subtree
    if(key > mini and key < maxi):
 
        # Allocate memory for root of this subtree
        # and increment constructTreeUtil.preIndex
        root = Node(key)
        incrementPreIndex()
 
        if(getPreIndex() < size):
 
            # Construct the subtree under root
            # All nodes which are in range {min.. key} will
            # go in left subtree, and first such node will
            # be root of left subtree
            root.left = constructTreeUtil(pre,
                                          pre[getPreIndex()],
                                          mini, key, size)
        if(getPreIndex() < size):
 
            # All nodes which are in range{key..max} will
            # go to right subtree, and first such node will
            # be root of right subtree
            root.right = constructTreeUtil(pre,
                                           pre[getPreIndex()],
                                           key, maxi, size)
 
    return root
 
# This is the main function to construct BST from given
# preorder traversal. This function mainly uses
# constructTreeUtil()
 
 
def constructTree(pre):
    constructTreeUtil.preIndex = 0
    size = len(pre)
    return constructTreeUtil(pre, pre[0], INT_MIN, INT_MAX, size)
 
 
# A utility function to print inorder traversal of Binary Tree
def printInorder(node):
 
    if node is None:
        return
    printInorder(node.left)
    print(node.data, end=" ")
    printInorder(node.right)
 
 
# Driver code
pre = [10, 5, 1, 7, 40, 50]
 
# Function call
root = constructTree(pre)
 
 
printInorder(root)
 
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)
C#
Javascript
Output
Inorder traversal of the constructed tree: 
1 5 7 10 40 50 
Time Complexity: O(N)
Auxiliary Space: O(N)





Like
238
Previous
Advantages of BST over Hash Table
Next
Binary Tree to Binary Search Tree Conversion
Related Articles
1.
Construct BST from given preorder traversal using Sorting
2.
Construct BST from given preorder traversal using Stack
3.
Find postorder traversal of BST from preorder traversal
4.
Number of elements smaller than root using preorder traversal of a BST
5.
Construct a BST from given postorder traversal using Stack
6.
Construct BST from its given level order traversal
7.
Check if a given array can represent Preorder Traversal of Binary Search Tree
8.
Binary Search Tree (BST) Traversals – Inorder, Preorder, Post Order
9.
K'th Largest Element in BST when modification to BST is not allowed
10.
Convert a normal BST to Balanced BST
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
shrikanth13
rathbhupendra
Akanksha_Rai
SatvikNema
roysubham505
Rajput-Ji
duke0122
rhyscompton
zeekgeek
harmonpreet012
as5853535
asthasinha2305
gunjanmodi
amartyaghoshgfg
sweetyty
GauravRajput1
sagartomar9927
mukulsomukesh
shinjanpatra
hardikkoriintern
janardansthox
arorakashish0911
simranarora5sos
Article Tags :
Binary Search Tree
Practice Tags :
Binary Search Tree