Check for Identical BSTs without building the trees

Difficulty Level : Hard
Last Updated : 25 Oct, 2022
Read
Discuss(210+)
Courses
Practice
Video
Given two arrays that represent a sequence of keys. Imagine we make a Binary Search Tree (BST) from each array. We need to tell whether two BSTs will be identical or not without actually constructing the tree.

Example:

For example, the input arrays are {2, 4, 3, 1} and {2, 1, 4, 3} will construct the same tree 

 Let the input arrays be a[] and b[]

Example 1:
a[] = {2, 4, 1, 3} will construct following tree.
   2
 /  \
1    4
    /
   3
b[] = {2, 4, 3, 1} will also construct the same tree.
   2
 /  \
1    4
    /
   3 
So the output is "True"

Example 2:
a[] = {8, 3, 6, 1, 4, 7, 10, 14, 13}
b[] = {8, 10, 14, 3, 6, 4, 1, 7, 13}

They both construct the same following BST, so output is "True"
            8
         /    \
       3       10
     /  \        \
    1     6       14
        /   \     /
       4     7   13  
Solution: 

According to BST property, elements of the left subtree must be smaller and elements of right subtree must be greater than root. 
Two arrays represent the same BST if, for every element x, the elements in left and right subtrees of x appear after it in both arrays. And same is true for roots of left and right subtrees. 
The idea is to check of if next smaller and greater elements are same in both arrays. Same properties are recursively checked for left and right subtrees. The idea looks simple, but implementation requires checking all conditions for all elements. Following is an interesting recursive implementation of the idea. 
Implementation:

C++
C
Java
Python3
# A Python3 program to check for Identical
# BSTs without building the trees
 
# # The main function that checks if two
# arrays a[] and b[] of size n construct
# same BST. The two values 'min' and 'max'
# decide whether the call is made for left
# subtree or right subtree of a parent
# element. The indexes i1 and i2 are the
# indexes in (a[] and b[]) after which we
# search the left or right child. Initially,
# the call is made for INT_MIN and INT_MAX
# as 'min' and 'max' respectively, because
# root has no parent. i1 and i2 are just
# after the indexes of the parent element in a[] and b[]. */
def isSameBSTUtil(a, b, n, i1, i2, min, max):
 
    # # Search for a value satisfying the
    # constraints of min and max in a[] and
    # b[]. If the parent element is a leaf
    # node then there must be some elements
    # in a[] and b[] satisfying constraint. */
    j, k = i1, i2
    while j < n:
        if (a[j] > min and a[j] < max):
            break;
        j += 1
    while k<n:
        if (b[k] > min and b[k] < max):
            break
        k += 1
 
    # If the parent element is leaf in both arrays */
    if (j == n and k == n):
        return True
 
    # Return false if any of the following is true
        # a) If the parent element is leaf in one array,
        #     but non-leaf in other.
        # b) The elements satisfying constraints are
        #     not same. We either search for left
        #     child or right child of the parent
        #     element (decided by min and max values).
        #     The child found must be same in both arrays */
    if (((j == n) ^ (k == n)) or a[j] != b[k]):
        return False
 
    # Make the current child as parent and
    # recursively check for left and right
    # subtrees of it. Note that we can also
    # pass a[k] in place of a[j] as they
    # are both are same */
    return isSameBSTUtil(a, b, n, j + 1, k + 1, a[j], max) and isSameBSTUtil(a, b, n, j + 1, k + 1, min, a[j]) #Left Subtree
 
# A wrapper over isSameBSTUtil()
def isSameBST(a, b, n):
    return isSameBSTUtil(a, b, n, 0, 0, -10**9, 10**9)
 
# Driver code
if __name__ == '__main__':
    a = [8, 3, 6, 1, 4, 7, 10, 14, 13]
    b = [8, 10, 14, 3, 6, 4, 1, 7, 13]
    n = len(a)
 
    if(isSameBST(a, b, n)):
        print("BSTs are same")
    else:
        print("BSTs not same")
 
# This code is contributed by mohit kumar 29.
C#
Javascript
Output
BSTs are same
Time Complexity: O(N2)
Auxiliary Space: O(N), for recursive stack space.

Recommended
Solve DSA problems on GfG Practice.

Solve Problems


Like
Next
K'th Largest Element in BST when modification to BST is not allowed
Related Articles
1.
Check whether the two Binary Search Trees are Identical or Not
2.
Check if two BSTs contain same set of elements
3.
Check if two given key sequences construct same BSTs
4.
Merge two BSTs with limited extra space
5.
Find pairs with given sum such that pair elements lie in different BSTs
6.
Count pairs from two BSTs whose sum is equal to a given value x
7.
Merge two BSTs with constant extra space
8.
Generate two BSTs from the given array such that maximum height among them is minimum
9.
Nodes from given two BSTs with sum equal to X
10.
Total number of BSTs using array elements
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
codeShaurya
princiraj1992
29AjayKumar
rathbhupendra
mohit kumar 29
unknown2108
simmytarika5
hardikkoriintern
mitalibhola94
ajaymakvana
Article Tags :
Binary Search Tree
Practice Tags :
Binary Search Tree
Report Issue