Write program to calculate pow(x, n)

Difficulty Level : Easy
Last Updated : 08 Nov, 2022
Read
Discuss(150+)
Courses
Practice
Video
Given two integers x and n, write a function to compute xn. We may assume that x and n are small and overflow doesnâ€™t happen.

program to calculate pow(x,n)

Examples : 

Input : x = 2, n = 3
Output : 8

Input : x = 7, n = 2
Output : 49

Recommended Problem
Power Of Numbers
Mathematical
Recursion
+2 more
MakeMyTrip
Walmart
Solve Problem
Submission count: 1.4L
Naive Approach: To solve the problem follow the below idea:

A simple solution to calculate pow(x, n) would multiply x exactly n times. We can do that by using a simple for loop



Below is the implementation of the above approach:

C++
Java
Python
# Python3 program for the above approach
def power(x, n):
 
    # initialize result by 1
    pow = 1
 
    # Multiply x for n times
    for i in range(n):
        pow = pow * x
 
    return pow
 
 
# Driver code
if __name__ == '__main__':
 
    x = 2
    n = 3
 
       # Function call
    print(power(x, n))
C#
Javascript
Output
8
Time Complexity: O(n)
Auxiliary Space: O(1)

pow(x, n) using recursion:
We can use the same approach as above but instead of an iterative loop, we can use recursion for the purpose.

C++
C
Java
Python3
# Python3 program for the above approach
def power(x, n):
 
    # If x^0 return 1
    if (n == 0):
        return 1
 
    # If we need to find of 0^y
    if (x == 0):
        return 0
 
    # For all other cases
    return x * power(x, n - 1)
 
 
# Driver Code
if __name__ == "__main__":
    x = 2
    n = 3
 
    # Function call
    print(power(x, n))
 
# This code is contributed by shivani.
C#
Javascript
Output
8
Time Complexity: O(n)
Auxiliary Space: O(n) n is the size of the recursion stack

Program to calculate pow(x, n) using Divide and Conqueror approach:
To solve the problem follow the below idea:

The problem can be recursively defined by:

power(x, n) = power(x, n / 2) * power(x, n / 2);        // if n is even
power(x, n) = x * power(x, n / 2) * power(x, n / 2);    // if n is odd
Below is the implementation of the above approach:

C++
C
Java
Python
# Python3 program to calculate pow(x,n)
 
# Function to calculate x
# raised to the power y
 
 
def power(x, y):
 
    if (y == 0):
        return 1
    elif (int(y % 2) == 0):
        return (power(x, int(y / 2)) *
                power(x, int(y / 2)))
    else:
        return (x * power(x, int(y / 2)) *
                power(x, int(y / 2)))
 
 
# Driver Code
if __name__ == "__main__":
    x = 2
    y = 3
 
    # Function call
    print(power(x, y))
 
# This code is contributed by Smitha Dinesh Semwal.
C#
PHP
Javascript
Output
8
Time Complexity: O(n)
Auxiliary Space: O(n)

An Optimized Divide and Conquer Solution:
To solve the problem follow the below idea:

There is a problem with the above solution, the same subproblem is computed twice for each recursive call. We can optimize the above function by computing the solution of the subproblem once only.

Below is the implementation of the above approach:

C++
C
Java
Python3
# Function to calculate x raised to the power y in O(logn)
def power(x, y):
    temp = 0
    if(y == 0):
        return 1
    temp = power(x, int(y / 2))
    if (y % 2 == 0)
    return temp * temp
    else
    return x * temp * temp
 
# This code is contributed by avanitrachhadiya2155
C#
Javascript
Output
8
Time Complexity: O(log n)
Auxiliary Space: O(log n), for recursive call stack

Extend the pow function to work for negative n and float x:
Below is the implementation of the above approach:

C++
C
Java
Python3
# Python3 code for extended version
# of power function that can work
# for float x and negative y
 
 
def power(x, y):
 
    if(y == 0):
        return 1
    temp = power(x, int(y / 2))
 
    if (y % 2 == 0):
        return temp * temp
    else:
        if(y > 0):
            return x * temp * temp
        else:
            return (temp * temp) / x
 
 
# Driver Code
if __name__ == "__main__":
    x, y = 2, -3
 
    # Function call
    print('%.6f' % (power(x, y)))
 
# This code is contributed by Smitha Dinesh Semwal.
C#
PHP
Javascript
Output
0.125
Time Complexity: O(log |n|)
Auxiliary Space: O(1)

 
Program to calculate pow(x,n) using inbuilt power function:
To solve the problem follow the below idea:

We can use inbuilt power function pow(x, n) to calculate xn

Below is the implementation of the above approach:

C++
Java
Python3
# Python3 program for the above approach
def power(x, n):
 
    # Return type of pow()
    # function is double
    return pow(x, n)
 
 
# Driver Code
if __name__ == "__main__":
    x = 2
    n = 3
 
    # Function call
    print(power(x, n))
 
# This code is contributed by susmitakundugoaldanga
C#
Javascript
Output
8
Time Complexity: O(log n)
Auxiliary Space: O(1)

Program to calculate pow(x,n) using Binary operators:
To solve the problem follow the below idea:

Some important concepts related to this approach:

Every number can be written as the sum of powers of 2
We can traverse through all the bits of a number from LSB to MSB in O(log n) time.
Illustration:

 3^10 = 3^8 * 3^2. (10 in binary can be represented as 1010, where from the left side the first 1 represents 3^2 and the second 1 represents 3^8)

3^19 = 3^16 * 3^2 * 3. (19 in binary can be represented as 10011, where from the left side the first 1 represents 3^1 and second 1 represents 3^2 and the third one represents 3^16)

Below is the implementation of the above approach.

C++
Java
Python3
# Python3 program for the above approach
def power(x, n):
 
    result = 1
    while (n > 0):
        if (n % 2 == 0):
            # y is even
 
            x = x * x
            n = n / 2
 
        else:
            # y isn't even
 
            result = result * x
            n = n - 1
 
    return result
 
 
# Driver Code
if __name__ == "__main__":
    x = 2
    n = 3
 
    # Function call
    print((power(x, n)))
 
# This code is contributed by shivanisinghss2110
C#
Javascript
Output
8
Time Complexity: O(log n)
Auxiliary Space: O(1)

Related Articles:
Write an iterative O(Log y) function for pow(x, y) 
Modular Exponentiation (Power in Modular Arithmetic)

If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.
Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above.





Like
181
Previous
Randomized Binary Search Algorithm
Next
Divide and Conquer | Set 5 (Strassen's Matrix Multiplication)
Related Articles
1.
Write an Efficient C Program to Reverse Bits of a Number
2.
Write a program to print all Permutations of given String
3.
Write a program to add two numbers in base 14
4.
Write a program to reverse an array or string
5.
C Program To Write Your Own atoi()
6.
Python Program To Write Your Own atoi()
7.
Java Program To Write Your Own atoi()
8.
C++ Program To Write Your Own atoi()
9.
Javascript Program To Write Your Own atoi()
10.
Write a program to reverse digits of a number
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
jit_t
SoumikMondal
rathbhupendra
divyeshrabadiya07
divyesh072019
avanitrachhadiya2155
SHUBHAMSINGH10
rohitsingh07052
le0
mukesh07
todaysgaurav
aashish1995
Rajput-Ji
sravankumar_171fa07058
souravghosh0416
ukasp
shivanisinghss2110
hemantraj712
susmitakundugoaldanga
madhav_mohan
souravmahato348
rag2127
hritikrommie
rishavmahato348
subham348
suruchikumarimfp4
krisania804
pratyutsharma
harendrakumar123
janardansthox
pushpeshrajdx01
garg28harsh
Article Tags :
Amazon
MakeMyTrip
maths-power
Microsoft
Modular Arithmetic
Divide and Conquer
Mathematical
Practice Tags :
Amazon
MakeMyTrip
Microsoft
Divide and Conquer
Mathematical
Modular Arithmetic
modular arithmetic
Improve Article
Report Issue