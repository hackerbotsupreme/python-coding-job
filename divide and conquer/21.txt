The painterâ€™s partition problem using Binary Search

Difficulty Level : Hard
Last Updated : 23 Jan, 2023
Read
Discuss
Courses
Practice
Video
We have to paint n boards of length {A1, A2, .. An}. There are k painters available and each takes 1 unit time to paint 1 unit of board. The problem is to find the minimum time to get this job done under the constraints that any painter will only paint continuous sections of boards, say board {2, 3, 4} or only board {1} or nothing but not board {2, 4, 5}.

Examples : 

Input : k = 2, A = {10, 10, 10, 10} 
Output : 20.
Here we can divide the boards into 2
equal sized partitions, so each painter 
gets 20 units of board and the total
time taken is 20. 

Input : k = 2, A = {10, 20, 30, 40} 
Output : 60.
Here we can divide first 3 boards for
one painter and the last board for 
second painter.
Recommended Problem
The Painter's Partition Problem-II
Searching
Dynamic Programming
+3 more
Microsoft
Google
+1 more
Solve Problem
Submission count: 56.5K
In the previous post we discussed a dynamic programming based approach having time complexity of O(K * N^2)        and O(k * N)        extra space. 
In this post we will look into a more efficient approach using binary search. We know that the invariant of binary search has two main parts: 
* the target value would always be in the searching range. 
* the searching range will decrease in each loop so that the termination can be reached. 

We also know that the values in this range must be in sorted order. Here our target value is the maximum sum of a contiguous section in the optimal allocation of boards. Now how can we apply binary search for this? We can fix the possible low to high range for the target value and narrow down our search to get the optimal allocation.


We can see that the highest possible value in this range is the sum of all the elements in the array and this happens when we allot 1 painter all the sections of the board. The lowest possible value of this range is the maximum value of the array max, as in this allocation we can allot max to one painter and divide the other sections such that the cost of them is less than or equal to max and as close as possible to max. Now if we consider we use x painters in the above scenarios, it is obvious that as the value in the range increases, the value of x decreases and vice-versa. From this we can find the target value when x=k and use a helper function to find x, the minimum number of painters required when the maximum length of section a painter can paint is given.

C++
Java
Python3
# Python program for painter's partition problem
 
# Find minimum required painters for given maxlen
# which is the maximum length a painter can paint
def numberOfPainters(arr, n, maxLen):
    total = 0
    numPainters = 1
 
    for i in arr:
        total += i
 
        if (total > maxLen):
 
            # for next count
            total = i
            numPainters += 1
 
    return numPainters
 
def partition(arr, n, k):
    lo = max(arr)
    hi = sum(arr)
 
    while (lo < hi):
        mid = lo + (hi - lo) // 2
        requiredPainters = numberOfPainters(arr, n, mid)
 
        # find better optimum in lower half
        # here mid is included because we
        # may not get anything better
        if (requiredPainters <= k):
            hi = mid
 
        # find better optimum in upper half
        # here mid is excluded because it gives
        # required Painters > k, which is invalid
        else:
            lo = mid + 1
 
    # required
    return lo
 
# Driver code
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
n = len(arr)
k = 3
print(int(partition(arr, n, k)))
C#
PHP
Javascript
Output : 

17
For better understanding, please trace the example given in the program in pen and paper. 
Time Complexity: O(N * log (sum (arr[]))        .
Auxiliary Space: O(1)



References: 
https://articles.leetcode.com/the-painters-partition-problem-part-ii/ 
https://www.topcoder.com/community/data-science/data-science-tutorials/binary-search/
Asked in: Google, Codenation.
 





Like
53
Previous
Decrease and Conquer
Next
Numbers whose factorials end with n zeros
Related Articles
1.
Print equal sum sets of Array (Partition Problem) using Dynamic Programming
2.
Meta Binary Search | One-Sided Binary Search
3.
The painter's partition problem
4.
Print equal sum sets of array (Partition problem) | Set 1
5.
Partition problem | DP-18
6.
A Problem in Many Binary Search Implementations
7.
Linear Search vs Binary Search
8.
Why is Binary Search preferred over Ternary Search?
9.
Interpolation search vs Binary search
10.
Minimum cost to partition the given binary string
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
rsatish1110
@rsatish1110
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
jit_t
adwaith1990
sanjoy_62
cyclades
ks9192174414
Article Tags :
Binary Search
Codenation
Google
Competitive Programming
Divide and Conquer
Dynamic Programming
Searching
Practice Tags :
Codenation
Google
Binary Search
Divide and Conquer
Dynamic Programming
Searching