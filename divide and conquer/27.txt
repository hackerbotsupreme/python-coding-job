Inversion count in Array using Merge Sort

Difficulty Level : Hard
Last Updated : 04 Jan, 2023
Read
Discuss(360+)
Courses
Practice
Video
Inversion Count for an array indicates – how far (or close) the array is from being sorted. If the array is already sorted, then the inversion count is 0, but if the array is sorted in reverse order, the inversion count is the maximum. 

Given an array a[]. The task is to find the inversion count of a[]. Where two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.

Examples: 

Input: arr[] = {8, 4, 2, 1}
Output: 6
Explanation: Given array has six inversions: (8, 4), (4, 2), (8, 2), (8, 1), (4, 1), (2, 1).

Input: arr[] = {1, 20, 6, 4, 5}
Output: 5
Explanation: Given array has five inversions: (20, 6), (20, 4), (20, 5), (6, 4), (6, 5). 

Recommended Problem
Count Inversions
Arrays
Divide and Conquer
+3 more
Flipkart
Amazon
+5 more
Solve Problem
Submission count: 3.7L
 
Complete Interview Preparation - GFG

Naive Approach:



Traverse through the array, and for every index, find the number of smaller elements on its right side of the array. This can be done using a nested loop. Sum up the counts for all indices in the array and print the sum.

Follow the below steps to Implement the idea:

Traverse through the array from start to end
For every element, find the count of elements smaller than the current number up to that index using another loop.
Sum up the count of inversion for every index.
Print the count of inversions.
Below is the Implementation of the above approach:

C++
C
Java
Python3
# Python3 program to count
# inversions in an array
 
 
def getInvCount(arr, n):
 
    inv_count = 0
    for i in range(n):
        for j in range(i + 1, n):
            if (arr[i] > arr[j]):
                inv_count += 1
 
    return inv_count
 
 
# Driver Code
arr = [1, 20, 6, 4, 5]
n = len(arr)
print("Number of inversions are",
      getInvCount(arr, n))
 
# This code is contributed by Smitha Dinesh Semwal
C#
PHP
Javascript
Output
 Number of inversions are 5
Time Complexity: O(N2), Two nested loops are needed to traverse the array from start to end.
Auxiliary Space: O(1), No extra space is required.

 
Complete Interview Preparation - GFG

Count Inversions in an array using Merge Sort:
Below is the idea to solve the problem:

Use Merge sort with modification that every time an unsorted pair is found increment count by one and return count at the end.

Illustration:

Suppose the number of inversions in the left half and right half of the array (let be inv1 and inv2); what kinds of inversions are not accounted for in Inv1 + Inv2? The answer is – the inversions that need to be counted during the merge step. Therefore, to get the total number of inversions that needs to be added are the number of inversions in the left subarray, right subarray, and merge().

inv_count1

How to get the number of inversions in merge()? 
In merge process, let i is used for indexing left sub-array and j for right sub-array. At any step in merge(), if a[i] is greater than a[j], then there are (mid – i) inversions. because left and right subarrays are sorted, so all the remaining elements in left-subarray (a[i+1], a[i+2] … a[mid]) will be greater than a[j]

inv_count2

The complete picture:

inv_count3

Follow the below steps to Implement the idea:

The idea is similar to merge sort, divide the array into two equal or almost equal halves in each step until the base case is reached.
Create a function merge that counts the number of inversions when two halves of the array are merged, 
Create two indices i and j, i is the index for the first half, and j is an index of the second half. 
If a[i] is greater than a[j], then there are (mid – i) inversions because left and right subarrays are sorted, so all the remaining elements in left-subarray (a[i+1], a[i+2] … a[mid]) will be greater than a[j].
Create a recursive function to divide the array into halves and find the answer by summing the number of inversions in the first half, the number of inversions in the second half and the number of inversions by merging the two.
The base case of recursion is when there is only one element in the given half.
Print the answer.
Below is the Implementation of the above approach:

C++
C
Java
Python3
# Python 3 program to count inversions in an array
 
# Function to Use Inversion Count
 
 
def mergeSort(arr, n):
    # A temp_arr is created to store
    # sorted array in merge function
    temp_arr = [0]*n
    return _mergeSort(arr, temp_arr, 0, n-1)
 
# This Function will use MergeSort to count inversions
 
 
def _mergeSort(arr, temp_arr, left, right):
 
    # A variable inv_count is used to store
    # inversion counts in each recursive call
 
    inv_count = 0
 
    # We will make a recursive call if and only if
    # we have more than one elements
 
    if left < right:
 
        # mid is calculated to divide the array into two subarrays
        # Floor division is must in case of python
 
        mid = (left + right)//2
 
        # It will calculate inversion
        # counts in the left subarray
 
        inv_count += _mergeSort(arr, temp_arr,
                                left, mid)
 
        # It will calculate inversion
        # counts in right subarray
 
        inv_count += _mergeSort(arr, temp_arr,
                                mid + 1, right)
 
        # It will merge two subarrays in
        # a sorted subarray
 
        inv_count += merge(arr, temp_arr, left, mid, right)
    return inv_count
 
# This function will merge two subarrays
# in a single sorted subarray
 
 
def merge(arr, temp_arr, left, mid, right):
    i = left     # Starting index of left subarray
    j = mid + 1  # Starting index of right subarray
    k = left     # Starting index of to be sorted subarray
    inv_count = 0
 
    # Conditions are checked to make sure that
    # i and j don't exceed their
    # subarray limits.
 
    while i <= mid and j <= right:
 
        # There will be no inversion if arr[i] <= arr[j]
 
        if arr[i] <= arr[j]:
            temp_arr[k] = arr[i]
            k += 1
            i += 1
        else:
            # Inversion will occur.
            temp_arr[k] = arr[j]
            inv_count += (mid-i + 1)
            k += 1
            j += 1
 
    # Copy the remaining elements of left
    # subarray into temporary array
    while i <= mid:
        temp_arr[k] = arr[i]
        k += 1
        i += 1
 
    # Copy the remaining elements of right
    # subarray into temporary array
    while j <= right:
        temp_arr[k] = arr[j]
        k += 1
        j += 1
 
    # Copy the sorted subarray into Original array
    for loop_var in range(left, right + 1):
        arr[loop_var] = temp_arr[loop_var]
 
    return inv_count
 
 
# Driver Code
# Given array is
arr = [1, 20, 6, 4, 5]
n = len(arr)
result = mergeSort(arr, n)
print("Number of inversions are", result)
 
# This code is contributed by ankush_953
C#
Javascript
Output
 Number of inversions are 5
Time Complexity: O(n * log n), The algorithm used is divide and conquer i.e. merge sort whose complexity is O(n log n).
Auxiliary Space: O(n), Temporary array.

Note: The above code modifies (or sorts) the input array. If we want to count only inversions, we need to create a copy of the original array and call mergeSort() on the copy to preserve the original array’s order.

Count Inversions in an array using Heapsort and Bisection:
Follow the below steps to Implement the idea:

Create a heap with new pair elements,  (element, index). 
After sorting them, pop out each minimum sequentially and create a new sorted list with the indexes. 
Calculate the difference between the original index and the index of bisection of the new sorted list.
Sum up the difference.
Below is the idea to Implement the above approach:

C++
Java
Python3
from heapq import heappush, heappop
from bisect import bisect, insort
 
 
def getNumOfInversions(A):
    N = len(A)
    if N <= 1:
        return 0
 
    sortList = []
    result = 0
 
    # Heapsort, O(N*log(N))
    for i, v in enumerate(A):
        heappush(sortList, (v, i))
 
    # Create a sorted list of indexes
    x = []
    while sortList:
       
        # O(log(N))
        v, i = heappop(sortList)
         
        # Find the current minimum's index
        # the index y can represent how many minimums on the left
        y = bisect(x, i)
         
        # i can represent how many elements on the left
        # i - y can find how many bigger nums on the left
        result += i - y
 
        insort(x, i)
 
    return result
 
# Driver Code
if __name__ == '__main__':
    A = [1, 20, 6, 4, 5]
    result = getNumOfInversions(A)
    print(f'Number of inversions are {result}')
C#
Javascript
Output
Number of inversions are 5
 
Time Complexity: O(n * log n). Both heapsort and bisection can perform sorted insertion in (log n) in each element.
Auxiliary Space: O(n). A heap and a new list are the same length as the original array.

You may like to see:
Count inversions in an array | Set 2 (Using Self-Balancing BST) 
Counting Inversions using Set in C++ STL 
Count inversions in an array | Set 3 (Using BIT)
Please write comments if you find any bug in the above program/algorithm or other ways to solve it.





Like
435
Previous
Sort elements by frequency
Next
Minimum number of swaps required to sort an array
Related Articles
1.
Find expected swaps to sort given Array where probability of swapping any inversion pair is equal
2.
Inversion count in Array Using Self-Balancing BST
3.
Inversion count in Array using BIT
4.
Construct lexicographically smallest Binary array of size N with A 0s and X inversion count
5.
Count number of Inversion in a Binary Array
6.
Inversion Count using Policy Based Data Structure
7.
Merge Sort with O(1) extra space merge and O(n lg n) time [Unsigned Integers Only]
8.
Minimum count of Inversion Pairs possible by concatenating N binary strings in any order
9.
Count of smaller elements on right side of each element in an Array using Merge sort
10.
Count of distinct numbers in an Array in a range for Online Queries using Merge Sort Tree
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
Sam007
ShahbazAlam
ukasp
Akanksha_Rai
Rajput-Ji
rathbhupendra
ankush_953
pradipbasak
gp6
SubhajitNandi
andrew1234
shubhamscifi
ashitagarwal89
yiwang2005
parascoding
karthiksrinivasprasad
akshitx10
avanitrachhadiya2155
triper1022
surinderdawra388
hardikkoriintern
aashutoshparoha
surajv
ruhelaa48
phasing17
Article Tags :
Adobe
Amazon
BankBazaar
Flipkart
inversion
Merge Sort
Microsoft
Myntra
Arrays
Divide and Conquer
Sorting
Practice Tags :
Adobe
Amazon
BankBazaar
Flipkart
Microsoft
Myntra
Arrays
Divide and Conquer
Merge Sort
Sorting
Improve Article
Report Issue