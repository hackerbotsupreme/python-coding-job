Longest Possible Route in a Matrix with Hurdles

Difficulty Level : Medium
Last Updated : 25 Nov, 2022
Read
Discuss(30+)
Courses
Practice
Video
Given an M x N matrix, with a few hurdles arbitrarily placed, calculate the length of the longest possible route possible from source to a destination within the matrix. We are allowed to move to only adjacent cells which are not hurdles. The route cannot contain any diagonal moves and a location once visited in a particular path cannot be visited again.

For example, the longest path with no hurdles from source to destination is highlighted below. The length of the path is 24.



Recommended: Please try your approach on {IDE} first, before moving on to the solution.
The idea is to use Backtracking. We start from the source cell of the matrix, move forward in all four allowed directions, and recursively checks if they lead to the solution or not. If the destination is found, we update the value of the longest path else if none of the above solutions work we return false from our function.

Below is the implementation of the above idea 

CPP
Java
Python3
# Python program to find Longest Possible Route in a
# matrix with hurdles
import sys
R,C = 3,10
 
# A Pair to store status of a cell. found is set to
# True of destination is reachable and value stores
# distance of longest path
class Pair:
     
    def __init__(self, found, value):
        self.found = found
        self.value = value
 
# Function to find Longest Possible Route in the
# matrix with hurdles. If the destination is not reachable
# the function returns false with cost sys.maxsize.
# (i, j) is source cell and (x, y) is destination cell.
def findLongestPathUtil(mat, i, j, x, y, visited):
 
    # if (i, j) itself is destination, return True
    if (i == x and j == y):
        p = Pair( True, 0 )
        return p
     
    # if not a valid cell, return false
    if (i < 0 or i >= R or j < 0 or j >= C or mat[i][j] == 0 or visited[i][j]) :
        p = Pair( False, sys.maxsize )
        return p
 
    # include (i, j) in current path i.e.
    # set visited(i, j) to True
    visited[i][j] = True
 
    # res stores longest path from current cell (i, j) to
    # destination cell (x, y)
    res = -sys.maxsize -1
 
    # go left from current cell
    sol = findLongestPathUtil(mat, i, j - 1, x, y, visited)
 
    # if destination can be reached on going left from
    # current cell, update res
    if (sol.found):
        res = max(res, sol.value)
 
    # go right from current cell
    sol = findLongestPathUtil(mat, i, j + 1, x, y, visited)
 
    # if destination can be reached on going right from
    # current cell, update res
    if (sol.found):
        res = max(res, sol.value)
 
    # go up from current cell
    sol = findLongestPathUtil(mat, i - 1, j, x, y, visited)
 
    # if destination can be reached on going up from
    # current cell, update res
    if (sol.found):
        res = max(res, sol.value)
 
    # go down from current cell
    sol = findLongestPathUtil(mat, i + 1, j, x, y, visited)
 
    # if destination can be reached on going down from
    # current cell, update res
    if (sol.found):
        res = max(res, sol.value)
 
    # Backtrack
    visited[i][j] = False
 
    # if destination can be reached from current cell,
    # return True
    if (res != -sys.maxsize -1):
        p = Pair( True, 1 + res )
        return p
     
    # if destination can't be reached from current cell,
    # return false
    else:
        p = Pair( False, sys.maxsize )
        return p
 
# A wrapper function over findLongestPathUtil()
def findLongestPath(mat, i, j, x,y):
 
    # create a boolean matrix to store info about
    # cells already visited in current route
    # initialize visited to false
    visited = [[False for i in range(C)]for j in range(R)]
 
    # find longest route from (i, j) to (x, y) and
    # print its maximum cost
    p = findLongestPathUtil(mat, i, j, x, y, visited)
    if (p.found):
        print("Length of longest possible route is ",str(p.value))
 
    # If the destination is not reachable
    else:
        print("Destination not reachable from given source")
 
# Driver code
 
# input matrix with hurdles shown with number 0
mat = [ [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
        [ 1, 1, 0, 1, 1, 0, 1, 1, 0, 1 ],
        [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
 
# find longest path with source (0, 0) and
# destination (1, 7)
findLongestPath(mat, 0, 0, 1, 7)
 
# This code is contributed by shinjanpatra
C#
Javascript
Output
Length of longest possible route is 24
Time Complexity: 4^(R*C)



Here R and C are the numbers of rows and columns respectively. For every index we have four options, so our overall time complexity will become 4^(R*C).

Auxiliary Space: O(R*C)

The extra space is used in storing the elements of the visited matrix.

This article is contributed by Aditya Goel. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 





Like
37
Previous
Partition of a set into K subsets with equal sum
Next
Match a pattern and String without using regular expressions
Related Articles
1.
Find shortest safe route in a path with landmines
2.
Check if it is possible to make the given matrix increasing matrix or not
3.
Maximum trace possible for any sub-matrix of the given matrix
4.
Generate a Matrix such that given Matrix elements are equal to Bitwise OR of all corresponding row and column elements of generated Matrix
5.
Generate matrix from given Sparse Matrix using Linked List and reconstruct the Sparse Matrix
6.
Find the longest path in a matrix with given constraints
7.
Longest Increasing Path in Matrix
8.
Longest path in a Matrix from a specific source cell to destination cell
9.
Print all possible paths from top left to bottom right of a mXn matrix
10.
Count all possible paths from top left to bottom right of a mXn matrix
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
ruhelaa48
psyduck
shinjanpatra
abhijeet19403
hardikkoriintern
tapeshdua420
Article Tags :
Backtracking
Matrix
Practice Tags :
Backtracking
Matrix
Improve Article
Report Issue