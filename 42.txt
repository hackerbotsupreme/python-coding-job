Remove Invalid Parentheses

Difficulty Level : Hard
Last Updated : 07 Mar, 2022
Read
Discuss(40+)
Courses
Practice
Video
An expression will be given which can contain open and close parentheses and optionally some characters, No other operator will be there in string. We need to remove minimum number of parentheses to make the input string valid. If more than one valid output are possible removing same number of parentheses then print all such output. 
Examples: 
 

Input  : str = “()())()” -
Output : ()()() (())()
There are two possible solutions
"()()()" and "(())()"

Input  : str = (v)())()
Output : (v)()()  (v())()
 

Recommended Problem
Remove Invalid Parentheses
Solve Problem
Submission count: 2.7K
As we need to generate all possible output we will backtrack among all states by removing one opening or closing bracket and check if they are valid if invalid then add the removed bracket back and go for next state. We will use BFS for moving through states, use of BFS will assure removal of minimal number of brackets because we traverse into states level by level and each level corresponds to one extra bracket removal. Other than this BFS involve no recursion so overhead of passing parameters is also saved. 
Below code has a method isValidString to check validity of string, it counts open and closed parenthesis at each index ignoring non-parenthesis character. If at any instant count of close parenthesis becomes more than open then we return false else we keep update the count variable. 
 

C++
Java
Python3
# Python3 program to remove invalid parenthesis
 
# Method checks if character is parenthesis(open
# or closed)
def isParenthesis(c):
    return ((c == '(') or (c == ')'))
 
# method returns true if contains valid
# parenthesis
def isValidString(str):
    cnt = 0
    for i in range(len(str)):
        if (str[i] == '('):
            cnt += 1
        else if (str[i] == ')'):
            cnt -= 1
        if (cnt < 0):
            return False
    return (cnt == 0)
     
# method to remove invalid parenthesis
def removeInvalidParenthesis(str):
    if (len(str) == 0):
        return
         
    # visit set to ignore already visited
    visit = set()
     
    # queue to maintain BFS
    q = []
    temp = 0
    level = 0
     
    # pushing given as starting node into queue
    q.append(str)
    visit.add(str)
    while(len(q)):
        str = q[0]
        q.pop()
        if (isValidString(str)):
            print(str)
             
            # If answer is found, make level true
            # so that valid of only that level
            # are processed.
            level = True
        if (level):
            continue
        for i in range(len(str)):
            if (not isParenthesis(str[i])):
                continue
                 
            # Removing parenthesis from str and
            # pushing into queue,if not visited already
            temp = str[0:i] + str[i + 1:]
            if temp not in visit:
                q.append(temp)
                visit.add(temp)
 
# Driver Code
expression = "()())()"
removeInvalidParenthesis(expression)
expression = "()v)"
removeInvalidParenthesis(expression)
 
# This code is contributed by SHUBHAMSINGH10
C#
Javascript
Output:  

(())()
()()()
(v)
()v
This article is contributed by Utkarsh Trivedi. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
 



Like
Next
Match a pattern and String without using regular expressions
Related Articles
1.
Count pairs of parentheses sequences such that parentheses are balanced
2.
Find the number of valid parentheses expressions of given length
3.
Length of longest balanced parentheses prefix
4.
Check for balanced parentheses in an expression | O(1) space
5.
Minimum number of Parentheses to be added to make it valid
6.
Number of ways to insert two pairs of parentheses into a string of N characters
7.
Print the string obtained after removal of outermost parentheses
8.
Calculate score of a string consisting of balanced parentheses
9.
Calculate score of parentheses from a given string
10.
Arrange given numbers in a mathematical expression using operators [+, -, *, /] and parentheses to get value 24
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
SHUBHAMSINGH10
29AjayKumar
princi singh
rag2127
sandeep5521
simmytarika5
Article Tags :
Parentheses-Problems
Backtracking
Practice Tags :
Backtracking