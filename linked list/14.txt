Deletion in Linked List

Difficulty Level : Easy
Last Updated : 18 Jan, 2023
Read
Discuss(60+)
Courses
Practice
Video
We have discussed Linked List Introduction and Linked List Insertion in previous posts on a singly linked list.
Let us formulate the problem statement to understand the deletion process. 

Delete from a Linked List:-
You can delete an element in a list from:

Beginning
End
Middle
1) Delete from Beginning:
Point head to the next node i.e. second node
    temp = head
    head = head->next
    
Make sure to free unused memory
    free(temp); or delete temp;
2) Delete from End:
Point head to the previous element i.e. last second element
    Change next pointer to null
    struct node *end = head;
    struct node *prev = NULL;
    while(end->next)
    {
        prev = end;
        end = end->next;
    }
    prev->next = NULL;
    
Make sure to free unused memory
    free(end); or delete end;
3) Delete from Middle:
Keeps track of pointer before node to delete and pointer to node to delete
    temp = head;
    prev = head;
    for(int i = 0; i < position; i++)
    {
        if(i == 0 && position == 1)
            head = head->next;
            free(temp)
        else
        {
            if (i == position - 1 && temp)
            {
                prev->next = temp->next;
                free(temp);
            }
            else
            {
                prev = temp;
                if(prev == NULL) // position was greater than number of nodes in the list
                    break;
                temp = temp->next; 
            }
        }
    }
    
Iterative Method to delete an element from the linked list:
To delete a node from the linked list, we need to do the following steps:

Find the previous node of the node to be deleted. 
Change the next of the previous node. 
Free memory for the node to be deleted.
Below is the implementation to delete a node from the list at some position:

C++
C
Python3
# Python program to implement the above approach
class Node:
    # constructor to initialize the node object
    def __init__(self, data):
        self.number = data
        self.next = None
 
 
def push(head, A):
    n = Node(A)
    n.number = A
    n.next = head
    head = n
    return head
 
 
def deleteN(head, position):
    temp = head
    prev = head
    for i in range(0, position):
        if i == 0 and position == 1:
            head = head.next
 
        else:
            if i == position-1 and temp is not None:
                prev.next = temp.next
            else:
                prev = temp
 
                # Position was greater than
                # number of nodes in the list
                if prev is None:
                    break
                temp = temp.next
    return head
 
 
def printList(head):
    while(head):
        if head.next == None:
            print("[", head.number, "] ", "[", hex(id(head)), "]->", "nil")
        else:
            print("[", head.number, "] ", "[", hex(
                id(head)), "]->", hex(id(head.next)))
        head = head.next
    print("")
    print("")
 
 
head = Node(0)
head = push(head, 1)
head = push(head, 2)
head = push(head, 3)
 
printList(head)
 
# Delete any position from list
head = deleteN(head, 1)
printList(head)
 
# This code is contributed by Yash Agawral(yashagawral2852002)
Output
[3] [0x1b212c0]->0x1b212a0
[2] [0x1b212a0]->0x1b21280
[1] [0x1b21280]->0x1b21260
[0] [0x1b21260]->(nil)


[2] [0x1b212a0]->0x1b21280
[1] [0x1b21280]->0x1b21260
[0] [0x1b21260]->(nil)
Time Complexity: O(n)
Auxiliary Space: O(1)

Recommended Problem
Delete a Node in Single Linked List
Linked List
Data Structures
Samsung
Solve Problem
Submission count: 1.1L
Delete the first node in a linked list where data == key:
Since every node of the linked list is dynamically allocated using malloc() in C, we need to call free() for freeing memory allocated for the node to be deleted.



C++
C
Java
Python3
# A complete working Python3 program to
# demonstrate deletion in singly
# linked list with class
 
# Node class
 
 
class Node:
 
    # Constructor to initialize the node object
    def __init__(self, data):
        self.data = data
        self.next = None
 
 
class LinkedList:
 
    # Function to initialize head
    def __init__(self):
        self.head = None
 
    # Function to insert a new node at the beginning
    def push(self, new_data):
        new_node = Node(new_data)
        new_node.next = self.head
        self.head = new_node
 
    # Given a reference to the head of a list and a key,
    # delete the first occurrence of key in linked list
    def deleteNode(self, key):
 
        # Store head node
        temp = self.head
 
        # If head node itself holds the key to be deleted
        if (temp is not None):
            if (temp.data == key):
                self.head = temp.next
                temp = None
                return
 
        # Search for the key to be deleted, keep track of the
        # previous node as we need to change 'prev.next'
        while(temp is not None):
            if temp.data == key:
                break
            prev = temp
            temp = temp.next
 
        # if key was not present in linked list
        if(temp == None):
            return
 
        # Unlink the node from linked list
        prev.next = temp.next
 
        temp = None
 
    # Utility function to print the linked LinkedList
 
    def printList(self):
        temp = self.head
        while(temp):
            print(" %d" % (temp.data)),
            temp = temp.next
 
 
# Driver program
llist = LinkedList()
llist.push(7)
llist.push(1)
llist.push(3)
llist.push(2)
 
print("Created Linked List: ")
llist.printList()
llist.deleteNode(1)
print("\nLinked List after Deletion of 1:")
llist.printList()
 
# This code is contributed by Nikhil Kumar Singh (nickzuck_007)
C#
Javascript
Output
Created Linked List: 
2 3 1 7 
Linked List after Deletion of 1: 
2 3 7 
 
Time Complexity: O(n)
Auxiliary Space: O(1)

Recursive Method to delete a node from linked list:
To delete a node of a linked list recursively we need to do the following steps:

We pass node* (node pointer) as a reference to the function (as in node* &head)
Now since the current node pointer is derived from the previous node’s next (which is passed by reference) so now if the value of the current node pointer is changed, the previous next node’s value also gets changed which is the required operation while deleting a node (i.e points previous node’s next to current node’s (containing key) next).
Find the node containing the given value.
Store this node to deallocate it later using the free() function.
Change this node pointer so that it points to its next and by performing this previous node’s next also gets properly linked.
Image showing deletion of a node.

Below is the implementation of the above approach.

C++
Python3
# Python program to delete a node in
# singly linked list recursively
 
class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
 
# Deletes the node containing 'data'
# part as val and alter the head of
# the linked list (recursive method)
def deleteNode(head, val):
    # Check if list is empty or we
    # reach at the end of the
    # list.
    if (head == None):
        print("Element not present in the list")
        return -1
    # If current node is the
    # node to be deleted
    if (head.data == val):
        # If it's start of the node head
        # node points to second node
        if head.next:
            head.data = head.next.data
            head.next = head.next.next
            return 1
        else: return 0
    if deleteNode(head.next, val) == 0:
        head.next = None
        return 1
 
# Utility function to add a
# node in the linked list
# Here we are passing head by
# reference thus no need to
# return it to the main function
def push(head, data):
    newNode = Node(data)
    newNode.next = head
    head = newNode
    return head
 
# Utility function to print
# the linked list (recursive
# method)
def printLL(head):
    if (head == None):
        return
    temp = head
    while temp:
        print(temp.data,end=' ')
        temp = temp.next
    print()
 
# Driver Code
 
# Starting with an empty linked list
head = None
# Adds new element at the
# beginning of the list
head = push(head, 10)
head = push(head, 12)
head = push(head, 14)
head = push(head, 15)
# original list
printLL(head)
# Call to delete function
deleteNode(head, 20)
# 20 is not present thus no change
# in the list
printLL(head)
deleteNode(head, 10)
printLL(head)
deleteNode(head, 14)
printLL(head)
Output
15 14 12 10 
Element not present in the list
15 14 12 10 
15 14 12 
15 12 
Time Complexity: O(n)
Auxiliary Space: O(n) (due to recursion call stack)

Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.





Like
606
Previous
Insertion in Linked List
Next
Applications, Advantages and Disadvantages of Linked List
Related Articles
1.
Deletion from a Circular Linked List
2.
Deletion in Doubly Circular Linked List
3.
Deletion at different positions in a Circular Linked List
4.
Skip List | Set 3 (Searching and Deletion)
5.
XOR Linked List - A Memory Efficient Doubly Linked List | Set 1
6.
Convert Singly Linked List to XOR Linked List
7.
Create new linked list from two given linked list with greater element at each node
8.
Generate Linked List consisting of maximum difference of squares of pairs of nodes from given Linked List
9.
XOR Linked List: Remove last node of the Linked List
10.
XOR Linked List - Reverse a Linked List in groups of given size
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
mlv
dkp1903
chpriyanshu786
Rajput-Ji
ac121102
lazer_baba
yoji
simmytarika5
todaysgaurav
kavania2002
23620uday2021
abhijeet19403
aditiyadav20102001
Shvms1
exertustfm
kashishkumar2
sayanc170
agfro1cac
factworx4i2
yashagarwal2852002
hardikkushwaha
Article Tags :
Linked List
Practice Tags :
Linked List
Improve Article
Report Issue