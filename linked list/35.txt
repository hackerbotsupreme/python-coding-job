Split a Circular Linked List into two halves

Difficulty Level : Easy
Last Updated : 10 Jan, 2023
Read
Discuss(80)
Courses
Practice
Video


                         Original Linked List  


                         Result Linked List 1  


                         Result Linked List 2  
If there are odd number of nodes, then first list should contain one extra.
 

Recommended Problem
Split a Circular Linked List into two halves
circular-linked-list
Linked List
+1 more
Yahoo
Solve Problem
Submission count: 42.9K
Thanks to Geek4u for suggesting the algorithm. 
1) Store the mid and last pointers of the circular linked list using tortoise and hare algorithm. 
2) Make the second half circular. 
3) Make the first half circular. 
4) Set head (or start) pointers of the two linked lists.
In the below implementation, if there are odd nodes in the given circular linked list then the first result list has 1 more node than the second result list. 
 

C++
C
Java
Python3
# Python program to split circular linked list into two halves
  
# A node structure
class Node:
      
    # Constructor to create a new node
    def __init__(self, data):
        self.data = data
        self.next = None
  
  
# Class to create a new  Circular Linked list
class CircularLinkedList:
      
    # Constructor to create a empty circular linked list
    def __init__(self):
        self.head = None
  
    # Function to insert a node at the beginning of a
    # circular linked list
    def push(self, data):
        ptr1 = Node(data)
        temp = self.head
          
        ptr1.next = self.head
  
        # If linked list is not None then set the next of
        # last node
        if self.head is not None:
            while(temp.next != self.head):
                temp = temp.next 
            temp.next = ptr1
  
        else:
            ptr1.next = ptr1 # For the first node
  
        self.head = ptr1 
  
    # Function to print nodes in a given circular linked list
    def printList(self):
        temp = self.head
        if self.head is not None:
            while(True):
                print ("%d" %(temp.data),end=' ')
                temp = temp.next
                if (temp == self.head):
                    break 
  
  
    # Function to split a list (starting with head) into 
    # two lists. head1 and head2 are the head nodes of the
    # two resultant linked lists
    def splitList(self, head1, head2):
        slow_ptr = self.head 
        fast_ptr = self.head
      
        if self.head is None:
            return 
          
        # If there are odd nodes in the circular list then
        # fast_ptr->next becomes head and for even nodes
        # fast_ptr->next->next becomes head
        while(fast_ptr.next != self.head and 
            fast_ptr.next.next != self.head ):
            fast_ptr = fast_ptr.next.next
            slow_ptr = slow_ptr.next
  
        # If there are even elements in list then
        # move fast_ptr
        if fast_ptr.next.next == self.head:
            fast_ptr = fast_ptr.next
  
        # Set the head pointer of first half
        head1.head = self.head
  
        # Set the head pointer of second half
        if self.head.next != self.head:
            head2.head = slow_ptr.next
  
        # Make second half circular
        fast_ptr.next = slow_ptr.next
      
        # Make first half circular
        slow_ptr.next = self.head
  
  
# Driver program to test above functions
  
# Initialize lists as empty
head = CircularLinkedList() 
head1 = CircularLinkedList()
head2 = CircularLinkedList()
  
head.push(12)
head.push(56)
head.push(2)
head.push(11)
  
print ("Original Circular Linked List")
head.printList()
  
# Split the list 
head.splitList(head1 , head2)
  
print ("\nFirst Circular Linked List")
head1.printList()
  
print ("\nSecond Circular Linked List")
head2.printList()
  
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)
C#
Javascript
Output: 
 

Original Circular Linked List
11 2 56 12 
First Circular Linked List
11 2 
Second Circular Linked List
56 12 
Time Complexity: O(n) As we are only moving once through the list



Auxiliary Space: O(1) As no extra space is used
Please write comments if you find any bug in above code/algorithm, or find other ways to solve the same problem
 





Like
131
Previous
Traversal of Circular Linked List
Next
Sorted insert for circular linked list
Related Articles
1.
Split a Circular Linked List into three halves of almost same size
2.
Convert singly linked list into circular linked list
3.
Circular Linked List Implementation of Circular Queue
4.
Check if a linked list is Circular Linked List
5.
Splitting starting N nodes into new Circular Linked List while preserving the old nodes
6.
C++ Program To Merge A Linked List Into Another Linked List At Alternate Positions
7.
C Program To Merge A Linked List Into Another Linked List At Alternate Positions
8.
Java Program To Merge A Linked List Into Another Linked List At Alternate Positions
9.
Python Program To Merge A Linked List Into Another Linked List At Alternate Positions
10.
Javascript Program To Merge A Linked List Into Another Linked List At Alternate Positions
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
shubham_singh
rathbhupendra
princiraj1992
aditosh007
avanitrachhadiya2155
amartyaghoshgfg
simmytarika5
abhijeet19403
Article Tags :
circular linked list
Yahoo
Linked List
Practice Tags :
Yahoo
circular linked list
Linked List
Improve Article
Report Issue