Write a function that counts the number of times a given int occurs in a Linked List

Difficulty Level : Basic
Last Updated : 05 Jan, 2023
Read
Discuss(70+)
Courses
Practice
Video
Given a singly linked list and a key, count the number of occurrences of the given key in the linked list. For example, if the given linked list is 1->2->1->2->1->3->1 and the given key is 1, then the output should be 4.

Recommended Problem
Occurence of an integer in a Linked List
Linked List
Data Structures
Solve Problem
Submission count: 49.7K
Method 1- Without Recursion 

Algorithm:  

Step 1: Start
Step 2: Create A Function Of A Linked List, Pass A Number 
        As Arguments And Provide The Count Of The Number To The Function.
Step 3: Initialize Count Equal To 0.
Step 4: Traverse In Linked List Until Equal Number Found.
Step 5: If Found A Number Equal To Update Count By 1.
Step 6: After Reaching The End Of The Linked List Return Count.
Step 7: Call The Function.
Step 8: Prints The Number Of Int Occurrences.
Step 9: Stop.
Implementation:  


C++
C
Java
Python3
# Python program to count the number of time a given
# int occurs in a linked list
 
# Node class
class Node:
 
    # Constructor to initialize the node object
    def __init__(self, data):
        self.data = data
        self.next = None
 
class LinkedList:
 
    # Function to initialize head
    def __init__(self):
        self.head = None
 
    # Counts the no . of occurrences of a node
    # (search_for) in a linked list (head)
    def count(self, search_for):
        current = self.head
        count = 0
        while(current is not None):
            if current.data == search_for:
                count += 1
            current = current.next
        return count
 
    # Function to insert a new node at the beginning
    def push(self, new_data):
        new_node = Node(new_data)
        new_node.next = self.head
        self.head = new_node
 
    # Utility function to print the LinkedList
    def printList(self):
        temp = self.head
        while(temp):
            print (temp.data)
            temp = temp.next
 
 
# Driver program
llist = LinkedList()
llist.push(1)
llist.push(3)
llist.push(1)
llist.push(2)
llist.push(1)
 
# Check for the count function
print ("count of 1 is % d" %(llist.count(1)))
 
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)
C#
Javascript
Output
count of 1 is 3
Time Complexity: O(n) 
Auxiliary Space: O(1)

Method 2- With Recursion 



Algorithm: 

Algorithm
count(head, key);
if head is NULL
return frequency
if(head->data==key)
increase frequency by 1
count(head->next, key)
Implementation:  

C++
C
Java
Python3
# Python program to count the number of
# time a given int occurs in a linked list
# Node class
class Node:
     
    # Constructor to initialize the node object
    def __init__(self, data):
        self.data = data
        self.next = None
 
class LinkedList:
     
    # Function to initialize head
    def __init__(self):
        self.head = None
        self.counter = 0
         
    # Counts the no . of occurrences of a node
    # (seach_for) in a linked list (head)
    def count(self, li, key):    
         
        # Base case
        if(not li):
            return self.counter
         
        # If key is present in
        # current node, return true
        if(li.data == key):
            self.counter = self.counter + 1
         
        # Recur for remaining list
        return self.count(li.next, key)
 
    # Function to insert a new node
    # at the beginning
    def push(self, new_data):
        new_node = Node(new_data)
        new_node.next = self.head
        self.head = new_node
 
    # Utility function to print the
    # linked LinkedList
    def printList(self):
        temp = self.head
        while(temp):
            print (temp.data)
            temp = temp.next
 
# Driver Code
llist = LinkedList()
llist.push(1)
llist.push(3)
llist.push(1)
llist.push(2)
llist.push(1)
 
# Check for the count function
print ("count of 1 is", llist.count(llist.head, 1))
 
# This code is contributed by
# Gaurav Kumar Raghav
C#
Javascript
Output
count of 1 is 3
Time complexity: O(n) where n is size of linked list
Auxiliary Space: O(n) for call stack since using recursion 

Below method can be used to avoid Global variable â€˜frequency'(counter in case of Python 3 Code). 

C++
Java
C#
Python3
def count(self, temp, key):
     
    # during the initial call, temp
    # has the value of head
     
    # Base case
    if temp is None:
        return 0
         
    # if a match is found, we
    # increment the counter
    if temp.data == key:
        return 1 + count(temp.next, key)
    return count(temp.next, key)
     
# to call count, use
# linked_list_name.count(head, key)
Javascript
The above method implements head recursion. Below given is the tail recursive implementation for the same. Thanks to Puneet Jain for suggesting this approach: 

int count(struct Node* head, int key)
{
    if(head == NULL)
        return 0;
        
   int frequency = count(head->next, key);
   if(head->data == key)
     return 1 + frequency;
    
    // else 
    return frequency;
}
Time Complexity : O(n) 
Auxiliary Space : O(n)

Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.





Like
108
Previous
Flatten a multilevel linked list
Next
Merge two sorted linked lists
Related Articles
1.
Write a function to get Nth node in a Linked List
2.
Write a function to delete a Linked List
3.
Create new linked list from two given linked list with greater element at each node
4.
Generate Linked List consisting of maximum difference of squares of pairs of nodes from given Linked List
5.
XOR Linked List - Reverse a Linked List in groups of given size
6.
XOR Linked List - Pairwise swap elements of a given linked list
7.
How to write C functions that modify head pointer of a Linked List?
8.
Write a function to get the intersection point of two Linked Lists
9.
XOR Linked List - A Memory Efficient Doubly Linked List | Set 1
10.
Convert Singly Linked List to XOR Linked List
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Basic
Easy
Normal
Medium
Hard
Expert
Improved By :
Puneet Jain 1
Shreyash Sharma 3
SivaPrakashReddyKomma
andrew1234
gaurav_kumar_raghav
dkp1903
rathbhupendra
rachana soma
princiraj1992
SHUBHAMSINGH10
nidhi_biet
GauravRajput1
todaysgaurav
anikaseth98
divyeshrabadiya07
khushboogoyal499
amartyaghoshgfg
simranarora5sos
reshmapatil2772
polymatir3j
hardikkoriintern
adityakumar129
mitalibhola94
ruhelaa48
vforviksvy5
akshaysingh98088
Article Tags :
Linked Lists
Linked List
Practice Tags :
Linked List
Improve Article
Report Issue