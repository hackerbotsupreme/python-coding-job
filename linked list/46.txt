Write a function to get the intersection point of two Linked Lists

Difficulty Level : Medium
Last Updated : 10 Jan, 2023
Read
Discuss(470+)
Courses
Practice
Video
There are two singly linked lists in a system. By some programming error, the end node of one of the linked lists got linked to the second list, forming an inverted Y-shaped list. Write a program to get the point where two linked lists merge. 

Y ShapedLinked List

The above diagram shows an example with two linked lists having 15 as intersection points.

Recommended Problem
Intersection Point in Y Shapped Linked Lists
Linked List
Data Structures
VMWare
Flipkart
+12 more
Solve Problem
Submission count: 2L
Method 1(Simply use two loops):
Use 2 nested for loops. The outer loop will be for each node of the 1st list and the inner loop will be for the 2nd list. In the inner loop, check if any of the nodes of the 2nd list is the same as the current node of the first linked list. The time complexity of this method will be O(M * N) where m and n are the numbers of nodes in two lists.

Below is the code for the above approach:

C++
C
Java
Python3
# Python program to get intersection point of two linked list
  
# Link list node
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
  
# function to get the intersection point of two linked lists head1 and head
def getIntersectionNode(head1, head2):
    while head2:
        temp = head1
        while temp:
            # if both Nodes are same
            if temp == head2:
                return head2
            temp = temp.next
        head2 = head2.next
    # intersection is not present between the lists
    return None
  
  
# Driver Code
if __name__ == '__main__':
    '''
    Create two linked lists
  
    1st 3->6->9->15->30
    2nd 10->15->30
  
    15 is the intersection point 
    '''
  
    newNode = Node(10)
    head1 = newNode
    newNode = Node(3)
    head2 = newNode
    newNode = Node(6)
    head2.next = newNode
    newNode = Node(9)
    head2.next.next = newNode
    newNode = Node(15)
    head1.next = newNode
    head2.next.next.next = newNode
    newNode = Node(30)
    head1.next.next = newNode
  
    intersectionPoint = getIntersectionNode(head1, head2)
  
    if not intersectionPoint:
        print(" No Intersection Point ")
    else:
        print("Intersection Point:", intersectionPoint.data)
  
# This code is contributed by Tapesh(tapeshdua420)
C#
Javascript
Output
Intersection Point: 15
Time Complexity: O(m*n), where m and n are number of nodes in two linked list.
Auxiliary Space: O(1), Constant Space is used.

Method 2 (Mark Visited Nodes):
This solution requires modifications to the basic linked list data structure. Have a visited flag with each node. Traverse the first linked list and keep marking visited nodes. Now traverse the second linked list, If you see a visited node again then there is an intersection point, return the intersecting node. This solution works in O(m+n) but requires additional information with each node. A variation of this solution that doesn’t require modification to the basic data structure can be implemented using a hash. Traverse the first linked list and store the addresses of visited nodes in a hash. Now traverse the second linked list and if you see an address that already exists in the hash then return the intersecting node.

Method 3(Using the difference in node counts) 

Get the count of the nodes in the first list, let the count be c1.
Get the count of the nodes in the second list, let the count be c2.
Get the difference of counts d = abs(c1 – c2)
Now traverse the bigger list from the first node to d nodes so that from here onwards both the lists have an equal no of nodes
Then we can traverse both lists in parallel till we come across a common node. (Note that getting a common node is done by comparing the address of the nodes)
Below image is a dry run of the above approach:



Below is the implementation of the above approach :

C++
C
Java
Python3
# defining a node for LinkedList
class Node:
  def __init__(self,data):
    self.data=data
    self.next=None
      
  
  
def getIntersectionNode(head1,head2):
    
  #finding the total number of elements in head1 LinkedList
    c1=getCount(head1)
    
  #finding the total number of elements in head2 LinkedList
    c2=getCount(head2)
    
  #Traverse the bigger node by 'd' so that from that node onwards, both LinkedList
  #would be having same number of nodes and we can traverse them together.
    if c1 > c2:
        d=c1-c2
        return _getIntersectionNode(d,head1,head2)
    else:
        d=c2-c1
        return _getIntersectionNode(d,head2,head1) 
    
    
def _getIntersectionNode(d,head1,head2):
      
      
    current1=head1
    current2=head2
      
      
    for i in range(d):
        if current1 is None:
            return -1
        current1=current1.next
      
    while current1 is not None and current2 is not None:
      
    # Instead of values, we need to check if there addresses are same
    # because there can be a case where value is same but that value is
    #not an intersecting point.
        if current1 is current2:
            return current1.data # or current2.data ( the value would be same)
      
        current1=current1.next
        current2=current2.next
    
  # Incase, we are not able to find our intersecting point.
    return -1
    
#Function to get the count of a LinkedList
def getCount(node):
    cur=node
    count=0
    while cur is not None:
        count+=1
        cur=cur.next
    return count
      
  
if __name__ == '__main__':
  # Creating two LinkedList
  # 1st one: 3->6->9->15->30
  # 2nd one: 10->15->30
  # We can see that 15 would be our intersection point
    
  # Defining the common node
    
  common=Node(15)
    
  #Defining first LinkedList
    
  head1=Node(3)
  head1.next=Node(6)
  head1.next.next=Node(9)
  head1.next.next.next=common
  head1.next.next.next.next=Node(30)
    
  # Defining second LinkedList
    
  head2=Node(10)
  head2.next=common
  head2.next.next=Node(30)
    
  print("The node of intersection is ",getIntersectionNode(head1,head2))
    
  # The code is contributed by Ansh Gupta.
C#
Javascript
Output
The node of intersection is 15
Time Complexity: O(m+n) 
Auxiliary Space: O(1)

Method 4(Make a circle in the first list) 
Thanks to Saravanan Man for providing the below solution. 
1. Traverse the first linked list(count the elements) and make a circular linked list. (Remember the last node so that we can break the circle later on). 
2. Now view the problem as finding the loop in the second linked list. So the problem is solved. 
3. Since we already know the length of the loop(size of the first linked list) we can traverse those many numbers of nodes in the second list, and then start another pointer from the beginning of the second list. we have to traverse until they are equal, and that is the required intersection point. 
4. remove the circle from the linked list. 

Time Complexity: O(m+n) 
Auxiliary Space: O(1)

Method 5 (Reverse the first list and make equations) 
Thanks to Saravanan Mani for providing this method.  

1) Let X be the length of the first linked list until intersection point.
   Let Y be the length of the second linked list until the intersection point.
   Let Z be the length of the linked list from the intersection point to End of
   the linked list including the intersection node.
   We Have
           X + Z = C1;
           Y + Z = C2;
2) Reverse first linked list.
3) Traverse Second linked list. Let C3 be the length of second list - 1. 
     Now we have
        X + Y = C3
     We have 3 linear equations. By solving them, we get
       X = (C1 + C3 – C2)/2;
       Y = (C2 + C3 – C1)/2;
       Z = (C1 + C2 – C3)/2;
      WE GOT THE INTERSECTION POINT.
4)  Reverse first linked list.
Advantage: No Comparison of pointers. 
Disadvantage: Modifying linked list(Reversing list). 
Time complexity: O(m+n) 
Auxiliary Space: O(1)

Method 6 (Traverse both lists and compare addresses of last nodes) This method is only to detect if there is an intersection point or not. (Thanks to NeoTheSaviour for suggesting this)  

1) Traverse the list 1, store the last node address
2) Traverse the list 2, store the last node address.
3) If nodes stored in 1 and 2 are same then they are intersecting.
Time Complexity: O(m+n)
Auxiliary Space: O(1)

Method 7 (Use Hashing) 
Basically, we need to find a common node of two linked lists. So we hash all nodes of the first list and then check the second list. 
1) Create an empty hash set. 
2) Traverse the first linked list and insert all nodes’ addresses in the hash set. 
3) Traverse the second list. For every node check if it is present in the hash set. If we find a node in the hash set, return the node.

C++
Java
Python3
# Python program to get intersection 
# point of two linked list
class Node :
    def __init__(self, d):
        self.data = d;
        self.next = None;
  
# Function to print the list
def Print(n):
    cur = n;
    while (cur != None) :
        print(cur.data, end=" ");
        cur = cur.next;
    print("");
  
# Function to find the intersection of two node
def MegeNode(n1, n2):
      
    # Define hashset
    hs = set();
  
    while (n1 != None):
        hs.add(n1);
        n1 = n1.next;
    while (n2 != None):
        if (n2 in hs):
            return n2;
        n2 = n2.next;
      
    return None;
  
  
# Driver code
  
# list 1
n1 = Node(1);
n1.next = Node(2);
n1.next.next = Node(3);
n1.next.next.next = Node(4);
n1.next.next.next.next = Node(5);
n1.next.next.next.next.next = Node(6);
n1.next.next.next.next.next.next = Node(7);
  
# list 2
n2 = Node(10);
n2.next = Node(9);
n2.next.next = Node(8);
n2.next.next.next = n1.next.next.next;
  
Print(n1);
Print(n2);
  
print(MegeNode(n1, n2).data);
  
# This code is contributed by _saurabh_jaiswal
C#
Javascript
Output
1 2 3 4 5 6 7 
10 9 8 4 5 6 7 
4
The time complexity of this solution is O(n) where n is the length of the longer list. This is because we need to traverse both of the linked lists in order to find the intersection point.  And space complexity is O(n) , because we are using unordered set.

Method 8( 2-pointer technique ):

Using Two pointers : 

Initialize two pointers ptr1 and ptr2  at head1 and  head2.
Traverse through the lists, one node at a time.
When ptr1 reaches the end of a list, then redirect it to head2.
similarly, when ptr2 reaches the end of a list, redirect it to the head1.
Once both of them go through reassigning, they will be equidistant from 
 the collision point
If at any node ptr1 meets ptr2, then it is the intersection node.
After the second iteration if there is no intersection node it returns NULL.
C++
C
Java
Python3
# Python3 program to print intersection of lists
  
#  Link list node 
class Node:
    def __init__(self, data = 0, next = None):
        self.data = data
        self.next = next
  
# A utility function to return  intersection node
def intersectPoint(head1, head2):
  
    # Maintaining two pointers ptr1 and ptr2
    # at the head of A and B,
    ptr1 = head1
    ptr2 = head2
  
    # If any one of head is None i.e
    # no Intersection Point
    if (ptr1 == None or ptr2 == None):
        return None
  
    # Traverse through the lists until they
    # reach Intersection node
    while (ptr1 != ptr2):
  
        ptr1 = ptr1.next
        ptr2 = ptr2.next
  
      # If at any node ptr1 meets ptr2, then it is
      # intersection node.Return intersection node.
        if (ptr1 == ptr2):
            return ptr1
  
        # Once both of them go through reassigning,
        # they will be equidistant from the collision point.
  
        # When ptr1 reaches the end of a list, then
        # reassign it to the head2.
        if (ptr1 == None):
            ptr1 = head2
  
        # When ptr2 reaches the end of a list, then
        # redirect it to the head1.
        if (ptr2 == None):
            ptr2 = head1
  
    return ptr1
  
# Function to print intersection nodes
# in  a given linked list
def Print(node):
  
    if (node == None):
        print("None")
    while (node.next != None):
        print(node.data,end="->")
        node = node.next
    print(node.data)
  
# Driver code
  
# Create two linked lists
  
# 1st Linked list is 3->6->9->15->30
# 2nd Linked list is 10->15->30
  
# 15 30 are elements in the intersection list
  
head1 = Node()
head1.data = 10
head2 = Node()
head2.data = 3
newNode = Node()
newNode.data = 6
head2.next = newNode
newNode = Node()
newNode.data = 9
head2.next.next = newNode
newNode = Node()
newNode.data = 15
head1.next = newNode
head2.next.next.next = newNode
newNode = Node()
newNode.data = 30
head1.next.next = newNode
head1.next.next.next = None
intersect_node = None
  
  # Find the intersection node of two linked lists
intersect_node = intersectPoint(head1, head2)
  
print("INTERSEPOINT LIST :",end="")
  
Print(intersect_node)
  
# This code is contributed by shinjanpatra
C#
Javascript
Output
INTERSEPOINT LIST :15->30
Time complexity : O( m + n ) 
Auxiliary Space:  O(1)

Method 9 : Using the 2-stack approach :

Create 2 stacks.
Iterate both the lists till the end and keep on adding the nodes of the list to the respective stack.
If the last nodes are not equal. return saying no intersection.
Iteratively check the stack tops. If equal, pop or else return the current node.
C++
Java
Python3
# Python program to print intersection of lists
  
# Link list node
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
  
# A utility function to return  intersection node
def intersectPoint(headA, headB):
    stackA = []
    stackB = []
    intersectNode = None
  
    while headB != None:
        stackB.append(headB)
        headB = headB.next
  
    while headA != None:
        stackA.append(headA)
        headA = headA.next
  
    if not stackA[-1].data == stackB[-1].data:
        return None
  
    while stackA and stackB and stackA[-1].data == stackB[-1].data:
        intersectNode = stackA[-1]
        stackA.pop()
        stackB.pop()
  
    return intersectNode
  
  
# Driver code
if __name__ == '__main__':
    # Create two linked lists
  
    # 1st Linked list is 3.6.9.15.30
    # 2nd Linked list is 10.15.30
  
    # 15 30 are elements in the intersection list
  
    head1 = Node(10)
    head2 = Node(3)
    newNode = Node(6)
    head2.next = newNode
    newNode = Node(9)
    head2.next.next = newNode
    newNode = Node(15)
    head1.next = newNode
    head2.next.next.next = newNode
    newNode = Node(30)
    head1.next.next = newNode
    head1.next.next.next = None
  
    # Find the intersection node of two linked lists
    intersect_node = intersectPoint(head1, head2)
    print("INTERSECTION POINT:", intersect_node.data)
  
# This code is contributed by Tapesh(tapeshdua420)
C#
Javascript
Output
INTERSECTION POINT :15
Time Complexity: O(M + N), where N and M are the length of the two lists.
Auxiliary Space: O(M + N)

Please write comments if you find any bug in the above algorithm or a better way to solve the same problem.



Like
Previous
Find length of loop/cycle in given Linked List
Next
Intersection of two Sorted Linked Lists
Related Articles
1.
Find intersection point of two Linked Lists without finding the length
2.
Javascript Program For Finding Intersection Point Of Two Linked Lists
3.
Java Program For Finding Intersection Point Of Two Linked Lists
4.
Python Program For Finding Intersection Point Of Two Linked Lists
5.
C++ Program For Finding Intersection Point Of Two Linked Lists
6.
C Program For Finding Intersection Point Of Two Linked Lists
7.
C# Program For Finding Intersection Point Of Two Linked Lists
8.
Get the Intersection point of two Linked List by counting nodes
9.
Intersection point of two Linked List by marking visited nodes
10.
Union and Intersection of two Linked Lists
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
andrew1234
imSaiful
rathbhupendra
29AjayKumar
p_unit
bolliranadheer
avanitrachhadiya2155
adityakumar466ak
rag2127
ansh422
umadevi9616
_saurabh_jaiswal
GauravRajput1
namburirangasai
upendra200223
shinjanpatra
adityakumar129
tapeshdua420
teachprograming
lokeshmvs21
isha307
nitishchitta
adityamaharshi21
vforviksvy5
surajrasr7277
Article Tags :
Accolite
Amazon
D-E-Shaw
FactSet
Goldman Sachs
MakeMyTrip
MAQ Software
Microsoft
Qualcomm
Snapdeal
Visa
Zopper
Linked List
Practice Tags :
Accolite
Amazon
D-E-Shaw
FactSet
Goldman Sachs
MakeMyTrip
MAQ Software
Microsoft
Qualcomm
Snapdeal
Visa
Zopper
Linked List
Report Issue