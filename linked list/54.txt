Linked List representation of Disjoint Set Data Structures

Difficulty Level : Medium
Last Updated : 11 Jan, 2023
Read
Discuss
Courses
Practice
Video
Prerequisites : Union Find (or Disjoint Set), Disjoint Set Data Structures (Java Implementation) 

A disjoint-set data structure maintains a collection S = {S1, S2,…., Sk} of disjoint dynamic sets. We identify each set by a representative, which is some member of the set. In some applications, it doesn’t matter which member is used as the representative; we care only that if we ask for the representative of a dynamic set twice without modifying the set between the requests, we get the same answer both times. Other applications may require a prespecified rule for choosing the representative, such as choosing the smallest member in the set. 

Example: Determining the connected components of an undirected graph. Below figure, shows a graph with four connected components. 

Fig (a)

 Solution : One procedure X that follows uses the disjoint-set operations to compute the connected components of a graph. Once X has pre-processed the graph, the procedure Y answers queries about whether two vertices are in the same connected component. Below figure shows the collection of disjoint sets after processing each edge. 

Fig (b)

 See here as the above example was discussed earlier. 
Fig 2



 Figure 

(a) Linked-list representations of two sets. Set S1 contains members d, f, and g, with representative f, and set S2 contains members b, c, e, and h, with representative c. 
Each object in the list contains a set member, a pointer to the next object in the list, and a pointer back to the set object. Each set object has pointers head and tail to the first and last objects, respectively. 

b) The result of UNION(e, g), which appends the linked list containing e to the linked list containing g. The representative of the resulting set is f . The set object for e’s list, S2, is destroyed. 
Above three figures are taken from the Cormen(CLRS) book. Above Figure shows a simple way to implement a disjoint-set data structure: each set is represented by its own linked list. The object for each set has attributes head, pointing to the 1st object in the list, and tail, pointing to the last object. 
Each object in the list contains a set member, a pointer to the next object in the list, and a pointer back to the set object. Within each linked list, the objects may appear in any order. The representative is the set member in the 1st object in the list. To carry out MAKE-SET (x), we create a new linked list whose only object is x. For FIND-SET(x), we just follow the pointer from x back to its set object and then return the member in the object that head points to. For example, in the Figure, the call FIND-SET(g) would return f. 

Algorithm: 

Letting x denote an object, we wish to support the following operations: 

MAKE-SET(x) creates a new set whose only member (and thus representative) is x. Since the sets are disjoint, we require that x not already be in some other set. 
UNION (x, y) unites the dynamic sets that contain x and y, say Sx and Sy, into a new set that is the union of these two sets. We assume that the two sets are disjoint prior to the operation. The representative of the resulting set is any member of Sx U Sy, although many implementations of UNION specifically choose the representative of either Sx or Sy as the new representative. Since we require the sets in the collection to be disjoint, conceptually we destroy sets Sx and Sy, removing them from the collection S. In practice, we often absorb the elements of one of the sets into the other set. 
FIND-SET(x) returns a pointer to the representative of the (unique) set containing x. 
Based on the above explanation, below are implementations: 

CPP
Python3
from collections import defaultdict
 
class Node:
    def __init__(self, val, item_ptr):
        self.val = val
        self.item_ptr = item_ptr
        self.next = None
 
class Item:
    def __init__(self, hd, tl):
        self.hd = hd
        self.tl = tl
 
class ListSet:
    def __init__(self):
        self.node_address = defaultdict(lambda: None)
 
    def makeset(self, a):
        new_set = Item(Node(a, None), None)
        new_set.hd.item_ptr = new_set
        new_set.tl = new_set.hd
        self.node_address[a] = new_set.hd
 
    def find(self, key):
        node = self.node_address[key]
        return node.item_ptr
 
    def union(self, i1, i2):
        cur = i2.hd
        while cur:
            cur.item_ptr = i1
            cur = cur.next
        i1.tl.next = i2.hd
        i1.tl = i2.tl
        del i2
 
def main():
    a = ListSet()
    a.makeset(13)
    a.makeset(25)
    a.makeset(45)
    a.makeset(65)
 
    print(f"find(13): {a.find(13)}")
    print(f"find(25): {a.find(25)}")
    print(f"find(65): {a.find(65)}")
    print(f"find(45): {a.find(45)}")
    print()
    print("Union(find(65), find(45))")
    a.union(a.find(65), a.find(45))
    print(f"find(65): {a.find(65)}")
    print(f"find(45): {a.find(45)}")
 
if __name__ == "__main__":
    main()
Output
find(13): 0xfed070
find(25): 0xfed0d0
find(65): 0xfed190
find(45): 0xfed130

Union(find(65), find(45)) 
find(65]): 0xfed190
find(45]): 0xfed190
Note: The node address will change every time, we run the program. Time complexities of MAKE-SET and FIND-SET are O(1). Time complexity for UNION is O(n). 

This article is contributed by Yash Sangai. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
6
Previous
MakeMyTrip Interview Experience | Set 14 (For Senior Android developer)
Next
Paytm Interview Experience | Set 14 (For Senior android Developer)
Related Articles
1.
Swap the vowels in the linked list representation of a string
2.
XOR Linked List - A Memory Efficient Doubly Linked List | Set 1
3.
XOR Linked List – A Memory Efficient Doubly Linked List | Set 2
4.
Convert Singly Linked List to XOR Linked List
5.
Create new linked list from two given linked list with greater element at each node
6.
Generate Linked List consisting of maximum difference of squares of pairs of nodes from given Linked List
7.
XOR Linked List: Remove last node of the Linked List
8.
XOR Linked List - Reverse a Linked List in groups of given size
9.
XOR linked list: Reverse last K nodes of a Linked List
10.
C++ Program To Merge A Linked List Into Another Linked List At Alternate Positions
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
ShayekhBinIslam
surinderdawra388
hardikkoriintern
vikramshirsath177
Article Tags :
Linked List
Practice Tags :
Linked List