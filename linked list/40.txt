Find pairs with given sum in doubly linked list

Difficulty Level : Easy
Last Updated : 10 Jan, 2023
Read
Discuss(20+)
Courses
Practice
Video
Given a sorted doubly linked list of positive distinct elements, the task is to find pairs in a doubly-linked list whose sum is equal to given value x, without using any extra space? 

Example:  

Input : head : 1 <-> 2 <-> 4 <-> 5 <-> 6 <-> 8 <-> 9
        x = 7
Output: (6, 1), (5,2)
The expected time complexity is O(n) and auxiliary space is O(1).

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
A simple approach for this problem is to one by one pick each node and find a second element whose sum is equal to x in the remaining list by traversing in the forward direction. The time complexity for this problem will be O(n^2), n is the total number of nodes in the doubly linked list.

An efficient solution for this problem is the same as this article. Here is the algorithm :  

Initialize two pointer variables to find the candidate elements in the sorted doubly linked list. Initialize first with the start of the doubly linked list i.e; first=head and initialize second with the last node of the doubly linked list i.e; second=last_node.
We initialize first and second pointers as first and last nodes. Here we don’t have random access, so to find the second pointer, we traverse the list to initialize the second.
If current sum of first and second is less than x, then we move first in forward direction. If current sum of first and second element is greater than x, then we move second in backward direction.
Loop termination conditions are also different from arrays. The loop terminates when two pointers cross each other (second->next = first), or they become the same (first == second).
The case when no pairs are present will be handled by the condition “first==second”
Implementation:

C++
Java
Python3
# Python3 program to find a pair with
# given sum x.
  
# Structure of node of doubly linked list
class Node:
      
    def __init__(self, x):
          
        self.data = x
        self.next = None
        self.prev = None
  
# Function to find pair whose sum 
# equal to given value x.
def pairSum(head, x):
      
    # Set two pointers, first to the 
    # beginning of DLL and second to
    # the end of DLL.
    first = head
    second = head
      
    while (second.next != None):
        second = second.next
  
    # To track if we find a pair or not
    found = False
  
    # The loop terminates when they
    # cross each other (second.next == 
    # first), or they become same 
    # (first == second)
    while (first != second and second.next != first):
              
        # Pair found
        if ((first.data + second.data) == x):
            found = True
            print("(", first.data, ",",
                       second.data, ")")
              
            # Move first in forward direction
            first = first.next
              
            # Move second in backward direction
            second = second.prev
        else:
            if ((first.data + second.data) < x):
                first = first.next
            else:
                second = second.prev
  
    # If pair is not present
    if (found == False):
        print("No pair found")
  
# A utility function to insert a new node
# at the beginning of doubly linked list
def insert(head, data):
      
    temp = Node(data)
      
    if not head:
        head = temp
    else:
        temp.next = head
        head.prev = temp
        head = temp
          
    return head
  
# Driver code
if __name__ == '__main__':
      
    head = None
    head = insert(head, 9)
    head = insert(head, 8)
    head = insert(head, 6)
    head = insert(head, 5)
    head = insert(head, 4)
    head = insert(head, 2)
    head = insert(head, 1)
    x = 7
  
    pairSum(head, x)
  
# This code is contributed by mohit kumar 29
C#
Javascript
Output


(1, 6)
(2, 5)
Time complexity : O(n) 
Auxiliary space : O(1)

If linked list is not sorted, then we can sort the list as a first step. But in that case overall time complexity would become O(n Log n). We can use Hashing in such cases if extra space is not a constraint. The hashing based solution is same as method 2 here.

This article is contributed by Shashank Mishra ( Gullu ). If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 





Like
101
Next
Insert value in sorted way in a sorted doubly linked list
Related Articles
1.
Find pairs with given product in a sorted Doubly Linked List
2.
XOR Linked List - A Memory Efficient Doubly Linked List | Set 1
3.
XOR Linked List – A Memory Efficient Doubly Linked List | Set 2
4.
Difference between Singly linked list and Doubly linked list
5.
Find quadruplets with given sum in a Doubly Linked List
6.
Construct a Doubly linked linked list from 2D Matrix
7.
Find triplet sum closest to X in a sorted Doubly Linked List (DLL)
8.
Sum of all nodes in a doubly linked list divisible by a given number K
9.
Count triplets in a sorted doubly linked list whose sum is equal to a given value x
10.
Generate Linked List consisting of maximum difference of squares of pairs of nodes from given Linked List
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
andrew1234
29AjayKumar
abhishek gupta 47
tapassaha699
mohit kumar 29
kathanvakharia
avanitrachhadiya2155
hardikkoriintern
vforviksvy5
Article Tags :
doubly linked list
Linked List
Practice Tags :
Linked List