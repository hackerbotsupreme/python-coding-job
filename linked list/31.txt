Find length of loop/cycle in given Linked List

Difficulty Level : Easy
Last Updated : 25 Oct, 2022
Read
Discuss(30+)
Courses
Practice
Video
Given the head of a linked list. The task is to find if a loop exists in the linked list if yes then return the length of the loop in the linked list else return 0.

Examples:

Input: linked list = 
Output: 4
Explanation: The loop is present in the below-linked list and the length of the loop is 4. 

Input: linked list = 4 -> 3 -> 7 -> 9 -> 2
Output: 0


Recommended Problem
Find length of Loop
Linked List
Data Structures
Amazon
Adobe
+1 more
Solve Problem
Submission count: 94.4K
Approach: Below is the idea to solve the problem:

Floyd’s Cycle detection algorithm terminates when fast and slow pointers meet at a common point. It is also known that this common point is one of the loop nodes. Store the address of this common point in a pointer variable ptr. Then initialize a counter with 1 and start from the common point and keeps on visiting the next node and increasing the counter till the common pointer is reached again. At that point, the value of the counter will be equal to the length of the loop.

Follow the below steps to implement the idea:



Find the common point in the loop by using the Floyd’s Cycle detection algorithm
Store the pointer in a temporary variable and keep a count = 0
Traverse the linked list until the same node is reached again and increase the count while moving to next node.
Print the count as length of loop
Below is the implementation of the above approach:

C++
C
Java
Python3
# Python 3 program to find the number
# of nodes in loop in a linked list
# if loop is present
 
# Python Code to detect a loop and
# find the length of the loop
# Node defining class
 
 
class Node:
 
    # Function to make a node
    def __init__(self, val):
        self.val = val
        self.next = None
 
# Linked List defining and loop
# length finding class
 
 
class LinkedList:
 
    # Function to initialize the
    # head of the linked list
    def __init__(self):
        self.head = None
 
    # Function to insert a new
    # node at the end
    def AddNode(self, val):
        if self.head is None:
            self.head = Node(val)
        else:
            curr = self.head
            while(curr.next):
                curr = curr.next
            curr.next = Node(val)
 
    # Function to create a loop in the
    # Linked List. This function creates
    # a loop by connecting the last node
    # to n^th node of the linked list,
    # (counting first node as 1)
    def CreateLoop(self, n):
 
        # LoopNode is the connecting node to
        # the last node of linked list
        LoopNode = self.head
        for _ in range(1, n):
            LoopNode = LoopNode.next
 
        # end is the last node of the Linked List
        end = self.head
        while(end.next):
            end = end.next
 
        # Creating the loop
        end.next = LoopNode
 
    # Function to detect the loop and return
    # the length of the loop if the returned
    # value is zero, that means that either
    # the linked list is empty or the linked
    # list doesn't have any loop
    def detectLoop(self):
 
        # if linked list is empty then there
        # is no loop, so return 0
        if self.head is None:
            return 0
 
        # Using Floyd’s Cycle-Finding
        # Algorithm/ Slow-Fast Pointer Method
        slow = self.head
        fast = self.head
        flag = 0  # to show that both slow and fast
        # are at start of the Linked List
        while(slow and slow.next and fast and
              fast.next and fast.next.next):
            if slow == fast and flag != 0:
 
                # Means loop is confirmed in the
                # Linked List. Now slow and fast
                # are both at the same node which
                # is part of the loop
                count = 1
                slow = slow.next
                while(slow != fast):
                    slow = slow.next
                    count += 1
                return count
 
            slow = slow.next
            fast = fast.next.next
            flag = 1
        return 0  # No loop
 
 
# Setting up the code
# Making a Linked List and adding the nodes
myLL = LinkedList()
myLL.AddNode(1)
myLL.AddNode(2)
myLL.AddNode(3)
myLL.AddNode(4)
myLL.AddNode(5)
 
# Creating a loop in the linked List
# Loop is created by connecting the
# last node of linked list to n^th node
# 1<= n <= len(LinkedList)
myLL.CreateLoop(2)
 
# Checking for Loop in the Linked List
# and printing the length of the loop
loopLength = myLL.detectLoop()
if myLL.head is None:
    print("Linked list is empty")
else:
    print(str(loopLength))
 
# This code is contributed by _Ashutosh
C#
Javascript
Output
4
Time complexity: O(N), Only one traversal of the linked list is needed.
Auxiliary Space: O(1), As no extra space is required.

Related Articles:  

Detect loop in a linked list
Detect and Remove Loop in a Linked List
This article is contributed by Shubham Gupta. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
 





Like
127
Previous
Detect loop in a linked list
Next
Write a function to get the intersection point of two Linked Lists
Related Articles
1.
Create new linked list from two given linked list with greater element at each node
2.
Generate Linked List consisting of maximum difference of squares of pairs of nodes from given Linked List
3.
XOR Linked List - Reverse a Linked List in groups of given size
4.
XOR Linked List - Pairwise swap elements of a given linked list
5.
C++ Program For Finding The Length Of Longest Palindrome List In A Linked List Using O(1) Extra Space
6.
Java Program For Finding The Length Of Longest Palindrome List In A Linked List Using O(1) Extra Space
7.
Python Program For Finding The Length Of Longest Palindrome List In A Linked List Using O(1) Extra Space
8.
Javascript Program For Finding The Length Of Longest Palindrome List In A Linked List Using O(1) Extra Space
9.
Length of longest palindrome list in a linked list using O(1) extra space
10.
XOR Linked List - A Memory Efficient Doubly Linked List | Set 1
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
subtleseeker
inderDuMCA
PriyaBadchariya
Leonardo_Da_Vinci
Rajput-Ji
SHUBHAMSINGH10
andrew1234
GauravRajput1
sweetyty
simranarora5sos
hardikkoriintern
heetankola2019
aashutoshparoha
sayanc170
Article Tags :
Adobe
Qualcomm
Linked List
Practice Tags :
Adobe
Qualcomm
Linked List