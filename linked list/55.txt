Sublist Search (Search a linked list in another list)

Difficulty Level : Easy
Last Updated : 10 Jan, 2023
Read
Discuss(30)
Courses
Practice
Video
Given two linked lists, the task is to check whether the first list is present in 2nd list or not. 

Examples:

Input: list1 =  10->20
            list2  = 5->10->20
Output : LIST FOUND

Input: list1 =  1->2->3->4
            list2  = 1->2->1->2->3->4
Output: LIST FOUND


Input: list1 =  1->2->3->4
             list2  = 1->2->2->1->2->3
Output: LIST NOT FOUND

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Algorithm: 

Take first node of second list. 
Start matching the first list from this first node. 
If whole lists match return true. 
Else break and take first list to the first node again. 
And take second list to its second node. 
Repeat these steps until any of linked lists becomes empty. 
If first list becomes empty then list found else not.
Below is the implementation.



C++
Java
Python3
# Python3 program to find a list in second list 
class Node:
    def __init__(self, value = 0):
          
        self.value = value
        self.next = None
  
# Returns true if first list is 
# present in second list 
def findList(first, second):
      
    # If both linked lists are empty/None,
    # return True
    if not first and not second:
        return True
  
    # If ONLY one of them is empty,
    # return False
    if not first or not second:
        return False
  
    ptr1 = first
    ptr2 = second
  
    # Traverse the second LL by 
    # picking nodes one by one
    while ptr2:
  
        # Initialize 'ptr2' with current
        # node of 'second'
        ptr2 = second
  
        # Start matching first LL 
        # with second LL
        while ptr1:
  
            # If second LL become empty and 
            # first not, return False,
            # since first LL has not been 
            # traversed completely
            if not ptr2:
                return False
  
            # If value of both nodes from both
            # LLs are equal, increment pointers
            # for both LLs so that next value 
            # can be matched
            else if ptr1.value == ptr2.value:
                ptr1 = ptr1.next
                ptr2 = ptr2.next
  
            # If a single mismatch is found
            # OR ptr1 is None/empty,break out
            # of the while loop and do some checks
            else:
                break
  
        # check 1 :
        # If 'ptr1' is None/empty,that means
        # the 'first LL' has been completely
        # traversed and matched so return True
        if not ptr1:
            return True
  
        # If check 1 fails, that means, some 
        # items for 'first' LL are still yet
        # to be matched, so start again by 
        # bringing back the 'ptr1' to point
        # to 1st node of 'first' LL
        ptr1 = first
          
        # And increment second node element to next
        second = second.next
          
    return False
  
# Driver Code
  
# Let us create two linked lists to
# test the above functions.
# Created lists would be be
# node_a: 1->2->3->4
# node_b: 1->2->1->2->3->4
node_a = Node(1)
node_a.next = Node(2)
node_a.next.next = Node(3)
node_a.next.next.next = Node(4)
  
node_b = Node(1)
node_b.next = Node(2)
node_b.next.next = Node(1)
node_b.next.next.next = Node(2)
node_b.next.next.next.next = Node(3)
node_b.next.next.next.next.next = Node(4)
  
if findList(node_a, node_b):
    print("LIST FOUND")
else:
    print("LIST NOT FOUND")
  
# This code is contributed by GauriShankarBadola
C#
Javascript
Output
LIST FOUND
Time Complexity: O(m*n) where m is the number of nodes in second list and n in first.
Auxiliary Space: O(1)

Optimization : 

Above code can be optimized by using extra space i.e. stores the list into two strings and apply KMP algorithm. Refer https://ide.geeksforgeeks.org/3fXUaV for implementation provided by Nishant Singh

This article is contributed by Sahil Chhabra (akku). If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. 





Like
35
Previous
Unbounded Binary Search Example (Find the point where a monotonically increasing function becomes positive first time)
Next
Binary Search functions in C++ STL (binary_search, lower_bound and upper_bound)
Related Articles
1.
Reverse a sublist of linked list
2.
Longest increasing sublist in a linked list
3.
Print sublist of a given Linked List specified by given indices
4.
C++ Program To Merge A Linked List Into Another Linked List At Alternate Positions
5.
C Program To Merge A Linked List Into Another Linked List At Alternate Positions
6.
Java Program To Merge A Linked List Into Another Linked List At Alternate Positions
7.
Python Program To Merge A Linked List Into Another Linked List At Alternate Positions
8.
Javascript Program To Merge A Linked List Into Another Linked List At Alternate Positions
9.
Insert a linked list into another linked list
10.
Merge a linked list into another linked list at alternate positions
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
princi singh
Rajput-Ji
GauriShankarBadola
GauravRajput1
simmytarika5
hardikkoriintern
phasing17
Article Tags :
Linked List
Searching
Practice Tags :
Linked List
Searching