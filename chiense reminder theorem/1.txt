Introduction to Chinese Remainder Theorem

Difficulty Level : Easy
Last Updated : 28 Nov, 2022
Read
Discuss
Courses
Practice
Video
We are given two arrays num[0..k-1] and rem[0..k-1]. In num[0..k-1], every pair is coprime (gcd for every pair is 1). We need to find minimum positive number x such that: 

     x % num[0]    =  rem[0], 
     x % num[1]    =  rem[1], 
     .......................
     x % num[k-1]  =  rem[k-1] 
Basically, we are given k numbers which are pairwise coprime, and given remainders of these numbers when an unknown number x is divided by them. We need to find the minimum possible value of x that produces given remainders.
Examples : 
 

Input:  num[] = {5, 7}, rem[] = {1, 3}
Output: 31
Explanation: 
31 is the smallest number such that:
  (1) When we divide it by 5, we get remainder 1. 
  (2) When we divide it by 7, we get remainder 3.

Input:  num[] = {3, 4, 5}, rem[] = {2, 3, 1}
Output: 11
Explanation: 
11 is the smallest number such that:
  (1) When we divide it by 3, we get remainder 2. 
  (2) When we divide it by 4, we get remainder 3.
  (3) When we divide it by 5, we get remainder 1.
Chinese Remainder Theorem states that there always exists an x that satisfies given congruences. Below is theorem statement adapted from wikipedia. 
Let num[0], num[1], …num[k-1] be positive integers that are pairwise coprime. Then, for any given sequence of integers rem[0], rem[1], … rem[k-1], there exists an integer x solving the following system of simultaneous congruences.
 

chineseremainder


The first part is clear that there exists an x. The second part basically states that all solutions (including the minimum one) produce the same remainder when divided by-product of num[0], num[1], .. num[k-1]. In the above example, the product is 3*4*5 = 60. And 11 is one solution, other solutions are 71, 131, .. etc. All these solutions produce the same remainder when divided by 60, i.e., they are of form 11 + m*60 where m >= 0.
A Naive Approach to find x is to start with 1 and one by one increment it and check if dividing it with given elements in num[] produces corresponding remainders in rem[]. Once we find such an x, we return it. 
Below is the implementation of Naive Approach.
 

C++
Java
Python3
# A Python3 program to demonstrate 
# working of Chinise remainder Theorem
  
# k is size of num[] and rem[]. 
# Returns the smallest number x 
# such that:
# x % num[0] = rem[0], 
# x % num[1] = rem[1], 
# ..................
# x % num[k-2] = rem[k-1]
# Assumption: Numbers in num[] 
# are pairwise coprime (gcd for
# every pair is 1)
def findMinX(num, rem, k):
    x = 1; # Initialize result
  
    # As per the Chinise remainder
    # theorem, this loop will
    # always break.
    while(True):
          
        # Check if remainder of 
        # x % num[j] is rem[j] 
        # or not (for all j from 
        # 0 to k-1)
        j = 0;
        while(j < k):
            if (x % num[j] != rem[j]):
                break;
            j += 1;
  
        # If all remainders 
        # matched, we found x
        if (j == k):
            return x;
  
        # Else try next number
        x += 1;
  
# Driver Code
num = [3, 4, 5];
rem = [2, 3, 1];
k = len(num);
print("x is", findMinX(num, rem, k));
  
# This code is contributed by mits
C#
PHP
Javascript
Output : 

x is 11
Time Complexity  : O(M), M is the product of all elements of num[] array.



Auxiliary Space : O(1)

See below link for an efficient method to find x.
Chinese Remainder Theorem | Set 2 (Inverse Modulo based Implementation)
This article is contributed by Ruchir Garg. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above
 

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
34
Previous
Sum of all elements up to Nth row in a Pascal triangle
Next
Implementation of Chinese Remainder theorem (Inverse Modulo based implementation)
Related Articles
1.
Compute nCr % p | Set 4 (Chinese Remainder theorem with Lucas Theorem)
2.
Implementation of Chinese Remainder theorem (Inverse Modulo based implementation)
3.
Using Chinese Remainder Theorem to Combine Modular equations
4.
Remainder with 7 for large numbers
5.
Program to find remainder without using modulo or % operator
6.
Program for quotient and remainder of big number
7.
Program to find remainder when large number is divided by 11
8.
Largest number by which given 3 numbers should be divided such that they leaves same remainder
9.
Program to find remainder when large number is divided by r
10.
Minimum integer such that it leaves a remainder 1 on dividing with any element from the range [2, N]
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
Sam007
jit_t
Mithun Kumar
Adityasharma15
jyoti369
29AjayKumar
sumitgumber28
akshaywairagade2
sayanc170
Article Tags :
Mathematical
Practice Tags :
Mathematical
Improve Article
Report Issue