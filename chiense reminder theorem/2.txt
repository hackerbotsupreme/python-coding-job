Implementation of Chinese Remainder theorem (Inverse Modulo based implementation)

Difficulty Level : Hard
Last Updated : 28 Nov, 2022
Read
Discuss
Courses
Practice
Video
We are given two arrays num[0..k-1] and rem[0..k-1]. In num[0..k-1], every pair is coprime (gcd for every pair is 1). We need to find minimum positive number x such that: 

     x % num[0]    =  rem[0], 
     x % num[1]    =  rem[1], 
     .......................
     x % num[k-1]  =  rem[k-1]
Example: 

Input:  num[] = {3, 4, 5}, rem[] = {2, 3, 1}
Output: 11
Explanation: 
11 is the smallest number such that:
  (1) When we divide it by 3, we get remainder 2. 
  (2) When we divide it by 4, we get remainder 3.
  (3) When we divide it by 5, we get remainder 1.
We strongly recommend to refer below post as a prerequisite for this.

Chinese Remainder Theorem | Set 1 (Introduction)
We have discussed a Naive solution to find minimum x. In this article, an efficient solution to find x is discussed.
The solution is based on below formula.

x =  ( âˆ‘ (rem[i]*pp[i]*inv[i]) ) % prod
   Where 0 <= i <= n-1

rem[i] is given array of remainders

prod is product of all given numbers
prod = num[0] * num[1] * ... * num[k-1]

pp[i] is product of all divided by num[i]
pp[i] = prod / num[i]

inv[i] = Modular Multiplicative Inverse of 
         pp[i] with respect to num[i]
Example: 

Let us take below example to understand the solution
   num[] = {3, 4, 5}, rem[] = {2, 3, 1}
   prod  = 60 
   pp[]  = {20, 15, 12}
   inv[] = {2,  3,  3}  // (20*2)%3 = 1, (15*3)%4 = 1
                        // (12*3)%5 = 1

   x = (rem[0]*pp[0]*inv[0] + rem[1]*pp[1]*inv[1] + 
        rem[2]*pp[2]*inv[2]) % prod
     = (2*20*2 + 3*15*3 + 1*12*3) % 60
     = (80 + 135 + 36) % 60
     = 11
Refer this for nice visual explanation of above formula.

Below is the implementation of above formula. We can use Extended Euclid based method discussed here to find inverse modulo. 



C++
Java
Python3
# A Python3 program to demonstrate 
# working of Chinese remainder 
# Theorem 
  
# Returns modulo inverse of a with 
# respect to m using extended 
# Euclid Algorithm. Refer below 
# post for details: 
# https://www.geeksforgeeks.org/
# multiplicative-inverse-under-modulo-m/ 
def inv(a, m) : 
      
    m0 = m 
    x0 = 0
    x1 = 1
  
    if (m == 1) : 
        return 0
  
    # Apply extended Euclid Algorithm 
    while (a > 1) : 
        # q is quotient 
        q = a // m 
  
        t = m 
  
        # m is remainder now, process 
        # same as euclid's algo 
        m = a % m 
        a = t 
  
        t = x0 
  
        x0 = x1 - q * x0 
  
        x1 = t 
      
    # Make x1 positive 
    if (x1 < 0) : 
        x1 = x1 + m0 
  
    return x1 
  
# k is size of num[] and rem[]. 
# Returns the smallest 
# number x such that: 
# x % num[0] = rem[0], 
# x % num[1] = rem[1], 
# .................. 
# x % num[k-2] = rem[k-1] 
# Assumption: Numbers in num[] 
# are pairwise coprime 
# (gcd for every pair is 1) 
def findMinX(num, rem, k) : 
      
    # Compute product of all numbers 
    prod = 1
    for i in range(0, k) : 
        prod = prod * num[i] 
  
    # Initialize result 
    result = 0
  
    # Apply above formula 
    for i in range(0,k): 
        pp = prod // num[i] 
        result = result + rem[i] * inv(pp, num[i]) * pp 
      
      
    return result % prod 
  
# Driver method 
num = [3, 4, 5] 
rem = [2, 3, 1] 
k = len(num) 
print( "x is " , findMinX(num, rem, k)) 
  
# This code is contributed by Nikita Tiwari. 
C#
PHP
Javascript
Output: 

x is 11
Time Complexity : O(N*LogN)

Auxiliary Space : O(1)

This article is contributed by Ruchir Garg. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above 

Recommended
Solve DSA problems on GfG Practice.

Solve Problems




Like
22
Previous
Introduction to Chinese Remainder Theorem
Next
Cyclic Redundancy Check and Modulo-2 Division
Related Articles
1.
Compute nCr % p | Set 4 (Chinese Remainder theorem with Lucas Theorem)
2.
Introduction to Chinese Remainder Theorem
3.
Using Chinese Remainder Theorem to Combine Modular equations
4.
Quotient Remainder Theorem
5.
Program to find remainder without using modulo or % operator
6.
Maximum frequency of a remainder modulo 2i
7.
Maximize remainder of sum of a pair of array elements with different parity modulo K
8.
Find the value of P and modular inverse of Q modulo 998244353
9.
Nearest smaller number to N having multiplicative inverse under modulo N equal to that number
10.
Check if final remainder is present in original Array by reducing it based on given conditions
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Hard
Easy
Normal
Medium
Hard
Expert
Improved By :
Abhinav jain NSIT
jit_t
Mithun Kumar
6jarv91
jyoti369
_saurabh_jaiswal
simmytarika5
Article Tags :
Modular Arithmetic
Mathematical
Practice Tags :
Mathematical
Modular Arithmetic
modular arithmetic