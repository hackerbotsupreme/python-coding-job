Print all paths from a given source to a destination

Difficulty Level : Medium
Last Updated : 09 Jan, 2023
Read
Discuss(70+)
Courses
Practice
Video
Given a directed graph, a source vertex ‘s’ and a destination vertex ‘d’, print all paths from given ‘s’ to ‘d’. 
Consider the following directed graph. Let the s be 2 and d be 3. There are 3 different paths from 2 to 3.
 

allPaths

Recommended Problem
Count the paths
Dynamic Programming
DFS
+3 more
Solve Problem
Submission count: 28K
Approach:

The idea is to do Depth First Traversal of a given directed graph.
Start the DFS traversal from the source.
Keep storing the visited vertices in an array or HashMap say ‘path[]’.
If the destination vertex is reached, print the contents of path[].
The important thing is to mark current vertices in the path[] as visited also so that the traversal doesn’t go in a cycle.
Following is the implementation of the above idea.

C++14
Java
Python3
# Python program to print all paths from a source to destination.
  
from collections import defaultdict
  
# This class represents a directed graph
# using adjacency list representation
class Graph:
  
    def __init__(self, vertices):
        # No. of vertices
        self.V = vertices
         
        # default dictionary to store graph
        self.graph = defaultdict(list)
  
    # function to add an edge to graph
    def addEdge(self, u, v):
        self.graph[u].append(v)
  
    '''A recursive function to print all paths from 'u' to 'd'.
    visited[] keeps track of vertices in current path.
    path[] stores actual vertices and path_index is current
    index in path[]'''
    def printAllPathsUtil(self, u, d, visited, path):
 
        # Mark the current node as visited and store in path
        visited[u]= True
        path.append(u)
 
        # If current vertex is same as destination, then print
        # current path[]
        if u == d:
            print (path)
        else:
            # If current vertex is not destination
            # Recur for all the vertices adjacent to this vertex
            for i in self.graph[u]:
                if visited[i]== False:
                    self.printAllPathsUtil(i, d, visited, path)
                     
        # Remove current vertex from path[] and mark it as unvisited
        path.pop()
        visited[u]= False
  
  
    # Prints all paths from 's' to 'd'
    def printAllPaths(self, s, d):
 
        # Mark all the vertices as not visited
        visited =[False]*(self.V)
 
        # Create an array to store paths
        path = []
 
        # Call the recursive helper function to print all paths
        self.printAllPathsUtil(s, d, visited, path)
  
  
  
# Create a graph given in the above diagram
g = Graph(4)
g.addEdge(0, 1)
g.addEdge(0, 2)
g.addEdge(0, 3)
g.addEdge(2, 0)
g.addEdge(2, 1)
g.addEdge(1, 3)
  
s = 2 ; d = 3
print ("Following are all different paths from % d to % d :" %(s, d))
g.printAllPaths(s, d)
# This code is contributed by Neelam Yadav
C#
Javascript
Output
Following are all different paths from 2 to 3
2 0 1 3 
2 0 3 
2 1 3 
Complexity Analysis: 

Time Complexity: O(2^V), The time complexity is exponential. Given a source and destination, the source and destination nodes are going to be in every path. Depending upon edges, taking the worst case where every node has a directed edge to every other node, there can be at max 2^V different paths possible in the directed graph from a given source to destination.
Auxiliary space: O(2^V), To store the paths 2^V space is needed.
This article is contributed by Shivam Gupta. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.



Like
Next
Print all paths from a given source to a destination using BFS
Related Articles
1.
Print all paths from a given source to a destination using BFS
2.
Print all shortest paths between given source and destination in an undirected graph
3.
Print all unique paths from given source to destination in a Matrix moving only down or right
4.
Count of all unique paths from given source to destination in a Matrix
5.
Print path from given Source to Destination in 2-D Plane
6.
Print all paths from a source point to all the 4 corners of a Matrix
7.
Path from a given source to a given destination having Kth largest weight in a Graph
8.
Count all possible walks from a source to a destination with exactly k edges
9.
Shortest paths from all vertices to a destination
10.
Minimum edges to reverse to make path from a source to a destination
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
sparsh singhal
Rajput-Ji
andrew1234
azatdzhanybekov
rskrish
avanitrachhadiya2155
amartyaghoshgfg
harendrakumar123
amushuk890
Article Tags :
DFS
Backtracking
Graph
Practice Tags :
Backtracking
DFS
Graph