Total numbers with no repeated digits in a range

Difficulty Level : Medium
Last Updated : 27 Jan, 2023
Read
Discuss
Courses
Practice
Video
Given a range L, R         find total such numbers in the given range such that they have no repeated digits. For example: 12 has no repeated digit. 22 has repeated digit. 102, 194 and 213 have no repeated digit. 212, 171 and 4004 have repeated digits. 

Examples: 

Input : 10 12
Output : 2
Explanation : In the given range 
10 and 12 have no repeated digit 
where as 11 has repeated digit.

Input : 1 100
Output : 90
Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Brute Force We will traverse through each element in the given range and count the number of digits which do not have repeated digits. 

C++
Java
Python3
# Python implementation of brute
# force solution.
 
# Function to check if the given
# number has repeated digit or not
def repeated_digit(n):
    a = []
     
    # Traversing through each digit
    while n != 0:
        d = n%10
         
        # if the digit is present
        # more than once in the
        # number
        if d in a:
             
            # return 0 if the number
            # has repeated digit
            return 0
        a.append(d)
        n = n//10
     
    # return 1 if the number has no
    # repeated digit
    return 1
 
# Function to find total number
# in the given range which has
# no repeated digit
def calculate(L,R):
    answer = 0
     
    # Traversing through the range
    for i in range(L,R+1):
         
        # Add 1 to the answer if i has
        # no repeated digit else 0
        answer = answer + repeated_digit(i)
     
    # return answer
    return answer
     
# Driver's Code
L=1
R=100
 
# Calling the calculate
print(calculate(L, R))
C#
PHP
Javascript
Output
90
This method will answer each query in O( N ) time.

Efficient Approach

We will calculate a prefix array of the numbers which have no repeated digit. Prefix[i]         = Total number with no repeated digit less than or equal to 1. Therefore each query can be solved in O(1) time. Answer = Prefix[R] - Prefix[L-1] 



Below is the implementation of above idea.

C++
Java
Python3
# Python implementation of
# above idea
 
# Prefix Array
Prefix = [0]
 
# Function to check if
# the given number has
# repeated digit or not
def repeated_digit(n):
    a = []
     
    # Traversing through each digit
    while n != 0:
        d = n%10
         
        # if the digit is present
        # more than once in the
        # number
        if d in a:
             
            # return 0 if the number
            # has repeated digit
            return 0
        a.append(d)
        n = n//10
     
    # return 1 if the number has no
    # repeated digit
    return 1
 
# Function to pre calculate
# the Prefix array
def pre_calculation(MAX):
     
    # To use to global Prefix array
    global Prefix
    Prefix.append(repeated_digit(1))
     
    # Traversing through the numbers
    # from 2 to MAX
    for i in range(2,MAX+1):
         
        # Generating the Prefix array
        Prefix.append( repeated_digit(i) +
                       Prefix[i-1] )
 
# Calclute Function
def calculate(L,R):
     
    # Answer
    return Prefix[R]-Prefix[L-1]
 
 
# Driver Code
 
# Maximum
MAX = 1000
 
# Pre-calculating the Prefix array.
pre_calculation(MAX)
 
# Range
L=1
R=100
 
# Calling the calculate function
# to find the total number of number
# which has no repeated digit
print(calculate(L, R))
C#
JavaScript
Output
90
Efficient Approach:  The above approach can be optimized based on the following idea:

Dynamic programming can be used to solve this problem

dp[i][j][k][l] represents numbers in the range with i’th position to be filled, j represents tight condition, k represents bitmask set for each digit from 0 to 9 and l represents whether previously non zero digit number taken or not. 
 
It can be observed that the recursive function is called exponential times. That means that some states are called repeatedly. 
So the idea is to store the value of each state. This can be done using by store the value of a state and whenever the function is called, return the stored value without computing again.
 
First answer will be calculated for 0 to A – 1 and then calculated for 0 to B then latter one is subtracted with prior one to get answer for range [L, R]
Follow the steps below to solve the problem:

Create a recursive function that takes four parameters i representing the position to be filled, j representing the tight condition, k representing bitmask and l representing whether previously non zero digit taken or not.
Call the recursive function for choosing all digits from 0 to 9 apart from N.
Base case if N size digit formed return 1;
Create a 2d array dp[N][2][M][2] initially filled with -1.
If the answer for a particular state is computed then save it in dp[i][j][k][l].
If the answer for a particular state is already computed then just return dp[i][j][k][l].
Below is the implementation of the above approach:

C++
// C++ code to implement the approach
#include <bits/stdc++.h>
using namespace std;
 
// DP table initialized with -1
int dp[11][2][(1LL << 10) - 1][2];
 
// Recursive Function to find numbers
// in the range L to R such that its
// digits are distinct
int recur(int i, int j, int k, int l, string a)
{
    // Base case
    if (i == a.size()) {
        return 1;
    }
 
    // If answer for current state is already
    // calculated then just return dp[i][j][k]
    if (dp[i][j][k][l] != -1)
        return dp[i][j][k][l];
 
    // Answer initialized with zero
    int ans = 0;
 
    // Tight condition true
    if (j == 1) {
 
        // Iterating from 0 to max value of
        // tight codition
        for (int digit = 0; digit <= 9; digit++) {
 
            // mask for digit
            int mask = (1 << digit);
 
            // if that digit is available to use
            if (mask & k) {
 
                // calling recursive function for max digit
                // taken and retaining tight condition
                if (digit == ((int)a[i] - 48)) {
                    ans += recur(i + 1, 1, k - (1 << digit),
                                 1, a);
                }
 
                // calling recursive function for zero
                // and dropping tight condition
                else if (digit == 0) {
                    ans += recur(i + 1, 0, k, 0, a);
                }
 
                // calling recursive function for number
                // less than max and dropping condition
                else if (digit < ((int)a[i] - 48)) {
                    ans += recur(i + 1, 0, k - (1 << digit),
                                 1, a);
                }
            }
        }
    }
 
    // Tight condition false
    else {
 
        // Iterating for all digits
        for (int digit = 0; digit <= 9; digit++) {
            int mask = (1 << digit);
 
            if (mask & k) {
                // calling recursive functionn for
                // not taking anything
                if (digit == 0 and l == 0)
                    ans += recur(i + 1, 0, k, 0, a);
 
                // calling recursive function for
                // taking zero
                else if (digit == 0 and l == 1)
                    ans += recur(i + 1, 0, k - (1 << digit),
                                 1, a);
 
                // calling recursive function for taking
                // digits from 1 to 9
                else
                    ans += recur(i + 1, 0, k - (1 << digit),
                                 1, a);
            }
        }
    }
 
    // Save and return dp value
    return dp[i][j][k][l] = ans;
}
 
// Function to find numbers
// in the range L to R such that its
// digits are distinct
int countInRange(int A, int B)
{
 
    // Initializing dp array with - 1
    memset(dp, -1, sizeof(dp));
 
    A--;
    string L = to_string(A), R = to_string(B);
 
    // Numbers with distinct digits in range 0 to L
    int ans1 = recur(0, 1, (1 << 10) - 1, 0, L);
 
    // Initializing dp array with - 1
    memset(dp, -1, sizeof(dp));
 
    // Numbers with distinct digits in range 0 to R
    int ans2 = recur(0, 1, (1 << 10) - 1, 0, R);
 
    // Difference of ans2 and ans1
    // will generate answer for required range
    return ans2 - ans1;
}
 
// Driver Code
int main()
{
    // Input 1
    int L = 1, R = 100;
 
    // Function Call
    cout << countInRange(L, R) << endl;
    return 0;
}
Javascript
Output
90
Time Complexity: O(log(R – L) * M) 
Auxiliary Space: O(log(R – L) * M)

Where M is the all possible subsets of set containing all digits from 0 to 9 for bitmask M = 1024  

Related Articles:

Introduction to Dynamic Programming – Data Structures and Algorithms Tutorials
Bitmasking and Dynamic Programming




Like
9
Previous
Count of repeating digits in a given Number
Next
Numbers having Unique (or Distinct) digits
Related Articles
1.
Total count of sorted numbers upto N digits in range [L, R] (Magnificent necklace combinatorics problem)
2.
Numbers of Length N having digits A and B and whose sum of digits contain only digits A and B
3.
Squares of numbers with repeated single digits | Set 1 (3, 6 and 9)
4.
Total ways of choosing X men and Y women from a total of M men and W women
5.
Count of numbers between range having only non-zero digits whose sum of digits is N and number is divisible by M
6.
Count numbers in given range such that sum of even digits is greater than sum of odd digits
7.
Count numbers from given range having odd digits at odd places and even digits at even places
8.
Count numbers from a given range that can be expressed as sum of digits raised to the power of count of digits
9.
Count of numbers in range [L, R] having sum of digits of its square equal to square of sum of digits
10.
Total number of non-decreasing numbers with n digits
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
ShivamKD
@ShivamKD
Vote for difficulty
Current difficulty : Medium
Easy
Normal
Medium
Hard
Expert
Improved By :
Mithun Kumar
Sanjit_Prasad
Rajput-Ji
rituraj_jain
sanjeev2552
29AjayKumar
gautamgoel962
phasing17
i_am_gaurav
sweetyty
rkbhola5
Article Tags :
array-range-queries
number-digits
prefix-sum
Mathematical
Practice Tags :
Mathematical
prefix-sum